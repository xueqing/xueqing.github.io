[{"authors":["admin"],"categories":null,"content":"hi，欢迎来到我的主页。\n一枚毕业于计算机专业的程序媛。喜欢阅读、电影、音乐和运动。\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"zh","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://xueqing.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"hi，欢迎来到我的主页。 一枚毕业于计算机专业的程序媛。喜欢阅读、电影、音乐和运动。","tags":null,"title":"kiki","type":"authors"},{"authors":["kiki"],"categories":["blog"],"content":"  1 概览 2 什么是 Memcached 3 什么是 Redis 4 Memcached 和 Redis 的相似点 5 Memcached 和 Redis 的不同 6 选择 Memcached 还是 Redis  6.1 选择 Memcached 6.2 选择 Redis 6.3 总结  7 参考  1 概览  关系型数据库是常见的数据库类型，但是不适合存储大量的数据。因此，引入了 NoSQL。它表示非关系型或非 SQL。Memcached 和 Redis 归类为 NoSQL Memcached 和 Redis 最大的区别在于  Memcached 是开源的，高性能，分布式内存缓存系统，可通过最小化数据加载代价而加速 web 应用 Redis 是开源的，key-value 存储，用于建设可扩展的 web 应用   2 什么是 Memcached  Memcached 是开源的，高性能，分布式内存缓存系统。它是持久化数据存储 Memcached 主要的优势在于它降低了数据库加载代价，因此对于大量数据库加载的网站是非常有效且快速的 Memcached 有存储命令、检索命令、统计命令  存储命令 set：为一个新的或已有的键设置新值 add：为一个新键设置值 replace：替换已有的键的值 append：为已有键增加一些数据 检索命令 get：获取键中保存的值 delete：删除已有键   3 什么是 Redis  Redis 是开源的，内存型数据结构存储，用作数据库、缓存和消息代理 Redis 代表远程字典服务器(remote dictionary server)。以 key-value 格式存储数据 用户在 Redis 命令行界面(command line interfacem, CLI)，使用命令和数据库通信  SET：写数据到 Redis 数据存储 GET：从 Redis 数据存储读数据  Redis 简单易用。它归类为 NoSQL 数据库。和像 MySQL，Oracle 的关系型数据库不同，Redis 不使用表存储数据  Redis 不使用常规的 SQL 命令，例如 select、delete、create、update 等 Redis 使用数据结构存储数据。主要的数据结构是 string，list，set，sorted set，hash，bitmap 等  Redis 使用 C 语言编写，是开源的，跨平台的系统 Redis 主要的优势在于它保存数据在内存中。这使得 Redis 非常快速。它也可以写数据到磁盘。Redis 可用作一个缓存系统或是全面的数据库 Redis 另外一个优势是它可以和其他数据库一起使用。Redis 可以存储频繁访问的数据，而不访问主要的数据库，并且可以从主要的数据库获取其它的数据 Redis 遵循 master-slave 架构。它提供性能、可扩展性且易用  4 Memcached 和 Redis 的相似点  都归类为 NoSQL 都以 key-value 格式存储数据：Redis 更准确的描述是作为数据结构存储 都将存储数据到内存(毫秒级延迟) 二者都是轻量级，和易失缓存一样快  Memcached 易失内存型的 key-value 存储 Redis 不限于此，是一个数据结构服务  易用性、支持多种编程语言(Java/Python/PHP/C/C++/C#/JavaScript/NodeJS/Ruby/Go) 支持数据分割：允许分布数据到多个节点，以便随着需求增长扩展数据处理能力  5 Memcached 和 Redis 的不同    不同点 Memcached Redis     描述 开源的，高性能，分布式内存缓存系统，可通过最小化数据加载代价而加速 web 应用 开源的，key-value 存储，可作为数据库、缓存和消息代理   易安装 N Y   高级数据结构 N(字符串和整型) Y(string/list/set/sorted set/hash)   多线程架构 Y(充分利用多核) N   快照 N Y(时间快照存储数据到磁盘，用于归档或恢复)   复制 N Y(支持 master-slave 复制)   事务 N Y   pub/sub N Y   Lua 脚本 N Y   地理空间支持 N Y(可查找两个元素之间的距离，或者查找给定范围的所有元素)   速度 读写速度更快 读写速度快，但是取决于开发的应用    6 选择 Memcached 还是 Redis 6.1 选择 Memcached  当缓存相当小的静态数据，比如 HTML 代码段：Memcached 内部的内存管理系统在最简单的应用场景下是更加高效，因为只占用相当小的内存资源用于元数据 当数据大小动态变化，Memcached 的内存管理效率快速下降，有时内存会碎片化  同时，大数据集经常牵涉到序列化数据，需要更多空间存储 如果使用Memcached，当重启时数据会丢失，而且重建缓存代价很好  Memcached 在伸缩性方面比 Redis 好： Memcached 是多线程，很方便增加计算资源；Redis 大多数是单线程，在不丢失数据的情况下只能通过集群水平增长  集群是有效的扩展方案，但是在设置和操作方面很复杂 Memcached 不支持复制  Memcached 在处理高流量网站方面更好：可以一次读大量信息，而且响应时间快。  6.2 选择 Redis  Redis 支持更多数据类型，所以作为缓存可以提供更更好的性能和效率 数据回收(data eviction)：缓存使用数据回收机制，从内存删除旧数据为新数据分配空间  Memcached 使用 LRU(least recently used, 最近最少使用)算法，有时随机回收大小类似的数据 Redis 支持细粒度控制回收，提供 6 种不同的回收策 Redis 支持 lazy 和 active 的回收，即需要更多空间或主动地(proactively) Memcached 值支持 lazy 回收  Redis 作为数据结构的一些特性  丰富的数据类型和使用命令 默认持久化到磁盘 锁事务(WATCH/MULTI/EXEC) 发布订阅(pub/sub)非常快 值可达 512MB(Memcached 限制每个键 1MB) 支持 Lua 脚本(2.6 开始) 内嵌集群(3.0 开始) 在各方面非常快  Redis 丰富的数据类型非常重要。它支持 Redis 提供共享队列(lists)，消息机制(pub/sub)，存储会话(hash)，高评分跟踪(sorted set)  6.3 总结  Memcached 和 Redis 归类为 NoSQL。它们不使用结构化化查询语言(structed query language)来存储、检索和操作数据 不同点在于 Memcached 是开源、高性能分布式内存缓存系统，Redis 是开源、key-value 存储用于构建可扩展 web 应用 使用 Memcached 还是 Redis 取决于应用：需要高级数据结构时可使用 Redis；降低数据库加载代价，加速 web 应用可使用 Memcached  7 参考  Difference Between Memcached and Redis Memcached vs Redis, Which One to Pick Choosing between Redis and Memcached  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e8296b26da0a1b08fb1a7d75911a3763","permalink":"https://xueqing.github.io/blog/database/redis_vs_memcached/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/redis_vs_memcached/","section":"blog","summary":"1 概览 2 什么是 Memcached 3 什么是 Redis 4 Memcached 和 Redis 的相似点 5 Memcached 和 Redis 的不同 6 选择 Memcached 还是 Redis 6.1 选择 Memcached 6.2 选择 Redis 6.3 总结 7 参考 1 概览 关系型数据库是常见的数据库类型，但是","tags":["database"],"title":"Redis vs Memcached","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  目录 参考  目录  1 Memcached 简介 2 Memcached 存储命令 3 Memcached 查找命令 4 Memcached 统计命令 5 Memcached 实例  参考  Memcached 教程 Redis 命令  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"aaa24d2340de2affef3f3d35b559b7d5","permalink":"https://xueqing.github.io/blog/database/memcached/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/memcached/readme/","section":"blog","summary":"目录 参考 目录 1 Memcached 简介 2 Memcached 存储命令 3 Memcached 查找命令 4 Memcached 统计命令 5 Memcached 实例 参考 Memcached 教程 Redis 命令","tags":["database"],"title":"前言","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  概念 目录 参考  概念  BSD 协议：可自由的使用，修改源代码，也可将修改后的代码作为开源或专有软件再发布 守护进程(Daemon Process)：Linux 的后台服务进程。生存期较长，通常独立于控制终端且周期性地执行某种任务或等待处理某些发生的事件。脱离终端是为了避免进程被任何终端产生的信息打断，其执行过程中的信息也不显示在任何终端  目录  1 Redis 简介 2 Redis 命令 3 Redis 进阶 4 Redis VM 技术  参考  Redis 教程 Redis 命令  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"072dd9e2bb5a63b0b5d6313ec90c991c","permalink":"https://xueqing.github.io/blog/database/redis/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/redis/readme/","section":"blog","summary":"概念 目录 参考 概念 BSD 协议：可自由的使用，修改源代码，也可将修改后的代码作为开源或专有软件再发布 守护进程(Daemon Process)：Linu","tags":["database"],"title":"前言","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  敏捷：一种用于增量创建软件的软件开发方法，使用 1-4 周的短期迭代以保证开发和一直改变的业务需求一致\n 1 入门\n 1.1 敏捷中的角色 1.2 跨职能团队 1.3 敏捷团队如何计划工作 1.4 用户故事 user story 1.5 故事何时完成  2 宣言\n 2.1 软件开发价值观 2.2 敏捷宣言的 12 个原则  3 特点\n 3.1 迭代/增量和准备进化 3.2 面对面沟通 3.3 反馈回路  4 每日站会\n 4.1 每日站会的概念 4.2 每日站会的重要性 4.3 每日站会的参与人 4.4 物理分散的团队  5 完成标准\n 5.1 用户故事 5.2 迭代 5.3 发布  6 发布计划\n 6.1 参与者 6.2 计划的先决条件 6.3 需要的材料 6.4 计划数据 6.5 输出 6.6 日程  7 迭代计划\n 7.1 参与者 7.2 计划的先决条件 7.3 计划流程 7.4 速度计算 7.5 任务容量 7.6 计划步骤  8 产品需求列表\n 8.1 产品需求列表的重要性 8.2 产品需求列表的特点  9 有用的术语\n  有用的书  Scrum: a Breathtakingly Brief and Agile Introduction Learning Agile: Understanding Scrum, XP, Lean, and Kanban Agile Project Management For Dummies Agile Project Management QuickStart Guide: A Simplified Beginners Guide To Agile Project Management Agile!: The Half-Assed Guide To Creating Anything You Want From Scratch. No Experts Required! Understanding the Agile Manifesto: A Brief \u0026amp; Bold Guide to Agile  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"581d870636aadd8b46eb5ff9f6addeba","permalink":"https://xueqing.github.io/translation/agile/tutorial/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/readme/","section":"translation","summary":"敏捷：一种用于增量创建软件的软件开发方法，使用 1-4 周的短期迭代以保证开发和一直改变的业务需求一致 1 入门 1.1 敏捷中的角色 1.2 跨职能团队 1.3 敏捷团队如何","tags":["agile"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 参考 Go 命令官网 学习。\n用法 Go 是一个用于管理 Go 源码的工具。\n用法：go \u0026lt;command\u0026gt; [arguments]\n命令有:\n   命令 描述     bug 开启一个缺陷报告   build 编译包及其依赖   clean 删除目标文件和缓存文件   doc 查看包或者符号的文档   env 打印 Go 环境变量信息   fix 更新包以使用新的 API   fmt gofmt(reformat) 包的源文件   generate 通过处理源生成 Go 文件   get 为当前模块添加依赖并且安装依赖   install 编译和安装包及其依赖   list 列举包或模块   mod 模块维护   run 编译和运行 Go 程序   test 测试包   tool 运行指定的 go 工具   version 打印 Go 版本   vet 打印包中可能的错误    使用 go help \u0026lt;command\u0026gt; 查看命令的更多信息。\n其他的帮助话题：\n   帮助 描述     buildmode 编译模式   c 在 Go 和 C 直接调用   cache 编译和测试缓存   environment 环境变量   filetype 文件类型   go.mod go.mod 文件   gopath GOPATH 环境变量   gopath-get 传统 GOPATH 的 go get   goproxy 模块 proxy 协议   importpath 模块路径语法   modules 模块，模块版本等   module-get 明白模块的 go get   module-auth 使用 go.sum 的模块认证   module-private 对于非公共模块的模块配置   packages 包列表和模式   testflag 测试标识   testfunc 测试函数    使用 go help \u0026lt;topic\u0026gt; 查看话题的更多信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"feac5dbbc6dcdb9768f0c6bf3e0d3ed8","permalink":"https://xueqing.github.io/translation/go-doc/command/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/readme/","section":"translation","summary":"参考 Go 命令官网 学习。 用法 Go 是一个用于管理 Go 源码的工具。 用法：go \u0026lt;command\u0026gt; [arguments] 命令有: 命令 描述 bug 开启一个缺陷报告 build 编译包及其依赖 clean 删除目标文件和缓存文","tags":["go-command"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  安装 Go 学习 Go 参考 文章 非英文文章  参考 Golang 官网文档 学习。\n安装 Go 学习 Go 参考 文章 代码漫步：Go 程序的指导之旅。 Go 的一级函数 生成任意文本：一个 Markov 链算法 通过共享内存 编写 Web 应用——构建一个简单的 web 应用。  工具 关于 Go 命令——为什么我们编写它？它是什么？它不是什么？如何使用它？ 使用 GDB 调试 Go 代码 数据竞争检测器——关于数据竞争检测器的手册 快速入门 Go 的汇编器——介绍了 Go 使用的汇编器  更多 查看维基的文章页面获取更多 Go 的文章   非英文文章 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9eb740e1016fe4df123b01d9fe361c80","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/readme/","section":"translation","summary":"安装 Go 学习 Go 参考 文章 非英文文章 参考 Golang 官网文档 学习。 安装 Go 学习 Go 参考 文章 代码漫步：Go 程序的指导之旅。 Go 的一级函数 生成任意文本：一个 Markov 链算法 通","tags":["golang-doc"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  标准库 其他包  子仓库 社区   参考 Golang 官网文档 学习。\n标准库    名字 概述     testing 支持对 Go 包的自动测试   ——iotest 实现了主要用于 testing 的 Reader 和 Writer   ——quick 实现了帮助黑盒测试的工具函数    其他包 子仓库 社区 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fb9ede3d85eb0a102bc87f6142d9de24","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/readme/","section":"translation","summary":"标准库 其他包 子仓库 社区 参考 Golang 官网文档 学习。 标准库 名字 概述 testing 支持对 Go 包的自动测试 ——iotest 实现了主要用于 testing 的 Reader 和 Writer ——quick 实现了帮","tags":["golang-pkg"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"关于 Go 语言之旅 的练习题\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fd33b8efbf7c5f1502956c6d192e2fe3","permalink":"https://xueqing.github.io/translation/go-doc/gotour/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/readme/","section":"translation","summary":"关于 Go 语言之旅 的练习题","tags":["go-tour"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  Go 之家 贡献 内容列表  Go 入门 用 Go 工作 更多关于 Go 的学习 Go 社区 使用 go 工具链 其他的 Go 编程维基 网上用 Go 的服务 生产环境的 Go 程序疑难解答 为 Go 项目做贡献 平台特定的信息 发布特定的信息 问题   参考 Go 维基官网 学习。\n原网页由 HunterQ 在 2019/4/12 编辑。第 99 次修订。\nGo 之家 欢迎来到 Go 维基，集中了关于 Go 编程语言的信息。Awesome Go 是另外一个给 Go 编程人员的丰富的资源，由 Go 社区管理。\n贡献  这个维基可被拥有 Github 账号的 Go 社区的任意成员编辑。 如果你想要新增一个页面，请首先在 Go issue 跟踪页面 打开一个 issue，以前缀 “wiki” 开头来提议新增的内容。清楚地说明为什么这个内容不适用任何现有的页面。 因为维基页面的重命名会破坏外部链接，请在重命名或删除任何维基页面之前打开一个 issue。  内容列表 Go 入门 Go 语言之旅是入门最好的地方。 实效 Go 编程将会帮助学习如何编写惯用的 Go 代码。 Go 标准库文档使你熟悉标准库。 使用 Go Playground 用于在你的浏览器测试 Go 程序。 仍然不确信？查看这份 Go 使用者清单以及他们的一些成功案例。我们也收集了一份长长的原因清单，关于你为什么应该尝试 Go。 了解更多已经从其他语言转到 Go 的公司。 这里是一些帮助你入门的链接。  用 Go 工作 准备好自己写一些 Go 代码了吗？这里是一些帮助你入门的链接。\n安装和设置你的环境 由此开始：官方安装文档 如果你更喜欢源码安装，先阅读此文档 从源码安装——其他关于源码安装的建议 Windows 用户？为 Windows 安装和配置 Go、Git和 Atom Mac 用户？如何开始-Go——安装 Go 和编译你的以第一个 web 服务的分步指南 安装遇到问题？安装疑难解答 确保你已经正确设置了 $GOPATH 环境变量 如果需要其他关于使用 $GOPATH 的建议，浏览这里 多个 GOROOT——更多高级信息关于在安装多个 go 以及 $GOROOT 变量的环境工作  Go 集成开发环境和编辑器——一些关于如何使用你最喜欢的编辑器开发 Go 的信息 为开发 Go 代码的工具——格式化、语言分析、代码检查、代码重构、代码导航和可视化 查找 Go 库和包 由此开始：Go 开源工程 查找 Go 包：go 文档官网 Go 开源包图的可视化  管理你的依赖——一个你可以用来管理第三方包 (vendoring) 的工具纵览 发布开源的 Go 包 准备好发布你的包了？由此开始 Go 检查清单——发布一个项目的完全指南 如何设计你的 Github 仓库 以便其他 Go 编程人员更容易使用 go get 命令 Go 包——一些使得 Go 包更易用的建议   更多关于 Go 的学习 当你对这门语言有一个概览之后，这里有一些资源供你使用学习更多关于 Go：\n学习 Go—— Go 入门到高级的资料集合 Go 新手开发人员的最佳实践——来自 Go 社区成员的见解 服务器编程——构建 web、移动端和 API 服务器 并发 错误处理 测试 移动端——安卓和 iOS  书籍——一份已经出版的(电子书，论文)关于 Go 的的书籍清单 博客——关于 Go 的博客 [播客]——描写 Go 特色的播客和故事  视频、谈话和演示 GopherVids 是一个关于 Go 的视频的搜索目录 GoTalks——来自 Go 会议和聚会的谈话集合 Screencasts  文章——帮助你学习 Go 的文章集合 培训——免费的、商业的、在线的 Go 课堂培训 大学课程——一个使用 Go 的 CS 编程和课程列表 非英语人士的资源  Go 社区 有一些地方，你可以找到在线的 Gophers。要了解成为 Go 社区一名成员意味着什么，阅读 Damian Gryski 在 2015 年 GolankUK 会议上的主题演讲或者观看 Andrew Gerrand 在 2015 年 GopherCon 上的闭幕演讲。\n Gophers 在线聚会场所：  Go 论坛——Go 社区的万能讨论论坛 Gophers Slack Channel——针对实时聊天(要求成员) Golang 新闻——关于 Go 编程的链接 r/golang——sub-reddit 在 Twitter 上，follow @golang 账户，并且   使用 go 工具链 其他的 Go 编程维基 网上用 Go 的服务 生产环境的 Go 程序疑难解答 为 Go 项目做贡献 平台特定的信息 发布特定的信息 问题 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"5653abcd37e2517d287a5b345e1ea437","permalink":"https://xueqing.github.io/translation/go-doc/wiki/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/readme/","section":"translation","summary":"Go 之家 贡献 内容列表 Go 入门 用 Go 工作 更多关于 Go 的学习 Go 社区 使用 go 工具链 其他的 Go 编程维基 网上用 Go 的服务 生产环境的 Go 程序疑难解答 为 Go 项目做贡献 平台特","tags":["go-doc-wiki"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  编辑器 基本技巧  标题 代码 粗斜体 换行 链接 列表 普通无序列表 普通有序列表 列表嵌套 表格 引用 普通引用 引用嵌套引用 引用嵌套列表 引用嵌套代码块 图片 分隔符  高级技巧  行内 HTML 元素 符号转义 公式 脚注  文档规范  编辑器  Mac  Mou  Windows  MarkdownPad MarkPad  Linux  ReText Vim+Vimwiki  在线编辑器  markable dillinger  浏览器插件  MaDe(chrome) 马克飞象  高级应用  Sublime Text 2 + MarkdownEditing / 教程   基本技巧 标题 Markdown 支持两种标题的语法，类 Setext 和类 atx 形式\n类 atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶(可以在行尾加上 #)\n# 一级标题 # ## 二级标题 ## ### 三级标题 ### #### 四级标题 ####  类 Setext 形式是用底线的形式，利用 = (最高阶标题)和 - (第二阶标题)(任何数量的 = 和 - 都可以有效果)\n一级标题 ============ 二级标题 ------------  代码  行内代码：用反引号标记行内代码，如  function_name() 包含反引号`的代码  代码段，通常编辑器根据代码片段适配合适的高亮方法\n 可以用[三个`]包裹一段代码，并指定一种语言\nint test() { return 0; }  也可以使用 4 空格或是 1 个制表符缩进，再贴上代码，实现相同的的效果\n  int test() { return 0; }\n 如果不需要代码高亮，可以用下面的语法禁用\nint test() { return 0; }    粗斜体 Markdown 使用星号和底线作为标记强调字词的符号\n斜体 斜体\n粗体 粗体\n粗斜体 粗斜体\n换行 另起一行，只需要在当前结尾加2个空格\n这样就会另起一行\n空出一行，即可新起一个段落\n行尾加斜线，\n也可实现换行\n链接  行内式链接  文字链接：方括号(链接名称)+圆括号(链接地址) 链接名称 google gmail 自动链接：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，尖括号+(链接地址) https://translate.google.com/ https://mail.google.com/mail/u/0/  参考式链接：在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记，然后在文件的任意处为标记变量赋值(网址)  隐式链接标记：可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字 这个链接用 Google 作为网址变量 Google 这个链接用 yahoo 作为网址变量 Yahoo! 链接标记的内容定义的形式为： 方括号(前面可以选择性地加上至多三个空格来缩进)，里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址(链接网址也可以用尖括号包起来) 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着   列表 普通无序列表 - 无序列表，文本前使用[减号+空格] + 无序列表，文本前使用[加号+空格] * 无序列表，文本前使用[星号+空格]  普通有序列表  列表前使用[数字+英文句点+空格] 可以自动添加数字 数字不对显示的时候回自动调整 文档开始如果出现‘1986. blabla’要写成‘1986. blabla’  5) 列表前使用[数字+)+空格] 6) 可以自动添加数字 7) 数字不对显示的时候回自动调整 8) 文档开始如果出现‘1986. blabla’要写成‘1986. blabla’\n列表嵌套  列出所有元素：  无序列表元素 A  元素 A 的有序子列表  前面加 4 个空格或 1 个制表符  列表里的多段换行：\n前面必须加 4 个空格或 1 个制表符，\n这样换行，整体的格式不会乱 列表里引用：\n 前面空一行\n仍然需要在 \u0026gt; 前面加 4 个空格或 1 个制表符\n 列表里代码段：\n前面 4 个空格或 1 个制表符，之后按三个`代码语法\n或者直接空 8 个空格或 2 个制表符， 引入代码块   表格 默认：左对齐(col1)\n   col1 col2 col3     col1 col2 col3   col1,col1 col2,col2 col3,col3   col1,col1,col1 col2,col2,col2 col3,col3,col3    引用 普通引用  引用前使用[大于号+空格]\n换行可以不加\n空行和新起一行需要加上\n 引用嵌套引用  最外层引用 \u0026gt; 多一个[大于号+空格]嵌套一层引用 \u0026gt; \u0026gt; 可以嵌套很多层\n 引用嵌套列表   这是引用里嵌套的一个列表 还可以有子列表  子列表需要从[减号、加号、星号]之后延后 4 个空格或 1 个制表符开始    引用嵌套代码块  同样的，在前面加 4 个空格或 1 个制表符形成代码块   或者使用三个`形成代码块  图片  跟链接的方法区别在于前面加了个感叹号。行内式的图片语法 感叹号+方括号(图片名称)+圆括号(图片链接地址/图片相对路径)：\n  分隔符 在新起一行输入三个减号、星号、底线，即可实现分割线。当前后都有段落时，请空出一行。\n段落1\n段落2\n段落3\n高级技巧 行内 HTML 元素 目前只支持段内 HTML 元素效果，包括 kbd/b/i/em/sup/sub/br 等。现不建议使用 HTML 元素\n 键位显示： 使用 \u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Alt\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Del\u0026lt;/kbd\u0026gt; 重启电脑 代码块：使用 pre/code 标签 粗斜体：\u0026lt;b\u0026gt;粗体\u0026lt;/b\u0026gt;  符号转义 在符号前加反斜杠可以避免被转义。如：\n\\_不想这里的文本变斜体\\_ \\*\\*不想这里的文本被加粗\\*\\*  Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\\ 反斜线\n` 反引号\n* 星号\n_ 底线\n{} 花括号\n[] 方括号\n() 括弧\n# 井字号\n+ 加号\n- 减号\n. 英文句点\n! 惊叹号\n公式 当需要在编辑器中插入数学公式时，可以使用两个美元符包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n$$ x \\href{why-equal.html}{=} y^2 + 1 $$\n脚注 Markdown 官网1\n文档规范  标题用#，右边的#可不加 行内代码  三个反引号 制表符 code 标签  代码段  三个反引号 制表符 pre/code 标签    https://daringfireball.net/projects/markdown/ ^   ","date":1573374150,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1573374150,"objectID":"ec9b794cab92402479acc18c8fc224e0","permalink":"https://xueqing.github.io/blog/markdown/markdown_%E8%A7%84%E8%8C%83/","publishdate":"2019-11-10T16:22:30+08:00","relpermalink":"/blog/markdown/markdown_%E8%A7%84%E8%8C%83/","section":"blog","summary":"编辑器 基本技巧 标题 代码 粗斜体 换行 链接 列表 普通无序列表 普通有序列表 列表嵌套 表格 引用 普通引用 引用嵌套引用 引用嵌套列表 引用嵌套代码块 图片 分隔符 高级","tags":["md"],"title":"Markdown 规范","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  1.1 前言 1.2 特点 1.3 支持的语言 1.4 Memcached 用户  1.1 前言  Memcached 是一个自由开源、高性能、分布式内存对象缓存系统 基于内存的 key-value 存储，用于存储小块的任意数据(字符串、对象)。这些数据可以是数据库调用、API 调用或页面渲染的结果 设计简洁：便于快速开发，减轻开发难度，解决了大数据量缓存的问题。API 兼容大部分流行的开发语言 本质上是一个简洁的 key-value 存储系统 一般的使用目的：通过缓存数据库查询结果，减少数据库访问次数，以提高动态 web 应用的速度，提高可扩展性  1.2 特点  协议简单 基于 libevent 的事件处理  libevent 是一个基于事件触发的网络库 libevent API 提供一种机制：当一个文件描述符的特定时间发生(可读、可写、出错)，或一个定时时间发生，libevent 自动执行用户指定的回调函数，来处理事件 libevent 也支持信号或常规超时的回调 libevent 用于取代网络服务器中的事件循环检查框架  内置内存存储方式 分布式不互相通信  1.3 支持的语言  许多语言实现了连接 Memcached 的客户端，以 Perl、PHP 为主 其他语言包括：Python/Ruby/C#/C/C++/Lua  1.4 Memcached 用户 LiveJournal/Wikipedia/Flickr/Bebo/Twitter/Typepad/Yellowbot/Youtube/WordPress.com/Craigslist/Mixi\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0858eabe515ca89f4c58a2f4b1528cad","permalink":"https://xueqing.github.io/blog/database/memcached/1_intro/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/memcached/1_intro/","section":"blog","summary":"1.1 前言 1.2 特点 1.3 支持的语言 1.4 Memcached 用户 1.1 前言 Memcached 是一个自由开源、高性能、分布式内存对象缓存系统 基于内存的 key-value 存储，用于存储小块的任意数据(字符串、对象","tags":["database"],"title":"1 Memcached 简介","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  1.1 key-value 缓存产品特点 1.2 Redis 优点 1.3 Redis 配置 1.4 Redis 数据类型 1.5 Redis 数据库  1.1 key-value 缓存产品特点  支持数据持久化：可将内存数据保存到磁盘，重启的时候再次加载使用 支持简单的 key-value 类型，也支持 list/set/zset/hash 数据的存储 支持数据备份：master-slave 模式的数据备份  1.2 Redis 优点  性能极高：读写速度快 数据类型丰富：支持 string/list/hash/set/zset(sorted set) 原子性：单个操作是原子性的。多个操作支持事务，即原子性，通过 MULTI 和 EXEC 指令包起来 特性丰富：支持 publish/subscribe，通知，key 过期等  1.3 Redis 配置  配置文件位于安装目录，文件名 redis.conf(Windows 下是 redis.windows.conf) 查看配置项 CONFIG GET CONFIG_STRING_NAME  CONFIG_STRING_NAME 为 * 表示获取所有配置项  设置配置项 CONFIG GET CONFIG_STRING_NAME NEW_CONFIG_VALUE  1.4 Redis 数据类型    类型 简介 特性 命令 场景     string key-value 二进制安全，即 string 可包含任何数据(jpg 对象或序列化的对象等) SET key val/GET key -   hash key-value 对集合，即编程中的 Map 适合存储对象，可像数据库只修改某一属性值 HMSET hash_name key1 val1 [key2 val2...]/HGET hash_name key 存储/读取/修改用户属性   list string 列表(双向链表)，按插入顺序排序，下标从 0 开始 增删快，可操作某一段元素 lpush list_key value/lrange list_key start_index end_index 消息队列；最新消息排行等(如朋友圈时间线)   set string 无序集合，不允许 member 重复，hash 表实现 增删查的复杂度都是 O(1)；为集合提供交并差运算 sadd set_key member：添加 member 到 set_key 对应的集合，成功返回 1，已存在返回 0，set_key 对应集合不存在返回错误；smembers set_key 共同好友；利用唯一性，统计访问网站的所有独立 IP；根据 tag 求交集，大于某阈值可推荐好友   zset string 集合，member 唯一，score 可重复。score是 double 类型，根据 score 为 member 从小到大排序 数据插入时已排序 zadd zset_key score member/ZEANGEBYSCORE zset_key score1 score2 排行榜；带权重的消息队列    1.5 Redis 数据库  一个 Redis 示例提供了多个字典用于存储数据。客户端可指定存储的字典。每个字典可理解成一个独立的数据库。每个数据库数据隔离不共享 Redis 不支持自定义数据名字，每个数据库以编号(0 开始)命名。默认支持 16 个数据库，可通过配置文件修改 客户端连接 Redis 之后，默认选择 0 号数据库，可使用 SELECT db_no 更换数据库 局限性  开发者需要自己记录每个数据库存储的数据 不支持为每个数据库单独设置密码。所以所有数据库的权限是绑定的 多个数据库不是完全隔离，如 FLUSHALL 可清除一个 Redis 示例所有数据库的数据。所以不建议多个应用程序使用一个 Redis 实例的不同数据库存储数据。且 Redis 是轻量级的，一个空的实例占用内存很小   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"c96afabef38b567d9b590086f4c85b73","permalink":"https://xueqing.github.io/blog/database/redis/1_intro/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/redis/1_intro/","section":"blog","summary":"1.1 key-value 缓存产品特点 1.2 Redis 优点 1.3 Redis 配置 1.4 Redis 数据类型 1.5 Redis 数据库 1.1 key-value 缓存产品特点 支持数据持久化：可将内存数据保存到磁盘，重启的时候再次加载使用 支持简单","tags":["database"],"title":"1 Redis 简介","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  1.1 敏捷中的角色  1.1.1 Scrum Master 流程管理员 1.1.2 Product Owner 产品负责人  1.2 跨职能团队 1.3 敏捷团队如何计划工作 1.4 用户故事 user story  1.4.1 用户故事和任务的关系  1.5 故事何时完成  1.5.1 验收标准(acceptance criteria) 1.5.2 如何定义需求   1.1 敏捷中的角色 1.1.1 Scrum Master 流程管理员  流程管理员是团队领导，帮助团队成员实现敏捷计划。责任包括  保证所有角色和机能之间的紧密合作 移除阻碍 保护团队免受打扰 和组织一起跟踪公司的进度和流程 保证敏捷的检查与调整   1.1.2 Product Owner 产品负责人  从业务角度推动产品。责任包括  定义需求，评估需求的优先级 确定发布的实际和内容 在迭代计划和发布计划会议中承担积极的角色 确保团队致力于最有价值的需求 接受满足完成标准和定义好的验收标准(acceptance criteria)用户故事(user story)   1.2 跨职能团队  每个敏捷团队应当是一个自满足的团队，成员是 5-9 人，平均经验是 6-10 年 典型的敏捷团队包括 3-4 位开发者，1 位测试，1 位技术领导， 1 位产品负责人和 1 位流程管理员  产品负责人和流程管理员作为团队接口，其他成员是技术接口   1.3 敏捷团队如何计划工作  迭代实现用户故事，每个迭代周期是 10-15 天 point 点：定义一个团队可以提交完成。一般是 8 个小时。每个故事用点评估 capacity 能力：定义一个人可以提交完成。用小时评估  1.4 用户故事 user story  一个用户故事是一个需求，定义用户所需作为功能  在发布计划中，使用相对范围的点数粗略的评估一个用户故事 在迭代计划中，将用户故事分解成任务(task)   1.4.1 用户故事和任务的关系  用户故事描述要完成什么，定义了用户所需；任务描述如何完成它，定义了要实现的功能 故事是通过任务实现，每个故事是任务的一个集合 当把用户固执放在当前迭代计划时，用户故事被分解成任务 任务用小时评估，一般是 2-12 个小时 故事通过验收测试进行验证  1.5 故事何时完成  团队定义完成的含义。标准可能是  所有的任务(开发和测试)被完成 所有的验收测试在运行并通过 没有开放的缺陷(defect) 产品负责人已经接受了故事 可交付给终端用户   1.5.1 验收标准(acceptance criteria)  标准定义一个特性需要的功能、行为和性能，以便产品负责人可以接受 它定义了要完成什么以便开发者知道一个用户故事何时完成  1.5.2 如何定义需求  需求可以定义为  一个用户故事 包含验收标准 包含完成这个故事的任务   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ba4d99d4171a3d0bea1e6a5d742bb867","permalink":"https://xueqing.github.io/translation/agile/tutorial/1-primer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/1-primer/","section":"translation","summary":"1.1 敏捷中的角色 1.1.1 Scrum Master 流程管理员 1.1.2 Product Owner 产品负责人 1.2 跨职能团队 1.3 敏捷团队如何计划工作 1.4 用户故事 user story 1.4.1 用户故事和任务的关系 1.5 故事何时完成 1.5.1 验收标准","tags":["agile"],"title":"1 入门","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  2.1 命令 2.2 键命令 2.3 字符串命令 2.4 哈希命令 2.5 列表命令 2.6 集合命令 2.7 有序集合命令 2.8 Redis HyperLogLog 命令 2.9 Redis 发布订阅命令 2.10 Redis 事务命令 2.11 Redis 脚本命令 2.12 Redis 连接命令 2.13 Redis 服务器命令  2.1 命令 通过 Redis 客户端再 Redis 服务上执行 Redis 命令\n# 启动客户端，连接本地 redis 服务 redis-cli # 检查 redis 服务是否启动 PING # 连接远程 redis 服务 redis-cli -h host -p port -a password   避免中文乱码 redis-cli --raw  2.2 键命令 用于管理 redis 的 key：COMMAND key_name\n   命令 描述     DEL key key 存在时删除 key   DUMP key 序列化 key，返回被序列化的值   EXISTS key 检查 key 是否存在   EXPIRE key seconds 为给定 key 设置过期时间，以秒计   EXPIREAT key timestamp EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)   PEXPIRE key milliseconds 设置 key 的过期时间以毫秒计   PEXPIREAT key milliseconds-timestamp 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计   KEYS pattern 查找所有符合给定模式(pattern)的 key   MOVE key db 将当前数据库的 key 移动到给定的数据库 db 当中   PERSIST key 移除 key 的过期时间，key 将持久保持   PTTL key 以毫秒为单位返回 key 的剩余的过期时间   TTL key 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)   RANDOMKEY 从当前数据库中随机返回一个 key   RENAME key newkey 修改 key 的名称   RENAMENX key newkey 仅当 newkey 不存在时，将 key 改名为 newkey   TYPE key 返回 key 所储存的值的类型    2.3 字符串命令 用于管理字符串值：COMMAND key_name\n   命令 描述     SET key value 设置 key 的值   GET key 获取 key 的值   GETRANGE key start end 返回 key 中字符串值的子字符   GETSET key value 将 key 的值设为 value ，并返回 key 的旧值(old value)   GETBIT key offset 对 key 所储存的字符串值，获取指定偏移量上的位(bit)   MGET key1 [key2..] 获取所有(一个或多个)给定 key 的值   SETBIT key offset value 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)   SETEX key seconds value 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (秒)   SETNX key value 只有在 key 不存在时设置 key 的值   SETRANGE key offset value 用 value 覆写给定 key 所储存的字符串值，从偏移量 offset 开始   STRLEN key 返回 key 所储存的字符串值的长度   MSET key value [key value \u0026hellip;] 同时设置一个或多个 key-value 对   MSETNX key value [key value \u0026hellip;] 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在   PSETEX key milliseconds value 和 SETEX 命令相似，以毫秒为单位设置 key 的生存时间   INCR key 将 key 中储存的数字值增一   INCRBY key increment 将 key 所储存的值加上给定的增量值(increment)   INCRBYFLOAT key increment 将 key 所储存的值加上给定的浮点增量值(increment)   DECR key 将 key 中储存的数字值减 1   DECRBY key decrement key 所储存的值减去给定的减量值(decrement)   APPEND key value 如果 key 已经存在并且是一个字符串， 将 value 追加到该 key 原来值的末尾    2.4 哈希命令    命令 描述     HDEL key field1 [field2] 删除一个或多个哈希表字段   HEXISTS key field 查看哈希表 key 中，指定的字段是否存在   HGET key field 获取存储在哈希表中指定字段的值   HGETALL key 获取在哈希表中指定 key 的所有字段和值   HINCRBY key field increment 为哈希表 key 中的指定字段的整数值加上增量 increment   HINCRBYFLOAT key field increment 为哈希表 key 中的指定字段的浮点数值加上增量 increment   HKEYS key 获取所有哈希表中的字段   HLEN key 获取哈希表中字段的数量   HMGET key field1 [field2] 获取所有给定字段的值   HMSET key field1 value1 [field2 value2 ] 同时将多个 field-value (域-值)对设置到哈希表 key 中   HSET key field value 将哈希表 key 中的字段 field 的值设为 value   HSETNX key field value 只有在字段 field 不存在时，设置哈希表字段的值   HVALS key 获取哈希表中所有值   HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对    2.5 列表命令    命令 描述     BLPOP key1 [key2 ] timeout 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止   BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止   BRPOPLPUSH source destination timeout 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止   LINDEX key index 通过索引获取列表中的元   LINSERT key BEFORE AFTER pivot value   LLEN key 获取列表长   LPOP key 移出并获取列表的第一个元   LPUSH key value1 [value2] 将一个或多个值插入到列表头   LPUSHX key value 将一个值插入到已存在的列表头   LRANGE key start stop 获取列表指定范围内的元   LREM key count value 移除列表元   LSET key index value 通过索引设置列表元素的   LTRIM key start stop 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除   RPOP key 移除列表的最后一个元素，返回值为移除的元素   RPOPLPUSH source destination 移除列表的最后一个元素，并将该元素添加到另一个列表并返   RPUSH key value1 [value2] 在列表中添加一个或多个   RPUSHX key value 为已存在的列表添加    2.6 集合命令    命令 描述     SADD key member1 [member2] 向集合添加一个或多个成员   SCARD key 获取集合的成员数   SDIFF key1 [key2] 返回给定所有集合的差集   SDIFFSTORE destination key1 [key2] 返回给定所有集合的差集并存储在 destination 中   SINTER key1 [key2] 返回给定所有集合的交集   SINTERSTORE destination key1 [key2] 返回给定所有集合的交集并存储在 destination 中   SISMEMBER key member 判断 member 元素是否是集合 key 的成员   SMEMBERS key 返回集合中的所有成员   SMOVE source destination member 将 member 元素从 source 集合移动到 destination 集合   SPOP key 移除并返回集合中的一个随机元素   SRANDMEMBER key [count] 返回集合中一个或多个随机数   SREM key member1 [member2] 移除集合中一个或多个成员   SUNION key1 [key2] 返回所有给定集合的并集   SUNIONSTORE destination key1 [key2] 所有给定集合的并集存储在 destination 集合中   SSCAN key cursor [MATCH pattern] [COUNT count] 迭代集合中的元素    2.7 有序集合命令    命令 描述     ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的分数   ZCARD key 获取有序集合的成员数   ZCOUNT key min max 计算在有序集合中指定区间分数的成员数   ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment   ZINTERSTORE destination numkeys key [key \u0026hellip;] 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中   ZLEXCOUNT key min max 在有序集合中计算指定字典区间内成员数量   ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合成指定区间内的成员   ZRANGEBYLEX key min max [LIMIT offset count] 通过字典区间返回有序集合的成员   ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 通过分数返回有序集合指定区间内的成员   ZRANK key member 返回有序集合中指定成员的索引   ZREM key member [member \u0026hellip;] 移除有序集合中的一个或多个成员   ZREMRANGEBYLEX key min max 移除有序集合中给定的字典区间的所有成员   ZREMRANGEBYRANK key start stop 移除有序集合中给定的排名区间的所有成员   ZREMRANGEBYSCORE key min max 移除有序集合中给定的分数区间的所有成员   ZREVRANGE key start stop [WITHSCORES] 返回有序集中指定区间内的成员，通过索引，分数从高到底   ZREVRANGEBYSCORE key max min [WITHSCORES] 返回有序集中指定分数区间内的成员，分数从高到低排序   ZREVRANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序   ZSCORE key member 返回有序集中，成员的分数值   ZUNIONSTORE destination numkeys key [key \u0026hellip;] 计算给定的一个或多个有序集的并集，并存储在新的 key 中   ZSCAN key cursor [MATCH pattern] [COUNT count] 迭代有序集合中的元素(包括元素成员和元素分值)     集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)其实不太准确\n在redis sorted sets里面当items内容大于64的时候同时使用了hash和skiplist两种设计实现。这也会为了排序和查找性能做的优化。所以如上可知：\n 添加和删除都需要修改skiplist，所以复杂度为O(log(n))。但是如果仅仅是查找元素的话可以直接使用hash，其复杂度为O(1)。 其他的range操作复杂度一般为O(log(n))。\n 当然如果是小于64的时候，因为是采用了ziplist的设计，其时间复杂度为O(n)\n 2.8 Redis HyperLogLog 命令  Redis 2.8.9 版本添加 HyperLogLog 结构，用于做基数统计 优点：输入元素的数量或提交非常大时，计算基数所需空间小且固定 原因：HyperLogLog 只根据输入元素计算基数，不会存储元素本身。所以也不能返回输入的各个元素 基数估计：在误差可接受范围内，快速计算基数     命令 描述     PFADD key element [element \u0026hellip;] 添加指定元素到 HyperLogLog 中   PFCOUNT key [key \u0026hellip;] 返回给定 HyperLogLog 的基数估算值   PFMERGE destkey sourcekey [sourcekey \u0026hellip;] 将多个 HyperLogLog 合并为一个 HyperLogLog    2.9 Redis 发布订阅命令  Redis 发布订阅(pub/sub)是一种消息通信模式：发送者发送消息，订阅者接收消息  Redis 客户端可以订阅任意数量的频道      命令 描述     PSUBSCRIBE pattern [pattern \u0026hellip;] 订阅一个或多个符合给定模式的频道   PUBSUB subcommand [argument [argument \u0026hellip;]] 查看订阅与发布系统状态   PUBLISH channel message 将信息发送到指定的频道   PUNSUBSCRIBE [pattern [pattern \u0026hellip;]] 退订所有给定模式的频道   SUBSCRIBE channel [channel \u0026hellip;] 订阅给定的一个或多个频道的信息   UNSUBSCRIBE [channel [channel \u0026hellip;]] 退订给定的频道    2.10 Redis 事务命令  Redis 事务可一次执行多个命令，且保证  批量操作在发送 EXEC 命令前被放入缓存队列 收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余命令仍旧执行 事务执行过程中，其他客户端提交的命令请求不会插入到事务执行命令序列  一个事务从开始到执行有三个阶段：开始事务、命令入列、执行事务 注意：单个 Redis 命令的执行是原子性的。但 Redis 未在事务上增加维护原子性的机制，所以 Redis 事务的执行不是原子性的  事务可理解为一个打包的批量执行脚本，但批量指令不是原子化的，中间指令的失败不会回滚前面已做指令，也不会停止执行后续指令  事务的原子性是指：事务要么完整的被执行，要么完全不执行     命令 描述     DISCARD 取消事务，放弃执行事务块内的所有命令   EXEC 执行所有事务块内的命令   MULTI 标记一个事务块的开始   UNWATCH 取消 WATCH 命令对所有 key 的监视   WATCH key [key \u0026hellip;] 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断    2.11 Redis 脚本命令  Redis 脚本使用 Lua 解释器执行脚本。Redis 2.6 内嵌支持 Lua 环境     命令 描述     EVAL script numkeys key [key \u0026hellip;] arg [arg \u0026hellip;] 执行 Lua 脚本   EVALSHA sha1 numkeys key [key \u0026hellip;] arg [arg \u0026hellip;] 执行 Lua 脚本   SCRIPT EXISTS script [script \u0026hellip;] 查看指定的脚本是否已经被保存在缓存当中   SCRIPT FLUSH 从脚本缓存中移除所有脚本   SCRIPT KILL 杀死当前正在运行的 Lua 脚本   SCRIPT LOAD script 将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本    2.12 Redis 连接命令    命令 描述     AUTH password 验证密码是否正确   ECHO message 打印字符串   PING 查看服务是否运行   QUIT 关闭当前连接   SELECT index 切换到指定的数据库    2.13 Redis 服务器命令  INFO 命令获取 Redis 服务器的统计信息     命令 描述     BGREWRITEAOF 异步执行一个 AOF(AppendOnly File) 文件重写操作   BGSAVE 在后台异步保存当前数据库的数据到磁盘   CLIENT KILL [ip:port] [ID client-id] 关闭客户端连接   CLIENT LIST 获取连接到服务器的客户端连接列表   CLIENT GETNAME 获取连接的名称   CLIENT PAUSE timeout 在指定时间内终止运行来自客户端的命令   CLIENT SETNAME connection-name 设置当前连接的名称   CLUSTER SLOTS 获取集群节点的映射数组   COMMAND 获取 Redis 命令详情数组   COMMAND COUNT 获取 Redis 命令总数   COMMAND GETKEYS 获取给定命令的所有键   TIME 返回当前服务器时间   COMMAND INFO command-name [command-name \u0026hellip;] 获取指定 Redis 命令描述的数组   CONFIG GET parameter 获取指定配置参数的值   CONFIG REWRITE 对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写   CONFIG SET parameter value 修改 redis 配置参数，无需重启   CONFIG RESETSTAT 重置 INFO 命令中的某些统计数据   DBSIZE 返回当前数据库的 key 的数量   DEBUG OBJECT key 获取 key 的调试信息   DEBUG SEGFAULT 让 Redis 服务崩溃   FLUSHALL 删除所有数据库的所有key   FLUSHDB 删除当前数据库的所有key   INFO [section] 获取 Redis 服务器的各种信息和统计数值   LASTSAVE 返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示   MONITOR 实时打印出 Redis 服务器接收到的命令，调试用   ROLE 返回主从实例所属的角色   SAVE 同步保存数据到硬盘   SHUTDOWN [NOSAVE] [SAVE] 异步保存数据到硬盘，并关闭服务器   SLAVEOF host port 将当前服务器转变为指定服务器的从属服务器(slave server)   SLOWLOG subcommand [argument] 管理 redis 的慢日志   SYNC 用于复制功能(replication)的内部命令    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"289a5b1cbb2cfa07a06ffa32a5239679","permalink":"https://xueqing.github.io/blog/database/redis/2_command/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/redis/2_command/","section":"blog","summary":"2.1 命令 2.2 键命令 2.3 字符串命令 2.4 哈希命令 2.5 列表命令 2.6 集合命令 2.7 有序集合命令 2.8 Redis HyperLogLog 命令 2.9 Redis 发布订阅命令 2.10 Redis 事务命令 2.11 Redis 脚本命令 2.12 Redis 连接命令 2.13 Redis 服务","tags":["database"],"title":"2 Redis 命令","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  2.1 软件开发价值观 2.2 敏捷宣言的 12 个原则  2.1 软件开发价值观  个体和互动：高于流程和工具 可工作的软件：高于详尽的文档 客户合作：高于合同谈判 响应变化：高于遵循计划  2.2 敏捷宣言的 12 个原则  满足客户需求：最重要的是通过尽早和不断交付有价值的软件满足客户需求 欢迎变化：软件开发过程中变化不可避免。应该欢迎需求的变化，即使在开发后期。敏捷过程应保持客户的竞争优势 交付可工作软件：经常交付可以工作的软件，从几周到几个月，时间尺度越短越好 合作：业务人员和开发者在整个项目过程中必须在一起工作 动力：应该围绕斗志高昂的人进行软件开发。给开发者提供环境，相信他们一边使他们感觉对完成工作负责 面对面对话：面对面对话是在开发小组中最有效率也最有效果的信息传达方式 按照可工作的软件度量进度：可工作的软件是关键，它应当是进度的主要度量标准 维持不变的节奏：敏捷过程提倡可持续开发。业务、开发人员和用户应能维持项目不变的节奏 监察：定期关注技术的完美型和好的设计来提高敏捷性 简单性：保持事情简单，使用简单的术语来度量未完成的工作 自我组织的团队：一个敏捷团队应该是自我组织的，不应严重依赖其他团队，因为最好的架构、需求和设计源自自我组织的团队 定期评审工作：每隔一段时间评审工作，以便团队可以离开如何变得更有效率，并相应地调整自己的行为  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"048e0a7c5146decf8ed804d5fd24f451","permalink":"https://xueqing.github.io/translation/agile/tutorial/2-manifesto/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/2-manifesto/","section":"translation","summary":"2.1 软件开发价值观 2.2 敏捷宣言的 12 个原则 2.1 软件开发价值观 个体和互动：高于流程和工具 可工作的软件：高于详尽的文档 客户合作：高于合同谈判 响应变化：高","tags":["agile"],"title":"2 宣言","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  3.1 Redis 数据备份与恢复 3.2 Redis 安全 3.3 Redis 性能测试 3.4 Redis 客户端命令 3.5 Redis 管道技术 3.6 Redis 分区  3.1 Redis 数据备份与恢复    命令 描述     SAVE 创建当前数据库的备份，在 Redis 安装目录创建 dump.rdb 文件   CONFIG GET dir 获取 Redis 安装目录。将备份文件 dump.rdb 移动到安装目录并启动服务即可   BGSAVE 在后台执行命令，创建 Redis 备份文件    3.2 Redis 安全  通过配置文件设置密码，使得客户端连接到 Redis 服务需要密码验证     命令 描述     CONFIG get requirepass 查看是否设置了密码验证。默认 requirepass 参数为空，即无需密码   CONFIG set requirepass password 设置密码。之后客户端连接 Redis 服务需要密码验证   AUTH password 输入密码验证    3.3 Redis 性能测试  通过同时执行多个命令实现性能测试 基本命令 redis-benchmark [option] [option value]  在 Redis 安装目录下执行 不是 Redis 客户端的内部命令      可选参数 描述 默认值     -h 指定服务器主机名 127.0.0.1   -p 指定服务器端口 6379   -s 指定服务器 socket -   -c 指定并发连接数 50   -n 指定请求数 10000   -d 以字节的形式指定 SET/GET 值的数据大小 2   -k 1=keep alive 0=reconnect 1   -r SET/GET/INCR 使用随机 key, SADD 使用随机值 -   -P 通过管道传输 numreq 请求 1   -q 强制退出 redis。仅显示 query/sec 值 -   \u0026ndash;csv 以 CSV 格式输出 -   -l 生成循环，永久执行测试 -   -t 仅运行以逗号分隔的测试命令列表 -   -I Idle 模式。仅打开 N 个 idle 连接并等待 -    3.4 Redis 客户端命令  Redis 通过监听一个 TCP 端口或 Unix socket 方式接收来自客户端的连接。建立一个连接后，Redis 内部会进行  客户端 socket 被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型 为该 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法 创建一个可读的文件事件用于监听该客户端 socket 的数据发送  最大连接数： Redis 2.4 中，最大连接数被硬编码到代码内部。2.6 之后可配置  CONFIG get maxclients 查看最大连接数 CONFIG set maxclients 1000 修改最大连接数 redis-server --maxclients 10000 在服务启动时设置最大连接数      命令 描述     CLIENT LIST 返回连接到 Redis 服务的客户端列表   CLIENT SETNAME 设置当前连接的名称   CLIENT GETNAME 获取通过 CLIENT SETNAME 命令设置的服务名称   CLIENT PAUSE 挂起客户端连接，指定挂起的时间以毫秒计   CLIENT KILL 关闭    3.5 Redis 管道技术  Redis 是一种基于客户端-服务端模型以及请求/响应协议的 TCP 服务。一般步骤  客户端向服务端发送一个查询请求，并监听 socket 返回。通常以阻塞模式，等待服务端响应 服务端处理命令，将结果返回给客户端  Redis 管道技术可在服务端未响应时，客户端可继续向服务端发送请求，并最终一次性读取所有服务端的响应 管道技术提高了 Redis 服务的性能  3.6 Redis 分区  分区是分割数据到多个 Redis 实例的处理过程。每个实例只保存 key 的一个子集 优势  通过利用多台计算机内存的和值，使得可以构造更大的数据库 通过多核和多台计算机，支持扩展计算能力；通过多台计算机和网络适配器，支持扩展网络带宽  不足  通常不支持涉及多个 key 的操作。如，当两个 set 映射到不同的 Redis 实例上时，不能对两个 set 做交集操作 不能使用涉及多个 key 的 Redis 事务 数据处理复杂。如，需要处理多个 rdb/aof 文件，并且从多个实例和主机备份持久化文件 增删容量复杂。Redis 集群大多支持在运行时增删节点的透明数据平衡能力。类似于客户端分区、代理等其他系统则不支持此特性。可参考 presharding 技术  分区类型  范围分区：映射一定范围的对象到特定的 Redis 实例 不足：要有一个区间范围到实例的映射表，要管理表和各种对象的映射表 哈希分区：对任何 key 都适用。操作方法 用一个 hash 函数将 key 转换为一个数字 对整数取模(按照 Redis 实例数目)，从而映射到其中一个 Redis 实例   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"a54809f5ddaf067aaecd1f7babc169ad","permalink":"https://xueqing.github.io/blog/database/redis/3_advanced/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/redis/3_advanced/","section":"blog","summary":"3.1 Redis 数据备份与恢复 3.2 Redis 安全 3.3 Redis 性能测试 3.4 Redis 客户端命令 3.5 Redis 管道技术 3.6 Redis 分区 3.1 Redis 数据备份与恢复 命令 描述 SAVE 创建当前数据库的备份，在 Redis 安装目录创建 dump.rdb","tags":["database"],"title":"3 Redis 进阶","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  3.1 迭代/增量和准备进化 3.2 面对面沟通 3.3 反馈回路  3.1 迭代/增量和准备进化  大多数敏捷开发方法将一个问题分解成小任务。对于所有的需求没有直接长期的计划。通常，迭代是短时间的规划，例如一到四周。 每个迭代都有一个跨职能的团队，工作内容包含软件开发的所有功能，包括规划、需求分析、设计、编码、单元测试和验收测试 迭代结束的产物是一个可工作的产品，并在迭代结束后向利益相关者展示 演示之后，采纳评审意见，并根据需求计划包含进可工作的软件  3.2 面对面沟通  每个敏捷团队应该有一个客户代表(类似Scrum 中的产品负责人)。这个代表被授权代表利益相关者，且能够回答开发者在迭代中的问题 通常会在办公室的显著位置放一个消息辐射体(实体显示器)，以便路人可以看到敏捷团队的进度。消息辐射体展示了最新的项目状态总结  3.3 反馈回路  每日站会是所有敏捷开发的一个共同文化，也称为日常 Scrum。它是一个简短的会议，每个团队成员相互报告自己已经完成的、接下来要做的以及面对的所有问题状态  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"18066a3c2979d3d12e696951be0c575b","permalink":"https://xueqing.github.io/translation/agile/tutorial/3-characteristics/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/3-characteristics/","section":"translation","summary":"3.1 迭代/增量和准备进化 3.2 面对面沟通 3.3 反馈回路 3.1 迭代/增量和准备进化 大多数敏捷开发方法将一个问题分解成小任务。对于所有的需求没有直接长期的计划","tags":["agile"],"title":"3 特点","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  4.1 前言 4.2 简单解释 VM 4.3 何时使用 VM 是个好主意 4.4 VM 配置 4.5 设置 vm-max-memory 4.6 配置 swap 文件 4.7 线程式 VM vs 阻塞式 VM 4.8 需要知道的一些事  4.8.1 swap 文件的好位置 4.8.2 监视 VM 4.8.3 开启 VM 的 Redis：.rdb 文件 和 只能追加的文件哪个好 4.8.4 尽可能少的使用内存  4.9 VM 稳定性 4.10 参考 4.11 其他内容  4.11.1 Redis 对象和 VM pointer 4.11.2 交换过程   4.1 前言  重要提示：Redis VM(virtual memory) 现在已经弃用。2.4 是最新支持 VM 的版本(但警告不鼓励使用 VM)。我们发现使用 VM 有一些劣势和问题。在将来的 Redis，我们希望简单提供最好的内存数据库(但像往常一样持久化到磁盘)，至少现在不用考虑支持大于 RAM 大小的数据库。我们将来致力于提供脚本化、集群和更好的持久化 Redis VM 特性第一次出现在稳定的 Redis 2.0 发布版本。然而，VM 在 git 的不稳定分支上仍然可以获取，且稳定可测试  4.2 简单解释 VM  Redis 遵循 key-value 模型。键和一些值关联。通常，Redis 将键和相关的值保存在内存。有时这不是最好的选项，所以在设计上必须把键放在内存(为了保证快速查找)，但是可以把较少使用的值交换到磁盘 在实际中，这意味着如果你在内存有 100 000 个键的数据集，但是只有 10% 的键经常使用，支持 VM 的 Redis 会尝试将较少使用的键关联的值转移到磁盘。当客户端的命令请求这些值时，这些值从 swap 文件加载到主存  4.3 何时使用 VM 是个好主意  在使用 VM 之前，你应该问自己你是否真的需要它。Redis 是磁盘备份，内存型数据库。正确使用 Redis 几乎总是有足够的 RAM 保存所有数据到内存。仍然有一些场景是不可能实现的  数据访问非常不均匀。只有小部分的键(比如网站上相关的活跃用户)被大量访问。同时每个键有大量的数据在内存中 不管数据访问模式和大量的值，只是没有足够的内存存放所有的数据。这种配置下，Redis 可当作磁盘型数据库，而键保存在内存，因此键查找很快，但是访问实际的值需要访问磁盘(较慢)  需要记住一个重要的概念Redis 不能交换键，因此如果内存问题的事实是键太多而对应的值很小，VM 不是解决方案 然而，如果因为值很大(比如大量的字符串、列表、集合或者有太多元素的哈希)而占用大量内存，VM 是一个好主意 有时候，可以通过哈希将相关的数据组合在一个键中，从而将“键很多，值很小”的问题转换成“键很少，值很大”的问题。比如，不要为对象的每个属性设置一个键，而是每个对象一个键，用哈希表示不同的属性  4.4 VM 配置  配置 VM 不难，但是需要根据需求仔细设置最好的参数 通过编辑 redis.conf 开启和配置 VM：vm-enabled yes 其他一些配置选项可以改变 VM 行为。规则就是不想使用默认配置运行 Redis，因为每个问题和数据集需要一些微调以达到最好的优势  4.5 设置 vm-max-memory  vm-max-memory 指定 Redis 在交换值到磁盘之前可以自由使用的内存大小 基本上，如果没有达到这个内存限制，Redis 不会交换对象，所有对象在内存中。一旦达到这个限制，Redis 会交换足够的对象以使内存降到限制以下 交换的对象主要是“年纪最大”(即未被使用的实际最长)，但是一个对象的“可交换性”与它在内存中大小的对数是成比例的。因此，虽然偏向更旧的对象，当“年纪”相同时首先交换更大的对象 警告：因为不能交换键，在键使用空间大于内存时，Redis 不会考虑 vm-max-memory 设置 vm-max-memory 最好的值是足够的 RAM 来保持数据工作集。在实际中，只要给 Redis 尽可能多的空间，交换过程更好  4.6 配置 swap 文件  Redis 使用交换文件将数据从内存转移到磁盘。交换文件和数据持久性无关，而且当一个 Redis 示例终止时可以被删除。但是，Redis 运行时，不应移动、删除或改变交换文件 因为在随机访问方式中经常使用 Redis 交换文件，把交换文件放在 SSD(solid state disk)会达到更好的性能 交换文件被分成页。一个值可以被交换到一个或多个页，但是一个页不能保存超过一个值 没有直接方式告诉 Redis 应该使用多大的交换文件。而是配置两个不同的值，二者相乘得到使用的字节数。可通过 redis.conf 配置两个参数  vm-pages：交换文件的页数 vm-page-size：页的大小，以字节为单位  比如页大小是 32 bytes，总页数是 10 000 000，交换文件可以保存 320 MB 的数据 因为一个页不能保存超过一个值(但是一个值可以保存在多个页)，必须仔细设置这些参数。通常，最好的注意是设置页大小以便大部分值可以使用较少的页交换  4.7 线程式 VM vs 阻塞式 VM  另一个很重要的配置参数是 vm-max-threads。默认值是 4 表示为了执行交换文件的 I/O 操作所用的线程数量最大值。一个好的值只要和系统的核数匹配即可 0 会开启阻塞式 VM。当配置成阻塞式 VM 时，Redis 会以同步阻塞方式执行 I/O  客户端访问交换出去的值，从磁盘读时会阻塞其他客户端，因此客户端经历的延迟会变大，尤其当磁盘慢或者忙，或者磁盘有大的交换的值 阻塞式 VM 的性能总的来说较好，因为没有同步、线程创建、恢复等待值的阻塞客户端的时间损失。因此，如果愿意接受较高的延迟，阻塞式 VM 是个好的选择。尤其是交换很少发生，且大部分访问的数据都在内存时  相反，如果有大量的交换操作，且有许多核想要利用，而且通常不希望处理交换值的客户端阻塞其他客户端几毫秒(交换值很大的时候时间更长)，最好使用线程式 VM 鼓励使用不同的配置对数据集做实验。。。  4.8 需要知道的一些事 4.8.1 swap 文件的好位置  在很多配置中，交换文件可以很大，达到 40GB 甚至更大。不是所有类型的文件系统可以较好的处理大文件，尤其是 Mac OS X 文件系统在处理大文件方面比较差 建议使用 Linux ext3 文件系统，或者其他较好支持稀疏文件(sparse files)的文件系统。什么是稀疏文件呢？  稀疏文件大部分内容是空白的。高级的文件系统如 ext2，ext3，ext4，ReiserFS，Reiser4 等可以更有效地编码这些文件，并且在需要的时候为文件分配更多的空间，即文件更多的实际块被使用  交换文件显然是非常稀疏的，尤其是当服务运行时间较短，或者相比交换出去的数据更大时。一个不支持稀疏文件的文件系统创建一个大文件时，有时会阻塞 Redis 流程  4.8.2 监视 VM  当有一个开启 VM 的 Redis 系统允许时，可能对它如何工作感兴趣：总共交换了多少对象，每秒交换和加载的对象数目等 有一个工具方便检查 VM 如何允许，是 Redis 工具的一部分。这个工具叫做 redis-stat，使用方式很直接：./redis-stat vmstat\n./redis-stat vmstat --------------- objects --------------- ------ pages ------ ----- memory ----- load-in swap-out swapped delta used delta used delta 138837 1078936 800402 +800402 807620 +807620 209.50M +209.50M 4277 38011 829802 +29400 837441 +29821 206.47M -3.03M 3347 39508 862619 +32817 870340 +32899 202.96M -3.51M 4445 36943 890646 +28027 897925 +27585 199.92M -3.04M 10391 16902 886783 -3863 894104 -3821 200.22M +309.56K 8888 19507 888371 +1588 895678 +1574 200.05M -171.81K 8377 20082 891664 +3293 899850 +4172 200.10M +53.55K 9671 20210 892586 +922 899917 +67 199.82M -285.30K 10861 16723 887638 -4948 895003 -4914 200.13M +312.35K 9541 21945 890618 +2980 898004 +3001 199.94M -197.11K 9689 17257 888345 -2273 896405 -1599 200.27M +337.77K 10087 18784 886771 -1574 894577 -1828 200.36M +91.60K 9330 19350 887411 +640 894817 +240 200.17M -189.72K  上述输出的 redis 服务开启了 VM，大约有 1 百万键，且有大量的同步加载使用 redis-load 工具\n 可以从输出中看到，每秒都发生一些 load-in 和 swap-out 操作。注意第一行表示服务启动后实际的值，后续的行和前面的不一样\n 如果分配足够的内存来保存数据工作集，可能应该看到更少的交换发送，因为 redis-stat 是一个很有价值的工具来理解是否需要去商店购买 RAM\n  4.8.3 开启 VM 的 Redis：.rdb 文件 和 只能追加的文件哪个好  当开启 VM 时，保存和加载数据库是相当慢的操作。如果服务配置成使用最小的内存(即 vm-max-memory 设置成 0)，在开启 VM 后，在 2 秒内加载的数据库通常需要 13 秒时间加载 因此，你可能想要切换配置使用只能追加的文件(Append Only File)来持久化，以便于你可以一直执行 BGREWRITEAOF 需要注意当一个 BGSAVE 或 BGREWRITEAOF 在处理时，Redis 不会在磁盘上交换新的值。当有一个子进程访问 VM 时 VM 是只读的。因此如果一个工作的子进程有大量的写操作时，内存使用会增长  子进程在读 VM 时，主进程不能进行值交换操作。因为通常读完一次值，“年龄”变小，可能从 VM 取出，而交换新的值   4.8.4 尽可能少的使用内存  将 Redis 设置成磁盘型数据库，而只保存键在内存的一个有趣的设置是设置 vm-max-memory 为 0。如果不介意更多延迟和较差的性能，但是想要非常大的值使用更少的内存，这个是好的设置 这种设置情况，应该首先尝试设置 VM 是阻塞式的(vm-max-threads 为 0)，因为大业务量会导致很多交换操作，且和简单的阻塞式实现相比，线程会消耗大量的资源  4.9 VM 稳定性  VM 仍然是实验性代码，但是在过去的几周，在开发环境下用各种方式测试了 VM，甚至在一些生产环境。在测试阶段没有注意到 bug。但是在一些未控制的环境，且出于某些原因无法复现这些设置，会出现更加模糊的 bug 在这个阶段，鼓励在开发环境尝试 VM，甚至是生产环境下，当数据库不是关键型任务，比如大量持久化数据可以小时而不会有任何问题  4.10 参考  官方文档  4.11 其他内容 4.11.1 Redis 对象和 VM pointer  键值都是 Redis 的对象，但是当值被移到 VM 时，会变成 VM pointer。主要记录值在磁盘的信息，如记录对象在交换文件第几页、共使用几页等内容 Redis 对象和 VM pointer 都有一个字段 storage，用于判断值的位置  redis_vm_memory：在内存 redis_vm_swapped：在磁盘 redis_vm_loading：在磁盘，但目前正有进程将其加载到内存 redis_vm_swapping：在内存，但目前正有进程将其写入磁盘   4.11.2 交换过程  将对象交换到交换文件  计算保存此对象需要占用多少页 在交换文件中寻找一段连续空间保存此对象 把对象写入交换文件  将对象从交换文件取出到内存  VM pointer 记录了对象在文件的起始页和占用页数，直接加载到内存即可  阻塞式 VM 在内存使用超过设定的 vm-max-memory 时，会循环找到候选对象进行交换直到内存使用下降到设定值以下  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1f3f8ed623dcc9e137e80f27f931bb29","permalink":"https://xueqing.github.io/blog/database/redis/4_vm/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/database/redis/4_vm/","section":"blog","summary":"4.1 前言 4.2 简单解释 VM 4.3 何时使用 VM 是个好主意 4.4 VM 配置 4.5 设置 vm-max-memory 4.6 配置 swap 文件 4.7 线程式 VM vs 阻塞式 VM 4.8 需要知道的一些事 4.8.1 swap 文件的好位置 4.8.2 监视 VM 4.8.3 开启 VM 的","tags":["database"],"title":"4 Redis VM 技术","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  4.1 每日站会的概念 4.2 每日站会的重要性 4.3 每日站会的参与人 4.4 物理分散的团队\n 每日站会，顾名思义，是敏捷团队所有成员媒体的状态会议。它不仅为定期的更新提供论坛，也将团队成员的问题作为关注点以便可以被快速处理\n 每日站会是一个必须的实践，不管一个敏捷团队建立的办公室位置\n  4.1 每日站会的概念  每日站会是所有成员间的一个每日状态会议，大概举行 15 分钟 每个成员必须回答三个重要的问题  昨天做了什么 今天要做什么 正面临的问题或阻碍  每日站会用于更新状态，而不是讨论。讨论的成员应当安排其他时间 参与者应当站着而不是坐着以便快速结束  4.2 每日站会的重要性  每日站会在敏捷中的益处  团队可以评估每日进度，查看每个迭代计划是否可以交付 每个团队成员通知自己每天的完成量 为团队的所有延期和障碍提供可视化性   4.3 每日站会的参与人  流程管理员、产品负责人和交付团队应当参与每日站会 利益相关者和客户鼓励出席会议，并可以作为观察者，但是不应该参与站会 流程管理员应该记录每个团队成员的疑问和面临的问题  4.4 物理分散的团队  站会可以有多种方式，以便敏捷团队的成员分布在不同的时区  轮流选择一名成员，可以出席不同时区的站会 每个团队有单独的站会，在一个工具(如 Rally，SharePoint，Wikis等)更新站会的状态 准备多种沟通工具(如电话会议、视频会议、即时通讯工具或其他第三方认可的知识共享工具)   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ef9df5a6a4bb9947ff27297876b6a147","permalink":"https://xueqing.github.io/translation/agile/tutorial/4-daily-standup/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/4-daily-standup/","section":"translation","summary":"4.1 每日站会的概念 4.2 每日站会的重要性 4.3 每日站会的参与人 4.4 物理分散的团队 每日站会，顾名思义，是敏捷团队所有成员媒体的状态会议。它不仅为定期的更新","tags":["agile"],"title":"4 每日站会","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  5.1 用户故事 5.2 迭代 5.3 发布  5.1 用户故事  一个用户故事是由用户几句日常语言表叔的需求，应该在一个迭代中完成 用户故事完成时  检查了所有相关代码 通过所有单元测试 case 通过所有验收测试 case 写了帮助文档 产品负责人已经验收了这个故事   5.2 迭代  一个迭代发布一个产品，来验收解决的用户故事或故障 迭代在迭代计划会议中定义，通过一个迭代演示和评审会议完成 一个迭代也叫一个冲刺(sprint) 一个迭代完成时  产品需求列表已完成 测试了性能 用户故事被验收或移动到下次迭代 故障被解决或推迟到下次迭代   5.3 发布  一个发布是一个主要的里程碑，代表内部或外部工作的交付，是产品或系统的测试版本 一个发布完成时  测试了系统压力 调整了性能 执行了安全验证 测试了灾难恢复计划   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"de864999892e718d66bf113c0610d33c","permalink":"https://xueqing.github.io/translation/agile/tutorial/5-definition-of-done/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/5-definition-of-done/","section":"translation","summary":"5.1 用户故事 5.2 迭代 5.3 发布 5.1 用户故事 一个用户故事是由用户几句日常语言表叔的需求，应该在一个迭代中完成 用户故事完成时 检查了所有相关代码 通过所有单元","tags":["agile"],"title":"5 完成标准","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  6.1 参与者 6.2 计划的先决条件- 6.3 需要的材料 6.4 计划数据 6.5 输出 6.6 日程  发布计划的目的是创建一个计划，来增量交付产品。每 2~3 个月做一次。\n6.1 参与者  流程管理员：敏捷交付团队的引导者 产品负责人：代表产品需求列表的一般观点 敏捷团队：提出技术可行性和任何依赖的观点 利益相关者：当发布会议作出决定时，利益相关者比如客户、程序管理者、主体专家提出建议  6.2 计划的先决条件-  排好序的产品需求列表：由产品负责人管理。一般考虑 5~10 个特性，由产品负责人考虑可被纳入一个发布 团队能力的输入、已知的速度或任何关于技术的挑战 高等级的愿景 市场和业务目标 确认新产品的需求列表项是否需要  6.3 需要的材料  贴出的日常，目的 挂图，白板，记号笔 投影仪，用于共享计划会议中所需数据或工具的电脑 计划数据  6.4 计划数据  上次迭代或发布计划的结果 不同的利益相关者对于产品、市场条件和截止日期的反馈 上次发布或迭代的行动计划 需要考虑的特性或故障 上次发布或预估的速度 组织和个人的日程表 其他团队和主体专家管理依赖性的输入  6.5 输出  发布计划 承诺 要监察的问题、关注点、依赖性和假设 改进未来发布计划的建议  6.6 日程  开场仪式：欢迎消息，评审目的和提成，组织工具，介绍业务赞助者 产品愿景，蓝图：展示产品的大图 评审之前的发布：太累可能影响这次计划的条目 发布名字或主题：检查蓝图主题的当前状态，做出所需的调整 速度：代表当前发布和之前发布的速度 发布安排：评审发布中关键的里程碑和决定 问题和关注点：检查并记录所有的关注点或问题 评审和更新完成标准：评审完成标准，基于上次迭代或发布之后的技术、技巧或团队成员的改变做出合适的改变 需要考虑的故事和条目：展示来自产品需求列表需要考虑的用户故事和特点，用于当前发布的安排 确定分级值：如果速度未知，计划发布计划中药使用的分级值 粗粒度划分故事：交付团队考虑之后确定故事的合适大小，且当故事比较大时，将故事划分成多个迭代。产品负责人和主体专家澄清疑问，详细制作验收标准，并做出合适的故事划分。流程管理者促进合作 将故事映射到迭代：交付团队和产品负责人基于大小和速度将故事或故障移到迭代。流程管理者促进合作 新的关注点或问题：基于之前的计划检查新问题，记录相同的问题 依赖性和假设：价差发布计划中的任何依赖性或假设 承诺：流程管理者好找计划。交付团队和产品负责人视其为最好的计划，并承诺开展下个级别的计划，即迭代计划 沟通和后勤计划：为发布评审或更新沟通和后勤计划 停车场：所有条目应该被解决或作为行动条目 分发行动条目和行动计划：分发负责人的行动条目，处理行动计划 回顾：征求参与者的反馈使会议成功 结束：庆祝成功  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8a44c0d00e26680302b5c2486835a38c","permalink":"https://xueqing.github.io/translation/agile/tutorial/6-release-planning/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/6-release-planning/","section":"translation","summary":"6.1 参与者 6.2 计划的先决条件- 6.3 需要的材料 6.4 计划数据 6.5 输出 6.6 日程 发布计划的目的是创建一个计划，来增量交付产品。每 2~3 个月做一次。 6.1 参与者 流程管理员","tags":["agile"],"title":"6 发布计划","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  7.1 参与者 7.2 计划的先决条件 7.3 计划流程 7.4 速度计算 7.5 任务容量 7.6 计划步骤  迭代计划的目的是为了完成优先级高的产品需求列表项。承诺是基于迭代时间和团队速度的时间盒\n7.1 参与者  流程管理者：敏捷交付团队的引导者 产品负责人：处理产品需求列表及其验收标准的详细的看法 敏捷团队：敏捷交付定义他们的任务，并设置完成承诺所需的努力评估  7.2 计划的先决条件  产品需求列表项有大小，且指定了相关的故事点 产品负责人条目集合排好序 每个条目有清晰描述的验收标准  7.3 计划流程  确定一个迭代包含的故事 划分这些故事成任务，并分配每个任务给对应的负责人 每个任务按小时评估 这些评估帮助团队成员检查每个成员对于这此迭代的任务时 根据团队成员的速度分配任务，以便他们不会负担过重  7.4 速度计算  敏捷团队基于过去的迭代计算速度 速度是迭代中所需的平均数字单位以便完成用户故事  比如，一个团队在过去的三个迭代中分别用12，14，10个故事点，这个团队下次迭代的速度是 12  计划的速度高速团队可以在当前迭代完成多少用户故事。如果团队快速完成分配的任务，那么可以加入更多的用户故事。否则，可在下次迭代移除一些故事  7.5 任务容量  一个团队的容量从下面三个因素考量  每天理想的工作小时 这次迭代中成员可用的天数 一个成员在此团队中不可用的时间百分比  假设一个团队 5 个成员，承诺为一个项目满时工作(每天 8 小时)，且没有人在迭代中离开，那么一个两周迭代的任务容量是 5*8*10=400 小时  7.6 计划步骤  产品负责人描述产品需求列表排序最高的条目 团队描述完成条目需要的任务 团队成员负责任务 团队成员估计完成每个任务的时间 在迭代中重复上述步骤 如果有人任务过多，将任务分给其他团队成员  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"886640033a8007816e7621437853cb6e","permalink":"https://xueqing.github.io/translation/agile/tutorial/7-iteration-planning/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/7-iteration-planning/","section":"translation","summary":"7.1 参与者 7.2 计划的先决条件 7.3 计划流程 7.4 速度计算 7.5 任务容量 7.6 计划步骤 迭代计划的目的是为了完成优先级高的产品需求列表项。承诺是基于迭代时间和团队速","tags":["agile"],"title":"7 迭代计划","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  8.1 产品需求列表的重要性 8.2 产品需求列表的特点\n 一个产品需求列表是将要做的条目的列表。条目具有特性描述，被排好序\n 在理想的场景中，条目应划分成用户故事\n  8.1 产品需求列表的重要性  准备好产品需求列表，以便可以评估每个特性 帮助计划产品蓝图 帮助对特性重排序，以便产品具有更多价值 帮助确定需要优先处理的事情。团队对条目排序并建立值  8.2 产品需求列表的特点  每个产品应该有一个产品需求列表，具有很多大的特性 多个团队可以为一个产品需求列表工作 特性排序基于业务价值、技术值、风险管理或策略调整排序 在发布计划中将优先级高的条目分解成小的故事，以便可以在未来的迭代中完成它们  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"97e1ab3fc2857903e12c25b6abf11201","permalink":"https://xueqing.github.io/translation/agile/tutorial/8-product-backlog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/8-product-backlog/","section":"translation","summary":"8.1 产品需求列表的重要性 8.2 产品需求列表的特点 一个产品需求列表是将要做的条目的列表。条目具有特性描述，被排好序 在理想的场景中，条目应划分成用户故","tags":["agile"],"title":"8 产品需求列表","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 验收标准 Acceptance Criteria：由产品负责人或客户设置的条件，为了验收一个特性时有效的且和他们的需求一致 列表修整 Backlog Grooming：一个持续的过程，是产品管理者或客户通过从敏捷团队获取反馈管理产品需求列表。包含条目项的排序、分解条目项成更小的条目、规划未来的迭代、创建新的故事、更小验收标准和消息描述验收标准 容量 Capacity：一个迭代中团队可以完成的工作 特性 Feature：对于产品的一个改进，或对利益相关者价值的兼容，在一个发布中开发 迭代 Iteration：基于主题的工作项可在一个时间盒完成，并在产品的一个迭代中验收。迭代工作由迭代计划定义，结果是一个 demo 和评审会议。也叫做 Sprint 增量 Increment：一个增量是逐渐开发的产品变化的状态。通常展示为里程碑或固定的迭代数 产品负责人 Product Owner：敏捷交付团队的一名成员，负责收集和排序产品需求列表中的业务需求。一个产品负责人沟通一个发布或迭代中要做的工作。产品负责人设置成活，并负责保护团队在一个迭代中需求不被改变 产品需求列表 Product Backlog：功能性和非功能性的产品需求的集合 产品需求列表项 Product Backlog Items：可以是用户故事、故障、特性，由敏捷团队开发 点 Points：一个通用单位，用以设置用户故事、特性或其他条目的相对大小 发布 Release：在一个时间箱中，完成工作以支持一个软件的可测试的增量交付。在一个 Scrum 中，一个发布由多个迭代组成 需求 Requirement：软件产品的规格说明，用于满足规定的合同或功能。用户故事和条目项是需求类型 故事点 Story Points：敏捷团队用于评估用户故事和特性的相对大小的单位 冲刺 Sprint：同迭代 时间箱 Timebox：一个固定的持续时间，在这期间开发出一个可交付产品。通常，伴随固定的开始和结束时间，资源的数目也是固定的 任务 Task：在迭代中，对于一个用户故事有共享的工作的单位。用户故事被分解成多个任务，且每个任务被分给团队成员作为任务负责人。团队成员可为每个任务负责，更新评估，记录已完成和要做的工作日志 用户故事 User Story：一个列举的验收标准用于实现用户的一些需求。通常从一个终端用户的角度写 速度 Velocity：度量迭代或时间箱的验收工作。通常是迭代中验收的故事点的总和  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"84b042822c16e29e28051ae44abf3b69","permalink":"https://xueqing.github.io/translation/agile/tutorial/9-useful-terms/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/agile/tutorial/9-useful-terms/","section":"translation","summary":"验收标准 Acceptance Criteria：由产品负责人或客户设置的条件，为了验收一个特性时有效的且和他们的需求一致 列表修整 Backlog Grooming：一个持续的过","tags":["agile"],"title":"9 有用的术语","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  auto_ptr unique_ptr shared_ptr weak_ptr reference  auto_ptr  C++11 已经弃用。unique_ptr是新的具有相似功能的智能指针，但是安全性更高。 auto_ptr是管理对象的指针，通过new的操作创建，当auto_ptr销毁的时候会删除该对象。 一个用auto_ptr存储了一个指针指向一个被分配的对象，确保当代码运行到指针的范围之外时，指针指向的对象会自动销毁。 auto_ptr基于独有的所有权模型(exclusive ownership model)，也就是说，两个相同类型的指针不能同时指向同一个资源。复制或者赋值给指针会改变所有权，即源指针会把所有权移交给目的指针。 下面的代码可以看出复制指针的时候所有权的转移\n// C++ program to illustrate the use of auto_ptr #include \u0026lt;iostream\u0026gt; #include \u0026lt;memory\u0026gt; using namespace std; class A { public: void show() { cout \u0026lt;\u0026lt; \u0026quot;A::show()\u0026quot; \u0026lt;\u0026lt; endl; } }; int main() { // p1 is an auto_ptr of type A auto_ptr\u0026lt;A\u0026gt; p1(new A); p1-\u0026gt;show(); // returns the memory address of p1 cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; // copy constructor called, this makes p1 empty. auto_ptr \u0026lt;A\u0026gt; p2(p1); p2-\u0026gt;show(); // p1 is empty now cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; // p1 gets copied in p2 cout\u0026lt;\u0026lt; p2.get() \u0026lt;\u0026lt; endl; return 0; }  输出结果如下\nA::show() 0x1b42c20 A::show() 0 // NULL 0x1b42c20  auto_ptr的拷贝构造函数和赋值运算符实际上不会拷贝存储的指针，而是转移指针，从而使得源指针为空。auto_ptr实现了严格的所有权管理，使得同一时刻只有一个auto_ptr对象可以拥有该指针。\n 丢弃auto_ptr的原因：auto_ptr的赋值运算转移所有权，并且重置右值的auto_ptr为空指针。因此，auto_ptr不能用于 STL 容器。\n  unique_ptr  unique_ptr是 C++11 开发用于替换std::auto_ptr的。 unique_ptr具有更好的安全性(没有“虚假”的拷贝赋值)，增加了特性(删除器)，支持数组。它是一个保存原始指针的容器。unique_ptr显式地避免持有的指针拷贝赋值，它只允许指针有一个持有者。所以对于一个资源，至多只有一个unique_ptr指向，当unique_ptr销毁时，资源会自动释放。 对unique_ptr拷贝赋值会导致编译错误。比如下面的代码：\nunique_ptr\u0026lt;A\u0026gt; ptr1 (new A); unique_ptr\u0026lt;A\u0026gt; ptr2 = ptr1; // Error: can't copy unique_ptr  可以使用std::move()语法转移持有指针的所有权给另外一个unique_ptr。unique_ptr\u0026lt;A\u0026gt; ptr2 = move(ptr1);\n 下面的代码阐述了unique_ptr的使用\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;memory\u0026gt; using namespace std; class A { public: void show() { cout \u0026lt;\u0026lt; \u0026quot;A::show()\u0026quot; \u0026lt;\u0026lt; endl; } }; int main() { unique_ptr\u0026lt;A\u0026gt; p1(new A); p1-\u0026gt;show(); // returns the memory address of p1 cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; // transfers ownership to p2 unique_ptr\u0026lt;A\u0026gt; p2 = move(p1); p2-\u0026gt;show(); cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p2.get() \u0026lt;\u0026lt; endl; // transfers ownership to p3 unique_ptr\u0026lt;A\u0026gt; p3 = move (p2); p3-\u0026gt;show(); cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p2.get() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p3.get() \u0026lt;\u0026lt; endl; return 0; }   输出结果如下：\nA::show() 0x1c4ac20 A::show() 0 // NULL 0x1c4ac20 A::show() 0 // NULL 0 // NULL 0x1c4ac20   下面的代码返回一个资源，如果我们不显式的接收返回值，资源会被清理。反之，我们会得到对该资源的唯一所有权。因此，可以认为unique_ptr比auto_ptr更安全。\nunique_ptr\u0026lt;A\u0026gt; fun() { unique_ptr\u0026lt;A\u0026gt; ptr(new A); // do something return ptr; }   shared_ptr  shared_ptr是一个保存原始指针的容器。它是引用计数所有权模型(reference counting ownership model)。shared_ptr维护了持有指针的引用计数以及所有对shared_ptr的拷贝。因此，当一个新的指针指向资源的时候计数增加，当指针析构的时候计数减少。 引用计数(reference counting)：是一种存储对于一个资源(比如对象，内存块，磁盘空间或者其他资源)的引用、指针或者句柄的数目的技术。 当代码执行到指向资源的所有shared_ptr的范围之外，资源才会销毁释放。 下面的代码阐述了shared_ptr的使用\n#include\u0026lt;iostream\u0026gt; #include\u0026lt;memory\u0026gt; using namespace std; class A { public: void show() { cout \u0026lt;\u0026lt; \u0026quot;A::show()\u0026quot; \u0026lt;\u0026lt; endl; } }; int main() { shared_ptr\u0026lt;A\u0026gt; p1(new A); cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; p1-\u0026gt;show(); shared_ptr\u0026lt;A\u0026gt; p2(p1); p2-\u0026gt;show(); cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p2.get() \u0026lt;\u0026lt; endl; // Returns the number of shared_ptr objects referring to the same managed object. cout \u0026lt;\u0026lt; p1.use_count() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p2.use_count() \u0026lt;\u0026lt; endl; // Relinquishes ownership of p1 on the object and pointer becomes NULL p1.reset(); cout \u0026lt;\u0026lt; p1.get() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p2.use_count() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; p2.get() \u0026lt;\u0026lt; endl; return 0; }   输出结果如下：\n0x1c41c20 A::show() A::show() 0x1c41c20 0x1c41c20 2 2 0 // NULL 1 0x1c41c20    weak_ptr  weak_ptr是shared_ptr的拷贝。它可以访问被一个或多个shared_ptr实例持有的对象，但是不参与引用计数。weak_ptr的存在或销毁对shared_ptr及其拷贝没有影响。weak_ptr对于打破shared_ptr实例之间的循环引用必不可少。 相互依赖(Cyclic Dependency,shared_ptr存在的问题)：考虑一个场景，类 A 和类 B，二者都有指针指向另外一个类。因此，如果有两个shared_ptr的指针ptr_A和ptr_B分别指向 A 和 B的某个对象，总是ptr_A持有 B 的对象而且ptr_B持有 A 的对象。A 和 B 的对象引用计数一直不会变成 0，A 和 B 的对象都不会被删除。 现在把ptr_A换成weak_ptr，ptr_A可以访问 B 的对象但是不会持有该对象。B 对象的引用计数就是 0，可以先释放，之后 A 对象的引用计数变成 0 就可以释放内存。 使用ptr_A之前需要检查 B 对象的有效性，因为 B 对象可能销毁。 什么时候需要用weak_ptr？当希望从不同的地方访问对象，且不关心这些引用的删除。但是尝试间接引用该对象的时候需要注意检查对象的有效性。  reference  auto_ptr, unique_ptr, shared_ptr and weak_ptr std::auto_ptr to std::unique_ptr  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"635c148e386cf6f5aa0c3e5a2740e290","permalink":"https://xueqing.github.io/blog/cplusplus/smart_ptr/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/smart_ptr/","section":"blog","summary":"auto_ptr unique_ptr shared_ptr weak_ptr reference auto_ptr C++11 已经弃用。unique_ptr是新的具有相似功能的智能指针，但是安全性更高。 auto_ptr是管理对象的指针，通过new的操作","tags":["c++"],"title":"auto_ptr, unique_ptr, shared_ptr and weak_ptr","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" 关于 new int() 和 new int[] #define LEN 100 int *arr1 = new int(LEN); int *arr2 = new int[LEN];   第一行的代码arr1指向内存中int = 100的一个数的地址 第二行的代码arr2指向长度为 100 的数组的内存块 圆括号是对象赋值的意思；方括号是声明数组大小的意思  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"a7f3b5728240167dc9f8ec1afbddd406","permalink":"https://xueqing.github.io/blog/cplusplus/cplusplus_new/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/cplusplus_new/","section":"blog","summary":"关于 new int() 和 new int[] #define LEN 100 int *arr1 = new int(LEN); int *arr2 = new int[LEN]; 第一行的代码arr1指向内存中int = 100的一个数的地址 第二行的代码arr2指向长度为 100 的数组的内","tags":["c++"],"title":"C++ new","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"#include \u0026lt;string\u0026gt; #include \u0026lt;algorithm\u0026gt; void CString::StringToUpper(std::string \u0026amp;str) { std::transform(str.begin(), str.end(), str.begin(), ::toupper); } void CString::StringToLower(std::string \u0026amp;str) { std::transform(str.begin(), str.end(), str.begin(), ::tolower); }   提示出错error: no matching function for call to ‘transform(__gnu_cxx::__normal_iterator\u0026lt;char*, std::basic_string\u0026lt;char, std::char_traits\u0026lt;char\u0026gt;, std::allocator\u0026lt;char\u0026gt; \u0026gt; \u0026gt;, __gnu_cxx::__normal_iterator\u0026lt;char*, std::basic_string\u0026lt;char, std::char_traits\u0026lt;char\u0026gt;, std::allocator\u0026lt;char\u0026gt; \u0026gt; \u0026gt;, __gnu_cxx::__normal_iterator\u0026lt;char*, std::basic_string\u0026lt;char, std::char_traits\u0026lt;char\u0026gt;, std::allocator\u0026lt;char\u0026gt; \u0026gt; \u0026gt;, \u0026lt;unknown type\u0026gt;)’的解决方法：既有 C 版本的toupper/tolower函数，又有 STL 模板函数toupper/tolower，二者存在冲突，在toupper/tolower前加上::表示强制指定 C 版本的 ::toloweer/::toupper 只用于单字节字符的替换，不适用于多字节编码（如 UTF-8）？ 可使用 boost 库\n#include \u0026lt;boost/algorithm/string.hpp\u0026gt; using namespace boost; // use to_lower/to_upper function   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"f65b5c4af1e617ab6c25b7485bc36b6d","permalink":"https://xueqing.github.io/blog/cplusplus/cplusplus_string_case_convert/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/cplusplus_string_case_convert/","section":"blog","summary":"#include \u0026lt;string\u0026gt; #include \u0026lt;algorithm\u0026gt; void CString::StringToUpper(std::string \u0026amp;str) { std::transform(str.begin(), str.end(), str.begin(), ::toupper); } void CString::StringToLower(std::string \u0026amp;str) { std::transform(str.begin(), str.end(), str.begin(), ::tolower); } 提示出错error: no matching function for call to ‘transform(__gnu_cxx::__normal_i","tags":["c++"],"title":"C++ string 转换大小写","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" UB(Undefined behavior):程序的行为没有限制。常见的未定义行为例子包括：数组访问内存越界，有符号数溢出，间接访问空指针，在一个表达式中无顺序多次修改标量，用不同类型的指针访问对象 UB and optimization\n 正确的 C++ 程序是没有未定义行为的，所以当编译器优化了含有 UB 的代码，程序会出现不可预料的结果 有符号数溢出，下面是 C++ 代码和对应可能生成的机器语言 没有溢出时返回 1，溢出时是 UB，编译器可能优化，每次都返回 1\nint foo(int x) { return x+1 \u0026gt; x; // either true or UB due to signed overflow }  foo(int): movl $1, %eax ret  访问越界，下面是 C++ 代码和对应可能生成的机器语言\n 访问下标在 0-3 时，如果存在元素 v 返回true，否则会访问越界，编译器可能优化，每次都返回 true，也不会访问越界\nint table[4] = {}; bool exists_in_table(int v) { // return true in one of the first 4 iterations or UB due to out-of-bounds access for (int i = 0; i \u0026lt;= 4; i++) { if (table[i] == v) return true; } return false; }  exists_in_table(int): movl $1, %eax ret  未初始化的标量，下面是 C++ 代码和对应可能生成的机器语言\n 当 x 非 0 时，a 会被赋值 42，否则 a 未初始化，编译器可能优化，每次都将 a 赋值42，然后返回\nstd::size_t f(int x) { std::size_t a; if(x) // either x nonzero or UB a = 42; return a; }  f(int): mov eax, 42 ret  间接访问空指针，下面是 C++ 代码和对应可能生成的机器语言\n 函数foo：当 p 是空指针时，x 的赋值是间接访问空指针。否则返回 0。编译器可能优化，每次返回 0 而不会访问到空指针\n xorl %eax,%eax按位异或，相当于清 0，将寄存器%eax设置为 0。也可以使用movl $0,%eax，但是前者需要 2 个字节，后者需要 5 个字节  函数bar：直接访问空指针指向的值是 UB，编译器可能优化，每次直接执行下一行代码\n retq等同于addq $8,%rsp; jmpq -8(%rsp)，retq将%esp指向的返回地址弹出，存入寄存器%eip 寄存器%eip是程序计数器，存储了 CPU 要读取指令的地址，即 CPU 将要执行的指令的地址。每次 CPU执行完相应的汇编指令后，%eip的值就会增加 寄存器%esp是栈指针指向栈顶元素。栈向低地址方向增长，可以通过增加栈指针来释放空间 函数调用时会先将返回地址入栈，即程序中紧跟在调用函数后面的那条指令的地址，所以栈顶指针%esp指向的就是调用函数后面的那条指令的地址，retq会将该地址存入%eip，CPU 就会继续往后执行 在 64-bit 时，ret会从栈中弹出四字节的地址保存到寄存器%eip 在 32-bit 时，ret会从栈中弹出两字节的地址保存到寄存器%eip\nint foo(int* p) { int x = *p; if(!p) return x; // Either UB above or this branch is never taken else return 0; } int bar() { int* p = nullptr; return *p; // Unconditional UB }  foo(int*): xorl %eax, %eax ret bar(): retq     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"866b2bab3f174401b8bb836b4e48b466","permalink":"https://xueqing.github.io/blog/cplusplus/undefined_behavior/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/undefined_behavior/","section":"blog","summary":"UB(Undefined behavior):程序的行为没有限制。常见的未定义行为例子包括：数组访问内存越界，有符号数溢出，间接访问空指针，在一个表达式中无顺序多次","tags":["c++"],"title":"C++ 未定义的行为","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  Chrome 导入和导出密码  启用功能 导出密码 导入密码 重置功能 密码管理软件   启用功能  进入地址栏，输入chrome://flags/#PasswordImport，启用功能并重启浏览器生效  导出密码  打开 Chrome，进入 [settings] — [passwords]，可看到已保存的密码列表 右键点击 [Saved Passwords] 右面的图标，下拉菜单选择 [Export passwords\u0026hellip;]，选择保存的文件夹，确定 为保障安全，在进行密码导出时先输入当前 Windows 用户的密码以完成身价验证，验证成功后 Chrome 才会将密码导出成以逗号分隔的 Excel 文件(CSV)  导入密码  打开 Chrome，进入 [settings] — [passwords]，可看到已保存的密码列表 右键点击 [Saved Passwords] 右面的图标，下拉菜单选择 [Import]，选择导入的文件，确定  重置功能  进入地址栏，输入chrome://flags/#PasswordImport，重置功能并重启浏览器生效  密码管理软件 Lastpass、1Password（推荐）、Keepass\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"edf22ac4242f434d856bb2d39df29c24","permalink":"https://xueqing.github.io/blog/chrome/ex_import_pwd/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/chrome/ex_import_pwd/","section":"blog","summary":"Chrome 导入和导出密码 启用功能 导出密码 导入密码 重置功能 密码管理软件 启用功能 进入地址栏，输入chrome://flags/#PasswordImpo","tags":["chrome"],"title":"Chrome 导入和导出密码","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"   插件 功能     Infinity 新标签页，还有邮件提醒、天气预报、笔记、TODO、壁纸、历史记录等   QRImagefromURL 把 Chrome 当前的网址，生成标准二维码格式图片，扫描二维码会得到网址，就可以使用扫描软件自带的浏览器进行阅读   DotVPN 免费的 VPN 代理插件，相比 ProxySwitchySharp 代理插件，DotVPN 具有很强大的数据保护功能，可以保障用户在使用 VPN 代理时的数据传输安全   小云插件 优酷、土豆、爱奇艺、乐视网、搜狐视频、酷六、腾讯视频、等视频去广告插件   谷歌卫星地图 每天打开标签页都是随机的卫星地图，点击右下角的地球标志可切换位置   VideoHunter+ 可帮助用户找到正在播放视频的真实网络地址，用户可根据这个地址直接下载视频到本地计算机   如意淘插件 查看某商品在各大商城的价格对比，以及该商品的在该商场的价格走势   购物党自动比价工具 查看某商品在各大商城的价格对比，以及该商品的在该商场的价格走势    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8b85a5a8c0bcd783998bd97ac438ffa5","permalink":"https://xueqing.github.io/blog/chrome/extensions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/chrome/extensions/","section":"blog","summary":"插件 功能 Infinity 新标签页，还有邮件提醒、天气预报、笔记、TODO、壁纸、历史记录等 QRImagefromURL 把 Chrome 当前的网址，生成标准二维码格式图片，扫描二维码会得到网址，","tags":["chrome"],"title":"Chrome 插件","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  关于 CR  目的 前提 需要做什么 步骤 标准  执行  事前准备阶段 实施阶段 事后跟踪  注意事项  经常进行 CR CR 不要太正式，而且要短 尽可能的让不同的人 Reivew 你的代码 保持积极的正面的态度 学会享受 CR  操作  自我审查 开发互审 上级审查 冲突解决  附录 审核记录 附录 审核结果  关于 CR 代码审查(Code Review, CR)是项目进展到编码阶段非常重要的品质保证活动\n目的  CR 是一种用来确认方案设计和代码实现的质量保证机制，通过这个机制我们可以对代码、测试过程和注释进行检查 CR 主要用来在软件工程过程中改进代码质量，通过 CR 可以达到如下目的  在项目早期发现代码中的 BUG 帮助初级开发人员学习高级开发人员的经验，达到知识共享 避免开发人员犯一些很常见，很普通的错误 保证项目组人员的良好沟通 项目或产品的代码更容易维护   前提  进入 CR 需要检查的条件如下  CR 人员是否理解了 CR 的概念和 CR 将做什么 如果做 CR 的人员不能理解 CR 对项目成败和代码质量的重要程度，他们的做法可能就会是应付了事 代码是否已经正确的 build，build 使得代码已经不存在基本语法错误 我们总不希望高级开发人员或是主管将时间浪费在检查连编译都通不过的代码上吧 代码执行时功能是否正确 CR 人员不负责检查代码的功能是否正确，需要复查的代码必须由开发人员或质量人员负责该代码的功能的正确性 Review 人员是否理解代码 做复查的人员需要对该代码有一个基本的了解，其功能是什么，是哪一方面的代码，涉及到数据库或是通讯，这样才能采取针对性的检查 开发人员是否对代码做了单元测试 这一点也是为了保证 CR 前一些语法和功能问题已经得到解决，CR 人员可以将精力集中在代码的质量上   需要做什么 CR 主要检查代码中是否存在以下方面问题： 代码的一致性、编码风格、代码的安全问题、代码冗余、是否正确设计以满足需求(性能、功能）等等 以下内容参考了《Software Quality Assurance: Documentation and Reviews》一文中的代码检查部分\n 完整性检查(Completeness)  代码是否完全实现了设计文档中提出的功能需求 代码是否已按照设计文档进行了集成和 Debug 代码是否已创建了需要的数据库，包括正确的初始化数据 代码中是否存在任何没有定义或没有引用到的变量、常数或数据类型  一致性检查(Consistency)  代码的逻辑是否符合设计文档 代码中使用的格式、符号、结构等风格是否保持一致  正确性检查(Correctness)  代码是否符合制定的标准 所有的变量都被正确定义和使用 所有的注释都是准确的 所有的程序调用都使用了正确的参数个数  可修改性检查(Modifiability)  代码涉及到的常量是否易于修改(如使用配置、定义为类常量、使用专门的常量类等) 代码中是否包含了交叉说明或数据字典，以描述程序是如何对变量和常量进行访问的 代码是否只有一个出口和一个入口(严重的异常处理除外)  可预测性检查(Predictability)  代码所用的开发语言是否具有定义良好的语法和语义 是否代码避免了依赖于开发语言缺省提供的功能 代码是否无意中陷入了死循环 代码是否是否避免了无穷递归  健壮性检查(Robustness)  代码是否采取措施避免运行时错误(如数组边界溢出、被零除、值越界、堆栈溢出等)  结构性检查(Structuredness)  程序的每个功能是否都作为一个可辩识的代码块存在 循环是否只有一个入口  可追溯性检查(Traceability)  代码是否对每个程序进行了唯一标识 是否有一个交叉引用的框架可以用来在代码和开发文档之间相互对应 代码是否包括一个修订历史记录，记录中对代码的修改和原因都有记录 是否所有的安全功能都有标识  可理解性检查(Understandability)  注释是否足够清晰的描述每个子程序 是否使用到不明确或不必要的复杂代码，它们是否被清楚的注释 使用一些统一的格式化技巧(如缩进、空白等）用来增强代码的清晰度 是否在定义命名规则时采用了便于记忆，反映类型等方法 每个变量都定义了合法的取值范围 代码中的算法是否符合开发文档中描述的数学模型  可验证性检查(Verifiability)  代码中的实现技术是否便于测试   步骤  代码编写者和代码审核者坐在一起，由代码编写者按照设计文档中的用例依次讲解自己负责的代码和相关逻辑  可采用从前端到后台的方式，例如从 Web 层到 DAO 层  代码审核者在此过程中可以随时提出自己的疑问，同时积极发现隐藏的 bug  对这些 bug 记录在案 代码编写者修改后再次提交审核 代码审核者对 bug 记录进行回验  代码讲解完毕后，代码审核者给自己安排几个小时再对代码审核一遍  代码需要一行一行静下心看。同时代码又要全面的看，以确保代码整体上设计优良  代码审核者根据审核的结果编写“审核报告”  “审核报告”中记录发现的问题及修改建议 将“审核记录”和“审核结果”提交至 git  代码编写者从 git 拉取，根据“审核报告”给出的修改意见，修改好代码，有不清楚的地方可积极向代码审核者提出 代码编写者 bug fix 完毕之后提交代码审核者再次进行审核  通过审核则更新审核结果并提交至 git 审核通过的代码不能再进行修改，需要修改必须重新进行审核流程  代码审核者把 CR 中发现的有价值的问题更新到\u0026rdquo;代码审核规范\u0026rdquo;的文档中，对于特别值得提醒的问题可群发 email 给所有技术人员  提示：CR 必备的文档\n “代码审核规范”文档：记录代码应该遵循的标准 代码审核者根据这些标准来 CR 代码，同时在 CR 过程中不断完善该文档  标准 代码审核的基础是 设计文档规范、代码规范、日志规范、测试代码规范。针对新增的业务场景和设计尚未有规范时应先确立规范后进行代码审核流程\n执行 一个标准的 CR 活动应该分为三个阶段\n事前准备阶段 在一次 CR 前，对以下内容进行充分准备\n CR 的对象  在准备 CR 代码对象时，我们要注意代码的数量，如果代码量比较大，要对代码进行必要的分解，确定其中的关键代码，对关键代码进行 CR，可以达到举一反三的目的  CR 的内容  我们对代码的审查内容很多，如代码的编写是否规范（注释的书写格式、命名规范等）、技术处理规范（异常处理、日志处理、代码组织结构等）、业务实现等 我们不能希望通过一次 CR 活动，完成所有这些内容的审查，因此我们必须设定本次 CR 活动内容界限，确定审查重点  评审规范和标准  在 CR 前设计确定评审规范和标准是必要，通过规范和标准我们在审查过程中可以有据可依，有理可循，而且还可以做到标准统一  选择 CR 活动的参与者  在 CR 开始前，必须把本次 CR 活动的对象、审查内容以及审查的规范和标准通报给所有的参与者  选择 CR 活动的实施方式  CR 活动有很多形式可供我们选择，我们可以根据实际情况选择桌面式 CR、演示讲解式 CR、一对一的座位 CR 等等   实施阶段 充分的事前准备，只是做好 CR 活动的前提，在 CR 实施过程中，我们要做好以下工作\n 准确记录  对于 CR 过程发现的问题，我们必须清晰准确的记录，可以使用问题点记录单，明确记录的项目和内容  讲解与提问  CR 过程中，要采用代码作者讲解和审查者提问方式。审查者不能只在发现问题时提问，同时也要根据本次审查的内容要求代码作者对某个特定问题的讲解  逐项审查  对事前确定的审查内容，要逐项审查，不能因为时间不足等因素一扫而过  注意气氛  实施审查时，要营造一个讨论问题、解决问题的氛围，不能把审查会搞成批判会，这样会影响相关人员的积极性   事后跟踪  确认发现的问题  CR 结束后，对发现的问题，首先需要确定以下内容 问题点的难易程度以及影响的范围 解决问题的责任者和问题点修正结果的确认者 解决问题点的时限  修正问题责任者  对于修正问题责任者，在问题点的修正过程中，要三方面内容的记录 问题点的原因 解决问题点的对策 修正的内容  修正结果确认者  做为修正结果的确认者，必须按照事前约定的时限及时的对修正结果进行全面的确认   注意事项 经常进行 CR  要 Review 的代码越多，那么要重构，重写的代码就会越多。而越不被程序作者接受的建议也会越多，唾沫口水战也会越多  建议每一个功能，每一个用例完成之后就进行审核  程序员代码写得时候越长，程序员就会在代码中加入越来越多的个人的东西 越接近软件发布的最终期限，代码也就不能改得太多  先 review 设计实现思路 review 设计模式 review 成形的骨干代码 review完成的代码 如果程序复杂的话，需要拆成几个单元或模块分别 review 每次 review 的代码再 1000 行以内，时间不超过 1.5 小时   CR 不要太正式，而且要短 忘了那个代码评审的 Checklist 吧，走到你的同事座位跟前，像请师父一样请他坐到你的电脑面前，然后，花 5 分钟给他讲讲你的代码，给他另外一个 5 分钟让他给你的代码提提意见，这比什么都好。而如果你用了一个 Checklist，让这个事情表现得很正式的话，下面两件事中必有一件事会发生：\n 只有在 Checklist 上存在的东西才会被 Review CR 变成了一种礼节性的东西，你的同事会装做很关心你的代码，但其实他心里想着尽快地离开你  只有不正式的 CR 才会让你和评审者放轻松，人只有放松了，才会表现得很真实，很真诚。记住R eview 只不过是一种形式，而只有在相互信任中通过相互的讨论得到了有意义和有建设性的建议和意见，那才是最实在的。不然，作者和评审者的关系就会变成小偷和警察的关系。\n尽可能的让不同的人 Reivew 你的代码 如果可能的话，不要总是只找一个人来 Review 你的代码，不同的人有不同的思考方式，有不同的见解，所以，不同的人可以全面的从各个方面评论你的代码。 但不要太多了，人多嘴杂反而适得其反，基本上来说，不要超过3个人，这是因为，这是一个可以围在一起讨论的最大人员尺寸。\n下面是几个优点\n 从不同的方向（实现、需求、用户使用、算法、性能效率、易读性、扩展性）评审代码总是好的 会有更多的人帮你在日后维护你的代码 这也是一个增加团队凝聚力的方法 不要超过 3 个人，减少讨论的代价  保持积极的正面的态度 程序员最大的问题就是“自负”，尤其当我们 Reivew 别人的代码的时候，我已经见过无数的场面，程序员在 CR 的时候，开始抨击别人的代码，质疑别人的能力。太可笑了，我分析了一下，这类的程序员其实并没有什么本事，因为他们指责对方的目的是想告诉大家自己有多么的牛，靠这种手段来表现自己的程序员，其实是就是传说中所说的“半瓶水”。\n所以，无论是代码作者，还是评审者，都需要一种积极向上的正面的态度，作者需要能够虚心接受别人的建议，因为别人的建议是为了让你做得更好；评审者也需要以一种积极的正面的态度向作者提意见，因为那是和你在一个战壕里的战友。记住，你不是一段代码，你是一个人！\n学会享受 CR 这可能是最重要的一个提示了，如果你到了一个人人都喜欢 CR 的团队，那么你会进入到一个生机勃勃的地方，在那里，每个人都能写出质量非常好的代码，在那里，你不需要经理的管理，团队会自适应一切变化，他们相互学习，相互帮助，不仅仅是写出好的代码，而且团队和其中的每个人都会自动进化，最关键的是，这个是一个团队\n操作 自我审查  提交代码前自我审查，添加对代码的说明  所有团队成员先进行自我审查，除了检查代码的正确性以外，还可以完成 对代码添加注释，说明本次修改背后的原因，方便其他人进行审查 修正编码风格，尤其是一些关键数据和方法的命名，提高代码的可读性 从全局审视设计，是否完整的考虑了所有情景 提交自己的单元测试报告   开发互审 任意两名开发人员（建议不要固定配对，避免思维定式）进行交叉代码审查\n 代码编写者：  准备所开发的代码相关的全部资料列表：需求、设计文档、代码工程、类、方法、配置文件、数据库修改等全部资料的版本号等详细信息 向代码审查者全面介绍代码的目标和设计实现  代码审查者  根据需求文档、设计文档、开发规范进行代码审查（业务、日志、测试） 将审查结果提交至 git 代码编写者对问题进行修改并由代码审查者复审，复审结果提交至 git 保留 代码审查者对审查的代码负责   上级审查 开发互审完成后，由上级进行上级审查，流程与开发互审相同，对于三次复审仍未通过的代码需要代码编写者进行组内检讨问题原因，并书面列出改进计划\n冲突解决 当开发互审对于检查内容出现争议时由上级进行协调解决或逐级向上协调解决\n附录 审核记录  审核记录如同修改记录一样，直接记录入代码头部，代码审核者修改审核记录后提交代码至 git 参考即可 之后的审核可以基于两次审核间的变更利用对比工具进行增量审核 示例如下\n/** * 名称：xxxxx类 * 创建者：xx * 创建时间：2018-12-07 * 创建描述：实现xxxxxx * 修改者：xxx * 修改时间：2018-12-08 * 修改描述：添加xxx，修改xxx * 审核者：xxx * 审核时间：2018-12-08 * 审核描述：审核通过 * 审核者：xxx * 审核时间：2018-12-09 * 审核描述：审核不通过，xxxxxxxxxxxxx */   附录 审核结果  审核结果建议以表格的形式描述，每个问题分别列出 可通过标注行号来具体执行位置，给出合理的修改意见并说明标准 审核结果写入 commit message 中，以软表格的形式描述\ndocs(代码审核)：审核通过 docs(代码审核)：审核失败 1 日志不符合规范 问题：没有使用 log4j2，日志不规范 建议：建议使用 log4j2，包括包引用和代码修改 行号：53 行 2 命名不符合规范 问题：log 命名不符合规范 建议：修改为 logger 行号： 53 行   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"88c3b8b4a34c3287c6eec6356369494e","permalink":"https://xueqing.github.io/blog/coolshell/code_review/codereview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/coolshell/code_review/codereview/","section":"blog","summary":"关于 CR 目的 前提 需要做什么 步骤 标准 执行 事前准备阶段 实施阶段 事后跟踪 注意事项 经常进行 CR CR 不要太正式，而且要短 尽可能的让不同的人 Reivew 你的代码 保持积极","tags":["coolshell"],"title":"Code Review 代码审查","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" code_review 中的几个提示 从 code_review 谈如何做技术 简单实用的 code_review 工具 Review board  追踪待决代码的改动，并可以让 Code-Review 更为容易和简练  Codestriker Groogle  各式各样语言的语法高亮 支持整个版本树的比较 支持当个文件不同版本的 diff 功能，并有一个图形的版本树 邮件通知所有的 Reivew 的人当前的状态 认证机制  Rietveld JCR  主要面对的是大型的项目，或是非常正式的代码评审 主要想协助： 审查者：所有的代码更改会被高亮，以及大多数语言的语法高亮。Code extracts 可以显示代码评审意见。如果你正在 Review Java 的代码，你可以点击代码中的类名来查看相关的类的声明 项目所有者。可以轻松创建并配置需要 Review 的项目，并不需要集成任何的软件配置管理系统（SCM） 流程信仰者。所有的评语都会被记录在数据库中，并且会有状态报告，以及各种各样的统计 架构师和开发者。这个系统也可以让我们查看属于单个文件的评语，这样有利于我们重构代码  Jupiter  是一个 Eclipse IDE 的插件  风格检查工具：PC-Lint  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"176435cbe9d1948dcdaccdd43ea668b8","permalink":"https://xueqing.github.io/blog/coolshell/code_review/code_review/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/coolshell/code_review/code_review/","section":"blog","summary":"code_review 中的几个提示 从 code_review 谈如何做技术 简单实用的 code_review 工具 Review board 追踪待决代码的改动，并可以让 Code-Review 更为容易和简练 Codestriker Groogle 各式各样语言的语法高亮 支持整个版本树的比较","tags":["coolshell"],"title":"code_review 预研","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  1.让自己习惯 C++  01.视 C++ 为一个语言联邦 02.常量，枚举和内联优于宏定义 03.尽可能使用常量 04.确定对象被使用前已先被初始化  2.构造/析构/赋值运算  05.了解 C++ 默默编写并调用哪些函数 06.明确拒绝不想用的编译器自动生成的函数 07.声明多态基类析构函数为虚函数 08.别让异常逃离析构函数 09.绝不在构造和析构过程中调用虚函数 10.使 operator= 返回一个 *this 的引用 11.在 operator= 中处理“自我赋值” 12.复制对象的所有部分  3.资源管理  13.以对象管理资源 14.在资源管理类中小心复制行为 15.在资源管理类中提供对原始资源的访问 16.在对应的 new 和 delete 采用相同形式 17. 以独立语句将 newed 对象保存到智能指针  4.设计与声明  18.让接口易被正常使用，不易被误用 19.把类设计看作类型设计 20.常量引用传递优于值传递 21.必须返回对象时，不要返回引用 22.声明数据成员为私有的 23.成员函数优于非成员、非友元函数 24.当类型转换需应用到所有参数，声明为非成员函数 25.考虑支持不抛异常的 swap 函数  5.实现  26.尽可能推迟变量定义 27.最小化 cast 操作 28.避免返回指向对象内部的句柄 29.努力写异常安全的代码 30.了解内联的细节 31.最小化文件编译依赖  6.继承与面向对象设计  32.确保公有继承是\u0026rdquo;is-a\u0026rdquo;关系 33.避免隐藏继承的名字 34.区分接口继承和实现继承 35.考虑虚函数的替代 36.绝不重定义继承的非虚函数 37.绝不重定义函数继承的默认参数值 38.通过组合对\u0026rdquo;has-a\u0026rdquo;或\u0026rdquo;is-implemented-in-terms-of\u0026rdquo;建模 39.慎重使用私有继承 40.慎重使用多重继承  7.模板与泛型编程  41.理解隐式接口和编译期多态 42.理解 typename 的双重定义 43.了解如何访问模板化基类内的名称 44.把参数无关的代码分离出模板 45.使用成员函数模板来接受“所有兼容类型” 46.需要类型转化时在模板内定义非成员函数 47.使用 traits class 表现类型信息 48. 认识模板元编程  8.定制 new 和 delete  49.理解 new-handler 的行为 50.理解何时替换 new 和 delete 有意义 51.写 new 和 delete 时遵循惯例 52.写了 placement new 也要写 placement delete  9.杂项讨论  53.注意编译器警告 54.熟悉包括 TR1 在内的标准库 55.熟悉 Boost   1.让自己习惯 C++    Accustoming yourself to C++\n   01.视 C++ 为一个语言联邦    View C++ as a federation of languages\n    C 面向对象的 C++：类、封装、继承、多态 模板 C++：泛型编程 STL：模板库  02.常量，枚举和内联优于宏定义    Prefer consts, enums, inlines to #defines\n    对于单纯常量，以 const 对象或枚举 对于形似函数的宏，用内联函数替换  常量、枚举和内联更具封装性，可以限定作用域 枚举比常量约束更多，不能为该常量创建指针或引用   03.尽可能使用常量    Use const whenever possible\n    指定语义约束，即“不该被改动”的对象  可帮助编译器侦测错误用法  const 在 * 左边，表示被指物是常量  也可将 const 放在类型之前 例如const widget *pw等同于widget const *pw 指针所指东西不可被改动  const 在 * 右边，表示指针自身是常量  指针不得指向不同的东西，但所指东西的值可以改动  const 在 * 两侧，表示被指物和指针自身都是常量 const 成员函数  可作用于 const 对象，不可更改对象内任何非静态成员变量 成员变量前加mutable，也可在 const 成员函数内部修改该成员变量 当 const 和 non-const 成员函数有着实质等价的实现时，另 non-const 版本调用 const 版本避免代码重复   04.确定对象被使用前已先被初始化    Make sure that objects are initialized before they\u0026rsquo;re used\n    对于内置类型手动初始化 对于类，在构造函数中初始化成员变量  赋值不等于初始化 使用成员初始化列表列替换赋值动作，前者效率更高，后者先设初值再赋值 可使用无参数构造函数来初始化 对于多个构造函数，可添加私有成员函数，接收初始化参数，在函数内部使用赋值操作给成员变量“初始化” 初始化顺序 先基类再衍生类 类内部，按照声明的顺序初始化，与成员初始化列表列操作顺序无关 最好按照声明顺序初始化 不同编译单元内的 non-local static 对象的初始化顺序未定义  static 对象包括全局对象、定义于命名空间作用域内的对象、类内、函数内，以及在文件作用域内被声明为 static 的对象 函数内的 static 对象称为 local-static 对象，其他的则是 non-local static 对象 程序结束时 static 对象会被自动销毁，即在 main 函数结束时调用他们的析构函数 编译单元是产出单一目标文件的源码 将每个 non-local static 对象移到自己的专属函数内，改函数返回对该对象的引用，保证该函数被调用期间，首次遇到该对象的定义时被初始化，即以函数调用替换直接访问 non-local static 对象    2.构造/析构/赋值运算    Contructors, destructors, and assignments operators\n   05.了解 C++ 默默编写并调用哪些函数    Know what functions C++ silently writes and calls\n    编译器自动为类创建默认构造函数、拷贝构造函数、拷贝赋值操作和析构函数  06.明确拒绝不想用的编译器自动生成的函数    Explicitly disallow the use of complier-generated functions you do not want\n    如果不想用编译器自动生成的函数，可将相应的成员函数声明为 private 并且不予实现 可以继承 Uncopyable 这样的基类，但是可能会多重继承\nclass Uncopyable { protected: // allow constructor and destructor for derived object Uncopyable() {} ~Uncopyable() {} private: Uncopyable(const Uncopyable\u0026amp;); //avoid copying Uncopyable\u0026amp; operator=(const Uncopyable\u0026amp;); };   07.声明多态基类析构函数为虚函数    Declare destructors virtual in polymorphic base classes\n    包含虚函数的类需要额外的信息来实现虚函数：vptr(virtual table pointer)指向一个由函数指针构成的数组，称为 vtbl(virtual table)，每个有虚函数的类都有一个相应的 vtbl 析构顺序：先父类再子类，构造函数的调用顺序相反 带有多态性质的基类应声明一个虚析构函数 如果一个类带有任何虚函数，就声明一个虚析构函数 类的设计目的不是作为基类使用，或者不是为了多态性，不应该声明虚析构函数  08.别让异常逃离析构函数    Prevent exceptions from leaving destructors\n    如果析构函数内可能抛出异常，应该在析构函数内捕获异常，然后不传播或结束程序 如果需要客户自定义异常的反应，类应该提供接口执行该操作  09.绝不在构造和析构过程中调用虚函数    Never call virtual functions during construction or destruction\n    在构造和析构中不要调用虚函数没因为这类调用不会下降到衍生类，即调用的仍然是基类的实现  10.使 operator= 返回一个 *this 的引用    Having assignment operators return a reference to *this\n    赋值相关运算(包括 operator=/+=、-=、*=)操作符返回一个 *this 的引用  11.在 operator= 中处理“自我赋值”    Handle assignment to self in operator=\n    确保对象自我赋值时，operator= 行为良好，包括比较源对象和目标对象的地址、精心周到的语句顺序(先复制源对象，再执行删除)，以及icopy-and-swap 确定任何函数如果操作一个以上的对象，而其中多个对象时同一个对象时，行为仍然正确  12.复制对象的所有部分    Copy all parts of an object\n    拷贝构造函数和拷贝赋值操作符都是 copying 函数 copying 函数应该确保复制“对象内的所有成员变量”和“所有基类成分” 不要尝试以某个 copying 函数实现另一个 copying 函数，应该将相同的东西抽象成一个函数，二者都调用这个函数  3.资源管理    Resource management\n   13.以对象管理资源    Use objects to manage resources\n    为防止内存泄漏，建议使用 RAII(Resource Acquisition Is Initialization，资源取得时机就是初始化时机) 对象，它们在构造函数中获得资源并在析构函数中释放资源 常用的 RAII 类是 shared_ptr 和 auto_ptr。前者的拷贝行为比较直观，后者的复制动作会转移资源的所有权：shared_ptr 有引用计数，但是无法打破环装引用 参考智能指针一文  14.在资源管理类中小心复制行为    Think carefully about copying behavior in resource-managing classes\n    复制 RAII 对象必须一并复制它锁管理的资源，所以资源的 copying 行为决定 RAII 对象的 copying 行为 一般情况下，RAII 类的 copying 行为是：阻止 copying、实行引用计数法  15.在资源管理类中提供对原始资源的访问    Provide access to raw resources in resource-managing classes\n    APIs 往往要求访问原始资源，所以每一个 RAII 类应该提供一个接口可以获得其管理的资源 对原始资源的访问可以是显示转换或隐式转换：一般显示转换比较安全，隐式转换对客户比较方便  16.在对应的 new 和 delete 采用相同形式    Use the same form in corresponding uses of new and delete\n    调用 new 时使用[]，那么对应调用 delete 时也调用[] 调用 new 时没有使用[]，那么也不该在调用 delete 时使用[]  17. 以独立语句将 newed 对象保存到智能指针    Store newed onjects in smart pointers in standalone statements\n    以独立语句将 newed 对象保存在智能指针内。否则，抛出异常的时候，可能会导致内存泄漏  4.设计与声明    Designs and declarations\n   18.让接口易被正常使用，不易被误用    Make interfaces easy to use correctly and hard to use incorrectly\n    “促进正确使用”的办法包括接口的一致性，以及与内置类型的行为兼容 “阻止误用”的办法包括建立新类型、限制类型上的操作、束缚对象值，以及消除客户的资源管理责任 shared_ptr 支持自定义删除器，可以防止 DLL 问题，可被用来自动解除互斥锁  19.把类设计看作类型设计    Treat class design as type design\n   在设计一个类之前，考虑以下问题\n 新类型的对象如何被创建和销毁 对象的初始化和对象的赋值该有什么样的差别：区分构造函数和赋值操作符的行为 新类型的对象如果以值传递，意味着什么：取决于拷贝构造函数 什么是新类型的“合法值”：确定需要做的错误检查工作 新类型需要配合某个继承图系吗：受继承类的约束，如果允许被继承，析构函数是否为虚函数 新类型需要什么样的转换：显示类型转换和隐式类型转换 什么样的操作符和函数对此新类型是合理的：确定需要声明的函数，哪些是成员函数，哪些不是成员函数 谁该调用新类型的成员：确定成员的属性(public/protected/private)，也确定类之间的关系(所属，友元) 什么是新类型的未声明接口 新类型有多一般化：是否需要定义一个模板类 真的需要一个新类型吗：是否可以为已有类添加非成员函数或模板来实现  20.常量引用传递优于值传递    Prefer pass-by-reference-to-const to pass-by-value\n    值传递效率低，而且可能造成对象切割(slicing)：值传递一个衍生类对象时，如果函数声明的是基类，那么调用的是基类的拷贝构造函数 C++ 编译器底层使用指针实现，不同情形使用不同的方式  内置类型(如 int)采用值传递 STL 的迭代器和函数对象使用值传递 其他的采用常量引用传递   21.必须返回对象时，不要返回引用    Don\u0026rsquo;t try to return a reference when you must return an object\n    绝不要返回指针或引用指向一个 local stack 对象 绝不要返回引用指向一个 heap-allocated 对象 绝不要返回指针或引用指向一个 local static 对象而有可能同时需要多个这样的对象  22.声明数据成员为私有的    Declare data memebers private\n    语法一致性：public 接口内的所有东西都是函数 可细微划分访问控制、允诺约束条件获得保证 protected 并不比 public 更具封装性  23.成员函数优于非成员、非友元函数    Prefer non-member non-friend functions to member function\n    将所有功能函数放在多个头文件内但隶属同一命名空间，使用者可以轻松扩展这一组功能函数  在命名空间添加非成员非友元函数，以便为使用者提供方便的接口  优先考虑非成员、非友元函数替换成员函数，可以增加封装性、包裹弹性和机能扩充性  24.当类型转换需应用到所有参数，声明为非成员函数    Declare non-member functions when type conversions should apply to all parameters\n    如果需要为某个函数的所有参数(包括被 this 指针所指的隐喻参数)进行类型转换，那么这个函数必须是非成员函数  编译器可对每一个实参执行隐式类型转换   25.考虑支持不抛异常的 swap 函数    Consider support for a non-throwing swap\n    如果 std::swap 缺省实现对自定义的类或类模板的效率不足，试着做  提供一个 public swap 成员函数，在函数内高效地置换两个对象值 在类或模板所在的命名空间提供一个非成员的 swap 函数，在函数内调用上述 swap 函数 如果正在编写一个类或类模板，让该类特化 std::swap，另其调用上述的 swap 函数  如果调用 swap，确定包含using std::swap，然后不加任何 namespace 修饰符，直接调用 swap，编译器就会查找适当的 swap 函数并调用 警告：成员函数 swap 不可抛出异常  5.实现    Implementations\n   26.尽可能推迟变量定义    Postpone variable definitions as long as possible\n    尽可能延后变量定义式的出现，最好是延后到可以用有意义的参数进行始化 对于循环，如果构造和析构的代码大于赋值操作，则将定义放在循环外  27.最小化 cast 操作    Minimize casting\n    C 风格的转换操作，将 expression 转换为 T：(T)expression和T(expression) C++ 另外提供 4 种转换操作  const_cast\u0026lt;T\u0026gt;( expression )用来移除对象的常量性，唯一可以实现这个目的的 C++ 风格的转换操作符 dynamic_cast\u0026lt;T\u0026gt;( expression )用于执行“安全向下转换”，用于确定某对象是否归属继承体系中的某个类型，可能耗费重大运行成本，唯一一个 C 风格无法实现的转换操作 reinterpret_cast\u0026lt;T\u0026gt;( expression )意图执行低级转换，实际动作和结果可能取决于编译器，即不可移植 static_cast\u0026lt;T\u0026gt;( expression )用于强迫隐式转换，例如 non-const 转换为 const，或者 int 转 double 等  倾向使用 C++ 风格的转换操作，不要使用 C 风格的转换  易被辨识，因而得以简化查找类型被破坏的过程 各转换工作有各自的局限，便于编译器诊断错误的运用  如果可以，尽量避免转换操作，特别是在注重效率的代码中避免 dynamic_cast，如果有需要，尝试改成无需转换的设计  使用类型安全容器，确定是哪种衍生类或基类 将虚函数放在父类，然后添加空实现  如果必须转换，试着用函数封装，可以调用函数，而无需将转换操作引入代码  28.避免返回指向对象内部的句柄    Avoid returning \u0026ldquo;handles\u0026rdquo; to object internals\n    避免返回 handles(包括引用、指针、迭代器)指向对象内部。一遍增加封装性，帮助 const 成员函数的行为像个 const，并将发生 dangling handles 的可能性降至最低  29.努力写异常安全的代码    Strive for exception-safe code\n    异常安全函数即使发生议程也不会内存泄漏或破坏任何数据结构。这样的函数分为三种可能的保证：基本型、强烈型、不抛异常型 “强烈保证”往往以 copy-and-swap 实现，但“强烈保证”并非对所有函数都可实现或具备现实意义 函数提供的“异常安全保证”通常最高只等于其调用的各个函数的“异常安全保证”中的最弱者  30.了解内联的细节    Understand the ins and outs of inlining\n    将大多数内联限制在小型、被频繁调用的函数。可使日后的调试过程和二进制升级更容易，也可最小化潜在的代码膨胀问题，最大化提升程序的速度  内联函数无法随着程序库的升级而升级：内联函数修改，用到该函数的程序必须重新编译 大部分调试器不支持内联函数调试  隐式内联：函数定义在类定义内 显式内联：添加关键字 inline  没有要求每个函数都是内联，就避免声明一个模板是内联  大多数编译拒绝复杂的函数内联：比如虚函数，带有循环或递归的函数。此时会有警告信息 编译器通常不对“通过函数指针进行的调用”执行内联 不要只因为函数模板出现在头文件，就将其声明为内联  31.最小化文件编译依赖    Minimize compilation dependencies between files\n    pimply idiom(pointer to implementation)：将一个类分为两个，一个提供接口，一个负责实现接口，前者在类内包含一个后者的 shared_ptr，做到“接口与实现分离” 使用接口类、衍生类和工厂模式进行实现 分离的关键在于“声明的依存性”替换“定义的依存性”：让头文件尽可能自我满足，万一做不到，则使用前置声明 设计策略  尽量使用对象引用或对象指针，而不是对象：可以在头文件中使用前置声明 尽量使用 class 声明式而不是 class 定义式 为声明式和定义式提供不同的头文件  程序头文件应该以“完全且仅有声明式”的形式存在  6.继承与面向对象设计    Inheritance and object-oriented design\n   32.确保公有继承是\u0026rdquo;is-a\u0026rdquo;关系    Make sure public inheritance models \u0026ldquo;is-a\u0026rdquo;\n    public 继承意味着 is-a。适用于基类的每一件事情一定适用于衍生类，每一个衍生类对象也都是一个基类对象  33.避免隐藏继承的名字    Avoid hiding inherited names\n    衍生类内的名称会隐藏基类内的名称  如果继承基类并加上重载函数，又希望重新定义或覆盖其中一部分，必须为那些原本会被隐藏的名称引入一个 using 声明式，否则继承的名称会被隐藏  为了让隐藏的名称仍然可见，可使用 using 声明式或 forwarding 函数  内置的 forwarding 函数的另一个用途是为那些不支持 using 声明式的编译器而用   34.区分接口继承和实现继承    Differentiate between inheritance of interface and inhertance of implementation\n    接口继承和实现继承不同。在 public 继承时，衍生类会继承基类的接口，即成员函数 声明纯虚函数的目的是让衍生类只继承函数接口 声明非纯虚函数的目的是让衍生类继承该函数的接口和缺省实现 声明非虚函数的目的是让衍生类继承函数的接口和一份强制性实现  35.考虑虚函数的替代    Condider alternatives to virtual functions\n    虚函数的替代方案包括 NVI 手法及 Strategy 设计模式的多种形式  使用 non-virtual interface(NVI)手法，是 Template Method 设计模式的一种特殊形式。以 public non-virtual 成员函数包裹较低访问性的虚函数 将虚函数替换为“函数指针成员变量”。是 Strategy 设计模式的一种分解表现形式 以 function 成员变量替换虚函数，因而允许使用任何可调用实体(callable entities)搭配一个兼容与需求的签名式。这也是 Strategy 设计模式的某种形式 将继承体系内的虚函数替换为另一继承体系的虚函数。这是 Strategy 设计模式的传统实现手法  将功能从成员函数移到类外部，缺点是非成员函数无法访问类的 non-public 成员 function 对象的行为就像一般函数指针。这样的对象可接纳“与给定的目标签名式兼容”的所有可调用实体  36.绝不重定义继承的非虚函数    Never redefine an inherited non-virtual function\n    非虚函数是静态绑定的，虚函数是动态绑定的 任何情况下都不该重新定义一个继承而来的非虚函数，否则调用的函数取决于对象最开始的声明类型，跟实际所指类型无关  37.绝不重定义函数继承的默认参数值    Never redefine a function\u0026rsquo;s inherited default parameter value\n    虚函数是动态绑定，但是缺省参数是静态绑定  调用虚函数时，默认参数可能是基类的默认参数，而不是实际指向的父类的默认参数  静态类型是声明的类型，动态类型是“目前所指对象的类型”  动态类型可以表现出一个对象将会有什么行为 动态类型可在程序执行过程中改变  可以使用 NVI 手法：另基类内的一个 public 非虚函数调用 private 虚函数，后者可被衍生类重新定义。让非虚函数知道缺省参数，虚函数负责真正的工作  38.通过组合对\u0026rdquo;has-a\u0026rdquo;或\u0026rdquo;is-implemented-in-terms-of\u0026rdquo;建模    Model \u0026ldquo;has-a\u0026rdquo; or \u0026ldquo;is-implemented-in-terms-of\u0026rdquo; through composition\n    复合是类型间的一种关系，当某种类型的对象内包含其他类型的对象，就是复合关系 在应用域，复合意味着 has-a(有一个)。在实现域，复合以为着 is-implemented-in-terms-of(根据某物实现出)  39.慎重使用私有继承    Use private inheritance judiciously\n    private 继承意味着 is-implemented-in-terms-of。通常比复合的级别低，但是当衍生类需要访问基类的 protected 成员，或需要重新定义继承而来的虚函数时，private 继承是合理的  private 继承时，编译器不会自动将一个衍生类对象转换为一个基类对象 由 private 继承而来的所有成员，在衍生类中都是 private 属性 private 继承是一种实现技术，意味着只有实现部分被继承，接口部分应忽略  与复合相比，private 继承可以使得空白基类最优化(EBO, empty base optimization)。对致力于“对象尺寸最小化”的程序库开发者比较重要 尽可能使用复合，必要时采用 private 继承  当想要访问一个类的 protected 成员，或需要重新定义该类的一个或多个虚函数 当空间更加重要，衍生类的基类可以不包含任何 non-static 成员变量 “独立(非附属)”对象的大小一定不为零，不适用于单一继承(多重继承不可以)衍生类对象的基类   40.慎重使用多重继承    Use multiple inheritance judiciously\n    多重继承是继承一个以上的基类，但这些基类并不常在继承体系中又有基类  虚继承：防止多重继承时，基类之间又有基类，从而上层的基类的成员变量被父类复制 虚继承的类产生的对象体积更大，访问虚基类的成员变量速度慢，增加初始化(及赋值)的复杂度 如果虚基类不带任何数据，是具有使用价值的情况  多重继承比单一继承复杂，可能导致新的歧义性，以及对虚继承的需要 多重继承的用途：涉及“public 继承某个接口类”和“private 继承某个协助实现的类”  7.模板与泛型编程    Templates and generic programming\n   41.理解隐式接口和编译期多态    Understand implicit interfaces and compile-time polymorphism\n    类和模板都支持接口和多态 对类而言接口是显式的，以函数签名为中心。多态则是通过虚函数发生于运行期 对模板参数而言，接口是隐式的，基于有效表达式。多态则是通过模板具体化和函数重载解析，发生于编译期  42.理解 typename 的双重定义    Understand the two meanings of typename\n    声明模板类型参数的两种方式：  template\u0026lt;class T\u0026gt; class widget; template\u0026lt;typename T\u0026gt; class widget;  从属名称：模板内的名称依赖于某个模板参数  非从属名称：模板内不依赖模板参数的名称  嵌套从属名称：从属名称在类内呈嵌套状 嵌套从属类型名称：嵌套从属名称且指向某类型  想在模板中指定一个嵌套从属类型名称，就必须在紧邻它的前一个位置加上关键字 typename typename 不可出现在基类列表类的嵌套从属类型名称前，也不可在成员初始化列表中作为基类的修饰符   43.了解如何访问模板化基类内的名称    Know how to access names in templatized base classes\n    当基类从模板中被具体化时，它假设对基类的内容一无所知，即衍生类基类继承一个基类模板，不能再衍生类的实现中直接调用基类的成员(变量和函数)  可在衍生类模板内添加this-\u0026gt;指向基类模板的成员(变量和函数) 使用 using 声明式，假设已经存在这个成员(变量和函数) 明确指出被调用的函数位于基类内，使用基类::，如果是一个虚函数，会关闭虚函数的动态绑定行为   44.把参数无关的代码分离出模板    Factor parameter-independent code out of templates\n    模板生成多个类和多个函数，所以任何模板代码都不该与某个造成膨胀的模板参数产生依赖关系 因非类型模板参数造成的代码膨胀，往往可以消除，做法是以函数参数或类成员变量替换模板参数 因类型参数造成的代码膨胀，往往可以降低，做法是让带有完全相同二进制表示的具体类型实现共享代码  45.使用成员函数模板来接受“所有兼容类型”    Use member function templates to accept \u0026ldquo;all compatible types\u0026rdquo;\n    具有基类-衍生类关系的两个类型分别具体化某个模板，生成的两个结构并不带有基类-衍生类关系 使用成员函数模板生成“可接受所有兼容类型”的函数 如果声明成员模板用于“泛化拷贝构造”或“泛化赋值操作”，必须声明正常的拷贝构造函数和拷贝赋值操作符  声明泛化拷贝构造函数和拷贝赋值操作符，不会阻止编译器生成默认的拷贝构造函数和拷贝赋值操作符   46.需要类型转化时在模板内定义非成员函数    Define non-member functions inside templates when type conversions are desired\n    模板实参推导过程中不会考虑隐式类型转换函数 写类模板时，当它提供的“与此模板相关的”函数支持“所有参数的隐式类型转换”时，将那些函数定义为类模板内部的友元函数  在类内部声明非成员函数作为友元函数，成为内联函数 为了将内联声明的影响最小化，在类外定义一个辅助函数模板，在友元函数内只调用辅助函数   47.使用 traits class 表现类型信息    Use traits classes for information about types\n    STL 有 5 种迭代器  input 迭代器：只能向前移动，一次异步，只可读取(不能修改)所指的东西，且只能读取一次。模仿了指向输入文件的读指针。如 C++ 的 istream_iterator output 迭代器：只能向前移动，一次一步，只可修改所指的东西，且只能修改一次。模仿了指向输出文件的写指针。如 C++ 的 ostream_iterator input 和 output 迭代器都只适合“单步操作算法(one-pass algorithms)” forward 迭代器：既能完成上述两种迭代器的工作，且可以读或写所指对象一次以上。使得可以实施“多步操作算法(multi-pass algorithms)”。如单向链表的迭代器 bidirectional 迭代器：既能完成 forward 迭代器的工作，还支持向后移动。STL 的 list/set/multiset/map/multimap 迭代器就属于这一分类 random access 迭代器：可以执行“迭代器运算”，即可以在常量时间内向前或向后跳跃任意距离。如 array/vector/deque/string 提供的都是随机访问迭代器  如何设计一个 traits 类  确认若干希望将来可取得的类型相关信息。例如迭代器希望取得分类(category) 为该信息选择一个名词。如迭代器是 iterator_category 提供一个模板和一组特化版本，其中包含希望支持的类型相关信息 traits 类的名称常以\u0026rdquo;traits\u0026rdquo;结束  如何使用一个 traits 类  建立一组重载函数(类似劳工)或函数模板，彼此间的差异只在于各自的 traits 参数。令每个函数实现与其接受的 traits 信息相对应 建立一个控制函数(类似工头)或函数模板，调用上述的函数并传递 traits 类所提供的信息  traits 类使得“类型相关信息”在编译期可用。它们以模板和一组“模板特化”完成实现 整合重载技术后，traits 类可在编译期对类型执行 if\u0026hellip;else 测试  48. 认识模板元编程    Be aware of template metaprogramming\n    模板元编程(TMP, template metaprogramming)是编写基于模板的 C++ 程序并在编译期执行的过程  即以 C++ 写成、在 C++ 编译期内执行的程序 TMP 程序结束执行，输出的 C++ 源码可以像往常一样编译 优点： 让某些事情更容易 可将工作从运行期转移到编译期。使得原本在运行期才可以侦测的错误在编译期被找到 TMP 的 C++ 程序在每一方面可能更加高效：较小的可执行文件、较短的运行期、较少的内存需求 缺点：导致编译时间变长  TMP 主要是函数式语言，可以达到的目的  确保度量单位正确：在编译期确保程序所有度量单位的组合是正确的 优化矩阵运算：使用 expression template，可能会消除中间计算生成的临时对象并合并循环 可生成用户自定义设计模式的实现品。设计模式如 Strategy/Observer/Visitor 等都可以多种方式实现  问题：  语法不直观 支持工具不充分，如没有调试器   8.定制 new 和 delete    Customizing new and delete\n    new和delete只适合分配单一对象；new []和delete []用来分配数组 STL 容器所使用的 heap 内存是由容器所拥有的分配器对象(allocator objects)管理，而不是 new 和 delete 管理  49.理解 new-handler 的行为    Understand the behavior of the new-handler\n    当 new 操作抛出异常以反映一个未获满足的内存需求之前，会先调研一个客户指定的错误处理函数，即 new-handler  可以用是set_new_handler设置该函数 参数是个指针，指向 new 无法分配足够内存时该调用的函数 返回值是个指针，指向set_new_handler被调用之前正在执行的 new_handler 函数 new_handler 是个 typedef，定义一个指针指向函数，函数没有参数也没有返回值  设计良好的 new-handler 函数  让更多内存可被使用：程序一开始执行就分配一大块内存，而后第一次调用 new-handler，将该内存释放给程序使用 设置另一个 new-handler：如果已知哪个 new-handler 可以获得更多可用内存，调用时设置该 new-handler 替换自己。比如令 new-handler 修改“会影响 new-handler 行为”的静态数据、命名空间数据或全局数据 取消设置 new-handler：即将 null 指针传给set_new_handler，内存分配不成功时就会抛异常 抛出 bad_alloc 或派生自 bad_alloc 的异常：该异常不会被 new 操作捕获，但会传播给请求内存的代码 不返回：通常调用 abort 或 exit  nothrow new是一个有局限性的工具，因为它只适用于内存分配；后续的构造函数调用还是可能抛出异常  50.理解何时替换 new 和 delete 有意义    Understand when it makes sense to replace new and delete\n    三个替换编译器提供的 new 和 delete 理由：  检测运用上的错误：自定义 new 操作，可超额分配内存，以额外空间放置特定的 byte patterns(即签名，signature)。对应的 delete 操作可以检查上述签名是否原封不动，若否表示在分配区的某个声生命时间点发生了 overrun(写入点在分配区块尾端之后) 或 underrun(写入点在分配区块起点之前)。此时 delete 可以日志记录该时间和发生错误的指针 强化效能：编译器的 new 和 delete 无法解决碎片问题，导致程序可能无法申请大区块内存。通常来说这种自定制的性能更好 收集使用上的统计数据：先收集软件如何使用动态内存，包括分配区块的大小分布、寿命分布、分配和释放的次序(FIFO/LIFO/随机)、任何时刻内存分配上限 增加分配和释放的速度：当定制型分配器专门针对某特定类型的对象设计时，往往比泛用型分配器更快 降低缺省内存管理器带来的空间额外开销：泛用型内存管理器往往使用更多内存 弥补缺省分配器中的非最佳对齐：缺省的分配器一般是 4 字节对齐，但是对于 x86 最好是 8 字节对齐 将相关对象成簇集中：将往往被一起使用某个数据结构放在一起创建，可以减少 page fault 的错误 获得非传统的行为：比如添加数据初始化工作   51.写 new 和 delete 时遵循惯例    Adhere to convention when writing new and delete\n    new 操作  应该包含一个无穷循环，并在其中尝试分配内存 如果无法满足需求，调用 new-handler 也应该可以处理 0 字节申请 类的自定义版本还应该处理“比正确大小更大的(错误)申请”  delete 操作  收到 null 指针不做任何事 类的自定义版本还应该处理“比正确大小更大的(错误)申请”   52.写了 placement new 也要写 placement delete    Write placement delete if you write placement new\n    如果自己实现一个 placement operator new，也要写出对应的 placement operator delete。否则会发生隐蔽时断时续的内存泄漏 当声明 placement new 和 placement delete，确定不要无意识地遮掩它们的正常版本  9.杂项讨论    Miscellany\n   53.注意编译器警告    Pay attention to compiler warnings\n    严肃对待编译器发出的警告信息。努力在编译器的最高(最严苛)警告级别下争取“无任何警告” 不要过度依赖编译器的报警能力，因为不同的编译器对待事情的态度不相同。一旦移植到另一个编译器上，原本依赖的警告信息有可能消失  54.熟悉包括 TR1 在内的标准库    Familiarize yourself with the standard library, including TR1\n   55.熟悉 Boost    Familiarize yourself with Boost\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"61e64427a86d0540bec36fb21584afdc","permalink":"https://xueqing.github.io/blog/cplusplus/effectivec++_3/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/effectivec++_3/","section":"blog","summary":"1.让自己习惯 C++ 01.视 C++ 为一个语言联邦 02.常量，枚举和内联优于宏定义 03.尽可能使用常量 04.确定对象被使用前已先被初始化 2.构造/析构","tags":["c++"],"title":"Effective C++, 3rd","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Equivalent Binary Trees 1. Implement the Walk function. 2. Test the Walk function. The function tree.New(k) constructs a randomly-structured (but always sorted) binary tree holding the values k, 2k, 3k, ..., 10k. Create a new channel ch and kick off the walker: go Walk(tree.New(1), ch) Then read and print 10 values from the channel. It should be the numbers 1, 2, 3, ..., 10. 3. Implement the Same function using Walk to determine whether t1 and t2 store the same values. 4. Test the Same function. Same(tree.New(1), tree.New(1)) should return true, and Same(tree.New(1), tree.New(2)) should return false. The documentation for Tree can be found here. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;golang.org/x/tour/tree\u0026quot; ) // Walk walks the tree t sending all values // from the tree to the channel ch. func Walk(t *tree.Tree, ch chan int) { if t.Left != nil { Walk(t.Left, ch) } ch \u0026lt;- t.Value if (t.Right) != nil { Walk(t.Right, ch) } } // Same determines whether the trees // t1 and t2 contain the same values. func Same(t1, t2 *tree.Tree) bool { ch1 := make(chan int) ch2 := make(chan int) go Walk(t1, ch1) go Walk(t2, ch2) for i := 1; i \u0026lt;= 10; i++ { v1, v2 := \u0026lt;-ch1, \u0026lt;-ch2 fmt.Println(\u0026quot;Walk two tree: \u0026quot;, v1, v2) if v1 != v2 { return false } } return true } func main() { ch := make(chan int) go Walk(tree.New(1), ch) for i := 1; i \u0026lt;= 10; i++ { v := \u0026lt;-ch fmt.Println(\u0026quot;Walk tree: \u0026quot;, v) if i != v { fmt.Println(\u0026quot;Test Walk failure\u0026quot;) return } } fmt.Println(\u0026quot;Test Walk success\u0026quot;) if Same(tree.New(1), tree.New(1)) \u0026amp;\u0026amp; !Same(tree.New(1), tree.New(2)) { fmt.Println(\u0026quot;Test Same success\u0026quot;) } else { fmt.Println(\u0026quot;Test Same failure\u0026quot;) } }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8f43c5f8e8deabd910d89681c886891d","permalink":"https://xueqing.github.io/translation/go-doc/gotour/equivalent_binary_trees/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/equivalent_binary_trees/","section":"translation","summary":"/* Exercise: Equivalent Binary Trees 1. Implement the Walk function. 2. Test the Walk function. The function tree.New(k) constructs a randomly-structured (but always sorted) binary tree holding the values k, 2k, 3k, ..., 10k. Create a new channel ch and kick off the walker: go Walk(tree.New(1), ch) Then read and print 10 values from the channel. It should be the numbers 1, 2, 3, ..., 10. 3. Implement the Same function using Walk to determine whether t1 and t2 store the same values.","tags":["go-tour"],"title":"Equivalent Binary Trees","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Errors Copy your Sqrt function from the earlier exercise and modify it to return an error value. Sqrt should return a non-nil error value when given a negative number, as it doesn't support complex numbers. Create a new type type ErrNegativeSqrt float64 and make it an error by giving it a func (e ErrNegativeSqrt) Error() string method such that ErrNegativeSqrt(-2).Error() returns \u0026quot;cannot Sqrt negative number: -2\u0026quot;. Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why? Change your Sqrt function to return an ErrNegativeSqrt value when given a negative number. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) type errNegativeSqrt float64 func (e errNegativeSqrt) Error() string { // 因为e变量是一个通过实现Error()的接口函数成为了error类型，那么在fmt.Sprint(e)时就会调用e.Error()来输出错误的字符串信息 return fmt.Sprint(\u0026quot;cannot Sqrt negative number: \u0026quot;, float64(e)) } func mySqrt(x float64) (float64, error) { if x \u0026lt; 0 { return -1, errNegativeSqrt(x) } z := x / 2 tmp := 0.0 for math.Abs(z-tmp) \u0026gt;= 0.000000000001 { tmp = z z -= (z*z - x) / (2 * z) } return z, nil } func main() { fmt.Println(mySqrt(2)) fmt.Println(mySqrt(-2)) }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"77be69173bb7bda00f50c1a51e0b8e74","permalink":"https://xueqing.github.io/translation/go-doc/gotour/errors/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/errors/","section":"translation","summary":"/* Exercise: Errors Copy your Sqrt function from the earlier exercise and modify it to return an error value. Sqrt should return a non-nil error value when given a negative number, as it doesn't support complex numbers. Create a new type type ErrNegativeSqrt float64 and make it an error by giving it a func (e ErrNegativeSqrt) Error() string method such that ErrNegativeSqrt(-2).Error() returns \u0026quot;cannot Sqrt negative number: -2\u0026quot;. Note: A","tags":["go-tour"],"title":"Errors","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Fibonacci closure Let's have some fun with functions. Implement a fibonacci function that returns a function (a closure) that returns successive fibonacci numbers (0, 1, 1, 2, 3, 5, ...). */ package main import \u0026quot;fmt\u0026quot; func fibonacci() func() int { before, val := 0, 1 return func() int { ret := before before, val = val, before + val return ret } } func main() { f := fibonacci() for i := 0; i \u0026lt; 10; i++ { fmt.Println(f()) } }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"aa1301ea7b9439d45b4d128b4e586d81","permalink":"https://xueqing.github.io/translation/go-doc/gotour/fibonacci_closure/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/fibonacci_closure/","section":"translation","summary":"/* Exercise: Fibonacci closure Let's have some fun with functions. Implement a fibonacci function that returns a function (a closure) that returns successive fibonacci numbers (0, 1, 1, 2, 3, 5, ...). */ package main import \u0026quot;fmt\u0026quot; func fibonacci() func() int { before, val := 0, 1 return func() int { ret := before before, val = val, before + val return ret } } func main() { f := fibonacci() for i := 0; i \u0026lt; 10; i++ { fmt.","tags":["go-tour"],"title":"Fibonacci closure","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;fmt\u0026quot;\n概述 fmt 包用类似于 C 的 printf 和 scanf 的函数实现了格式化的 I/O。格式 “verbs” 衍生自 C 但是更简单。\n打印 verbs 包括：\n通用的：\n%v 默认格式的值 当打印结构体时，增加标识 (%+v) 会增加域名。 %#v 值的一个 Go 语法显示 %T 值类型的一个 Go 语法显示 %% 一个字面百分比符号；不消费任何值  布尔型：\n%t 单词是 true 还是 false  整型：\n%b base 2 %c the character represented by the corresponding Unicode code point %d base 10 %o base 8 %O base 8 with 0o prefix %q a single-quoted character literal safely escaped with Go syntax. %x base 16, with lower-case letters for a-f %X base 16, with upper-case letters for A-F %U Unicode format: U+1234; same as \u0026quot;U+%04X\u0026quot;  索引 参考\n例子 参考\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"563de0170ea7052e8e644e1de3ccc892","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/fmt/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/fmt/","section":"translation","summary":"参考 Golang 官网文档 学习。 导入语句：import \u0026quot;fmt\u0026quot; 概述 fmt 包用类似于 C 的 printf 和 scanf 的函数实现了格式化的 I/O。格式 “verbs” 衍生自 C 但是更简单。 打印","tags":["golang-pkg"],"title":"fmt 包","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"用法：go bug\n命令打开默认浏览器，并开启一个新的缺陷报告。报告包含有用的系统信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"cf29a495a2a90e9d36a5e931e8badb51","permalink":"https://xueqing.github.io/translation/go-doc/command/bug/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/bug/","section":"translation","summary":"用法：go bug 命令打开默认浏览器，并开启一个新的缺陷报告。报告包含有用的系统信息。","tags":["go-command"],"title":"go bug","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 源码文件 编译多个 Go 源码文件 go build 的参数 依赖包 构建标签  命令  go build [-o output] [-i] [build flags] [packages] go build 命令用于编译我们指定的源码文件或代码包以及它们的依赖包 如果在执行 go build 命令时不后跟任何代码包，那么命令将试图编译当前目录所对应的代码包 编译码包 cnet/ctcp  在 GOPATH/src/cnet/ctcp 执行 go build 在 GOPATH/src/cnet/ 执行 go build ctcp 在任意目录下执行 go build cnet/ctcp  go build 会忽略目录下以 “_” 或 “.” 开头的 go 文件 -o 强制将生成的可执行文件或目标文件写到指定的输出文件或文件夹。如果指定的输出是存在的文件夹，生成的可执行文件会写到文件夹 -i 安装依赖包  源码文件  Go 语言的源码文件有三大类，即：命令源码文件、库源码文件和测试源码文件  命令源码文件：总是作为可执行的程序的入口 库源码文件：一般用于集中放置各种待被使用的程序实体（全局常量、全局变量、接口、结构体、函数等等） 测试源码文件：主要用于对前两种源码文件中的程序实体的功能和性能进行测试。另外也可以用于展现命令源码文件和库源码文件中程序的使用方法  如果是库源码文件，执行 go build 之后，不会产生任何文件。如果需要在 $GOPATH/pkg 下生成相应的文件，那就得执行 go install 如果是命令源码文件(main 包)，执行 go build 之后，它就会调用链接器在当前目录下生成一个可执行文件，可执行程序的名字取自包的导入路径的最后一段。如果需要在 $GOPATH/bin 下生成相应的文件，需要执行 go install，或者使用 go build -o 可执行文件  编译多个 Go 源码文件  go build 默认会编译当前目录下的所有 go 文件  构建所有需要的包及其依赖，然后丢弃除了可执行程序之外的所有编译的代码  可以同时编译多个 Go 源码文件，在 go build 后跟要编译的文件名，用空格分隔  限制：作为参数的多个 Go 源码文件必须在同一个目录中  go build 命令在编译只包含库源码文件的代码包（或者同时编译多个代码包）时，只会做检查性的编译，而不会输出任何结果文件 go build 命令既不能编译包含多个命令源码文件的代码包，也不能同时编译多个命令源码文件。因为，如果把多个命令源码文件作为一个整体看待，那么每个文件中的 main 函数就属于重名函数，在编译时会抛出重复定义错误 如果编译的多个属于 main 包的源码文件中没有 main 函数的声明，那么就会使编译器立即报出“未定义 main 函数声明”的错误并中止编译 总结：同时编译多个 main 包的源码文件时，要保证其中有且仅有一个 main 函数声明，否则编译是无法成功的 如果有多个声明为属于 main 包的源码文件，且其中只有一个文件声明了 main 函数的话，那么是可以使用 go build 命令同时编译它们的。在这种情况下，不包含 main 函数声明的那几个源码文件会被视为库源码文件。如此编译之后的可执行文件的名称来自指定的编译目标中最左边的那个源码文件的主文件名相同  go build 的参数  下面的编译标志被 build/clean/get/install/list/run/test 共享     标志 描述     -a 强行重新构建包，即使它们已经是最新的了，但是对标准包不适用   -n 打印将要执行的命令，但是不执行   -p n 指定执行命令的并行程序数量。默认等于可用的 CPU 逻辑数。在 darwin/arm (iPhone 和 iPad) 平台，默认是1   -race 开启竞态条件检测。仅在 linux/amd64、freebsd/amd64、darwin/amd64和windows/amd64 平台支持   -v 打印被编译的包名   -work 打印临时工作目录名称，且如果存在不会在执行命令后删除。默认结束命令时会删除该目录   -x 打印命令。注意它与 -n 标记的区别     其他参数  -mod 控制对 go.mod 的更新和使用 -mod=readonly 不能隐式自动更新 go.mod。当需要修改 go.mod 时会失败。用于检查 go.mod 不需要任何更新，比如在持续集成和测试系统  这个参数对 go get 不生效，即命令仍然可以更新 go.mod 文件  -mod=vendor: 使用模块的顶层的 vendor 目录来编译以满足依赖(不使用通常的网络源码和本地缓存)   依赖包  go build 命令在执行时，编译程序会先查找目标代码包的所有依赖包，以及这些依赖包的依赖包，直至找到最深层的依赖包为止。在此过程中，如果发现有循环依赖的情况，编译程序就会输出错误信息并立即退出。此过程完成之后，所有的依赖关系也就形成了一棵含有重复元素的依赖树。对于依赖树中的一个节点（代码包）来说，它的直接分支节点（前者的依赖包），是按照代码包导入路径的字典序从左到右排列的。最左边的分支节点会最先被编译。编译程序会依此设定每个代码包的编译优先级 执行 go build 命令的计算机如果拥有多个逻辑 CPU 核心，那么编译代码包的顺序可能会存在一些不确定性。但是，它一定会满足这样的约束条件：依赖代码包 -\u0026gt; 当前代码包 -\u0026gt; 触发代码包 在执行 go build 命令时加入标记 -p 1，那么就可以保证代码包编译顺序严格按照预先设定好的优先级进行  构建标签  构建标签：go build 只会在构建指定规格的目标文件的时候才进行编译，叫做构建标签的特殊注释，提供更细力度的控制。 注释需要加在包的声明之前，这是文档注释。如 // +build linux darwin // +build ignore 指出任何时候都不要编译这个文件  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"b49eb959654be04848757ecbc4cffd9f","permalink":"https://xueqing.github.io/translation/go-doc/command/build/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/build/","section":"translation","summary":"命令 源码文件 编译多个 Go 源码文件 go build 的参数 依赖包 构建标签 命令 go build [-o output] [-i] [build flags] [packages] go build 命令用于编译我们指定的源码文件或代码包以及它们的依赖包 如果在执","tags":["go-command"],"title":"go build","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 go clean 的参数  命令  go clean 命令会删除掉执行其它命令时产生的一些文件和目录，包括  有一些目录和文件是在编译 Go 或 C 源码文件时留在相应目录中的 目录 _obj/：旧的 object 目录，由 Makefiles 遗留 目录 _test/：旧的 test 目录，由 Makefiles 遗留 文件 _testmain.go：旧的 gotest 文件，由 Makefiles 遗留 文件 test.out：旧的 test 记录，由 Makefiles 遗留 文件 build.out：旧的 test 记录，由 Makefiles 遗留 文件 a.out 文件 DIR(.exe)： 由 go build 在当前代码包下生成的与包名同名或者与 Go 源码文件同名的可执行文件(Windows 带有 .exe 后缀) 文件 DIR.test(.exe)： 由 go test -c 在当前代码包下生成(Windows 带有 .test.exe 后缀) 文件 MAINFILE(.exe)： 由 go build MAINFILE.go 产生 文件 *.so：由 SWIG 遗留 执行 go clean 命令时带有标记 -i，则会同时删除安装当前代码包时所产生的结果文件。如果当前代码包中只包含库源码文件，则结果文件指的就是在工作区的 pkg 目录的相应目录下的归档文件。如果当前代码包中只包含一个命令源码文件，则结果文件指的就是在工作区的 bin 目录下的可执行文件。这些目录和文件是在执行 go build 命令时生成在临时目录中的。临时目录的名称以 go-build 为前缀 执行 go clean 命令时带有标记 -r，则还包括当前代码包的所有依赖包的上述目录和文件   go clean 的参数    参数 描述     -i 清除关联的安装的包和可运行文件   -n 打印执行命令期间所用到的其它命令，但是并不真正执行它们   -r 循环的清除在 import 中引入的包   -x 打印执行命令期间所用到的其它命令。注意它与 -n 标记的区别    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fbe7ca90289165e7ec5234eb4293e274","permalink":"https://xueqing.github.io/translation/go-doc/command/clean/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/clean/","section":"translation","summary":"命令 go clean 的参数 命令 go clean 命令会删除掉执行其它命令时产生的一些文件和目录，包括 有一些目录和文件是在编译 Go 或 C 源码文件时留在相应目录中的 目录 _ob","tags":["go-command"],"title":"go clean","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 Go 语言程序实体 go doc 的参数 godoc  命令行模式 Web 服务器模式   命令  go doc 命令可以打印附于 Go 语言程序实体上的文档。可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的 go doc 可以接受一个参数，指定包/包成员/方法：go doc http.Request  go doc 命令根据参数查找代码包或程序实体的顺序：Go 语言根目录（GOROOT 环境变量指定的目录）-\u0026gt; 工作区目录（GOPATH 环境变量包含的目录）。在内部遵循字典序 如果某个工作区目录中的代码包与标准库中的包重名了，那么它是无法被打印出来的。go doc 命令只会打印出第一个匹配的代码包或程序实体的文档  go doc 也可以接受两个参数：go doc net/http Request  这是一种更加精细的指定代码包或程序实体的方式 第一个参数的代码包名称必须是完整的导入路径 在给定两个参数时，go doc 会打印出所有匹配的文档，而不是像给定一个参数时那样只打印出第一个匹配的文档。这对于查找只有大小写不同的多个方法（如 New、new）的文档来说非常有用   Go 语言程序实体  Go 语言的程序实体，是指变量、常量、函数、结构体以及接口 程序实体的标识符即是代表它们的名称。标识符又分非限定标识符和限定标识符  限定标识符一般用于表示某个代码包中的程序实体或者某个结构体类型中的方法或字段 如：标准库代码包 io 中的名为 EOF 的变量用限定标识符表示即 io.EOF 如：如果有一个 sync.WaitGroup 类型的变量 wg 并且想调用它的 Add 方法，那么可以这样写 wg.Add()。其中，wg.Add 就是一个限定标识符，而后面的 () 则代表了调用操作。   go doc 的参数    参数 描述     -c 区分参数中字母的大小写。默认情况下，命令是大小写不敏感的   -cmd 打印出 main 包中的可导出的程序实体（其名称的首字母大写）的文档。默认情况下，这部分文档是不会被打印出来的   -u 打印出不可导出的程序实体（其名称的首字母小写）的文档。默认情况下，这部分文档是不会被打印出来的    godoc  在 Go1.2 版本之前还支持 go doc 命令，但是之后全部移到了 godoc 这个命令下，需要这样安装 go get golang.org/x/tools/cmd/godoc 在 Go1.5 版本中，go doc 是一个内置的标准命令 命令有两种模式可供选择  命令行模式  不加入 -http 标记：以命令行模式运行。在打印纯文本格式的文档到标准输出后，命令执行就结束了。如 godoc fmt Printf，godoc fmt Printf Println 加 -src 标记：不但可以在文档中查看可导出的程序实体的声明，还可以看到源码。如 godoc -src fmt Printf godoc 命令只能把代码包和程序实体的标识符拆成两个参数。也就是说，godoc 命令不支持前文所述的 go doc 命令的单参数用法 在实际的环境中，可能会遇到一个命令源码文件所产生的可执行文件与代码包重名的情况。比如，标准命令 go 和官方代码包 go。们要明确的告诉 godoc 命令要查看可执行文件 go 的文档，需要在名称前加入 cmd/ 前缀 godoc cmd/go 查看 HTML 格式的文档，就需要加入标记 -html，可以在其中找到一些相应源码的链接地址  Web 服务器模式  加上 -http 标记：以 Web 服务器模式运行。以 Web 页面的形式提供 Go 语言文档 godoc -http=:6060 标记 -http 的值 :6060 表示启动的 Web 服务器使用本机的 6060 端口。之后，可通过在浏览器中输入 http://localhost:6060 查看以网页方式展现的 Go 文档 这使得在不方便访问 Go 语言官方站点的情况下也可以查看 Go 语言文档。并且通过本机的 Go 文档 Web 服务，还可以查看所有本机工作区下的代码的文档 godoc -http=:9090 -index 使用 -index 标记开启搜索索引。这个索引会在服务器启动时创建并维护。如果不加入此标记，那么无论在 Web 页面还是命令行终端中都无法进行查询操作  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"5d15ae980d246c8da956f6b51261274c","permalink":"https://xueqing.github.io/translation/go-doc/command/doc/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/doc/","section":"translation","summary":"命令 Go 语言程序实体 go doc 的参数 godoc 命令行模式 Web 服务器模式 命令 go doc 命令可以打印附于 Go 语言程序实体上的文档。可以通过把程序实体的标识符作为该命令的参","tags":["go-command"],"title":"go doc","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 go env 命令可打印出的 Go 语言通用环境信息 go env 的参数  命令  go env 用于打印 Go 语言的环境信息：go env GOARCH 或 go env GOARCH GOCHAR go env -w 重写 Go 语言的环境信息：go env -w GOPRIVATE=\u0026quot;*.bmi\u0026quot;  go env 命令可打印出的 Go 语言通用环境信息 | 名称 | 描述 | | CGO_ENABLED | 指明 cgo 工具是否可用的标识 | | GOARCH | 程序构建环境的目标计算架构 | | GOBIN | 存放可执行文件的目录的绝对路径 | | GOCHAR | 程序构建环境的目标计算架构的单字符标识 | | GOEXE | 可执行文件的后缀 | | GOHOSTARCH | 程序运行环境的目标计算架构 | | GOOS | 程序构建环境的目标操作系统 | | GOHOSTOS | 程序运行环境的目标操作系统 | | GOPATH | 工作区目录的绝对路径 | | GORACE | 用于数据竞争检测的相关选项 | | GOROOT | Go 语言的安装目录的绝对路径 | | GOTOOLDIR | Go 工具目录的绝对路径 |\ngo env 的参数    参数 描述      ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7c571b11f19ff6f065f6b5b60ab05f29","permalink":"https://xueqing.github.io/translation/go-doc/command/env/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/env/","section":"translation","summary":"命令 go env 命令可打印出的 Go 语言通用环境信息 go env 的参数 命令 go env 用于打印 Go 语言的环境信息：go env GOARCH 或 go env GOARCH GOCHAR go env -w 重写 Go 语言的环境信息：go env -w GOPRIVATE=\u0026quot;*.bmi\u0026quot;","tags":["go-command"],"title":"go env","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 gofmt 的参数  命令  go 代码有标准的风格。go fmt file_name.go 命令可以格式化写好的代码文件 开发工具里面一般都带了保存时候自动格式化功能，这个功能其实在底层就是调用了 go fmt 使用 go fmt 命令，其实是调用了 gofmt，而且需要参数 -w，否则格式化结果不会写入文件。gofmt -w -l src 可以格式化整个项目  gofmt 的参数    参数 描述     -l 显示需要格式化的文件   -w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出   -r 添加形如 “a[b:len(a)] -\u0026gt; a[b:]” 的重写规则，方便做批量替换   -s 简化文件中的代码   -d 显示格式化前后的 diff 而不是写入文件，默认是 false   -e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误   -cpuprofile 支持调试模式，写入相应的 cpufile 到指定的文件    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"55f569685a53b991d636539cb4146dd1","permalink":"https://xueqing.github.io/translation/go-doc/command/fmt/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/fmt/","section":"translation","summary":"命令 gofmt 的参数 命令 go 代码有标准的风格。go fmt file_name.go 命令可以格式化写好的代码文件 开发工具里面一般都带了保存时候自动格式化功能，这个功能其实在底层就是","tags":["go-command"],"title":"go fmt","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令  命令  go generate 用于在编译前自动化生成某类代码 go generate 通过分析源码中特殊的注释，然后执行相应的命令。注意  此特殊注释必须在 .go 源码文件 每个源码文件可包含多个 generate 注释 显示运行 go generate 命令时，才会执行特殊注释后面的命令 命令串执行时，如果出错则终止后面的执行  //go:generate go tool yacc -o gopher.go -p parser gopher.y  //go:generate 没有空格，这是一个固定的格式，在扫描源码文件的时候是根据这个来判断的 使用 yacc 来生成代码：-o 指定输出文件名，-p 指定 package 名称 这是一个单独的命令。如果想让 go generate 来触发这个命令，那么就可以在当然目录的任意一个 xxx.go 文件里面的任意位置增加此注释   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"02b4a5facad4cc216e3416a177c389cf","permalink":"https://xueqing.github.io/translation/go-doc/command/generate/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/generate/","section":"translation","summary":"命令 命令 go generate 用于在编译前自动化生成某类代码 go generate 通过分析源码中特殊的注释，然后执行相应的命令。注意 此特殊注释必须在 .go 源码文件 每个源码文件可包含","tags":["go-command"],"title":"go generate","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 go get 命令支持的 VCS go get 的参数  命令  go get 命令用来动态获取远程代码包，从代码版本控制系统的远程仓库中检出/更新代码包并对其进行编译和安装 在内部实际上分成了两步操作：第一步是下载源码包第一个工作区的 src 目录下，第二步是执行 go install 目前支持的有 BitBucket、GitHub、Google Code 和 Launchpad。下载源码包的 go 工具会自动根据不同的域名调用不同的源码工具，对应关系如下  BitBucket (Mercurial Git) GitHub (Git) Google Code Project Hosting (Git, Mercurial, Subversion) Launchpad (Bazaar) 这些网站的项目包路径有一个共同标准：远程包路径格式是 网站域名/作者或机构/项目名  如 go get github.com/hyper-carrot/go_lib/logging go get 支持自定义域名的功能，具体参见 go help remote 除非要求强行更新代码包，否则 go get 命令不会进行重复下载  go get 命令支持的 VCS  代码版本控制系统（Version Control System，VCS） 这几个版本控制系统都有一个共同点，那就是会在检出的项目目录中存放一个元数据目录，名称为 “.” 前缀加其主命令名     名称 主命令 说明     Mercurial hg Mercurial 是一种轻量级分布式版本控制系统，采用 Python 语言实现，易于学习和使用，扩展性强   Git git Git 最开始是 Linux Torvalds 为了帮助管理 Linux 内核开发而开发的一个开源的分布式版本控制软件。但现在已被广泛使用。它是被用来进行有效、高速的各种规模项目的版本管理   Subversion svn Subversion 是一个版本控制系统，也是第一个将分支概念和功能纳入到版本控制模型的系统。但相对于 Git 和 Mercurial 而言，它只算是传统版本控制系统的一员   Bazaar bzr Bazaar 是一个开源的分布式版本控制系统。但相比而言，用它来作为 VCS 的项目并不多     对于不知名的网站，需要指出导入路径使用哪种版本控制协议 位置由诸如 googlesource.com 或 github.com 之类通用服务托管，包可以在其导入路径中使用自定义域名。其 HTML 网页下包含元数据重定向 go 工具到实际托管地址的服务仓库  go get 的参数  go get 命令可以接受所有可用于 go build 命令和 go install 命令的参数。这是因为 go get 命令的内部步骤中完全包含了编译和安装这两个动作 go get 命令还有一些特有的参数     参数 描述     -d 只下载不安装   -f 只有在包含 -u 参数时才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用   -fix 在获取源码之后先运行 fix，而后再进行编译和安装   -insecure 允许使用非安全的 scheme（如HTTP）去下载指定的代码包。如果代码仓库（如公司内部的Gitlab）没有 HTTPS 支持，可以添加此标记。请在确定安全的情况下使用它   -t 下载并安装指定的代码包中的测试源码文件中依赖的代码包   -u 强制使用网络更新已有代码包及其依赖包。默认情况该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包   -v 显示执行的命令    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"b3c470e075960698ecee92434bbaffab","permalink":"https://xueqing.github.io/translation/go-doc/command/get/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/get/","section":"translation","summary":"命令 go get 命令支持的 VCS go get 的参数 命令 go get 命令用来动态获取远程代码包，从代码版本控制系统的远程仓库中检出/更新代码包并对其进行编译和安装 在内部实","tags":["go-command"],"title":"go get","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 安装代码包 安装命令源码文件 go install 的参数  命令  go install 用于编译并安装指定的代码包及它们的依赖包 这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或 .a 包)，第二步会把编译好的结果移到指定目录($GOPATH/bin 或 $GOPATH/pkg)  go install 命令只比 go build 命令多做了一件事，即安装编译后的结果文件到指定目录  go install 命令可以接受所有可用于 go build 命令的参数  安装代码包  go install 命令会把编译后的可执行文件保存在源码文件所在工作区的 bin 目录下，包保存在 pkg 目录 如果 go install 命令后跟的代码包中仅包含库源码文件，那么 go install 命令会把编译后的结果文件保存在源码文件所在工作区的 pkg 目录下。结果文件是对应的代码包归档文件（也叫静态链接库文件，名称以 .a 结尾）  go build 命令对仅包含库源码文件的代码包进行编译时，不会在当前工作区的 src 以及 pkg 目录下产生任何结果文件。结果文件会出于编译目的被生成在临时目录，但并不会使当前工作区目录产生任何变化。只会留下可执行文件。go build -i 可将包安装在独立于构建目标的地方  go install 命令时不后跟任何代码包参数，那么命令将试图编译当前目录所对应的代码包  安装命令源码文件 go install 的参数    参数 描述     -d 只下载不安装   -f 只有在包含 -u 参数时才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用   -fix 在获取源码之后先运行 fix，而后再进行编译和安装   -insecure 允许使用非安全的 scheme（如HTTP）去下载指定的代码包。如果代码仓库（如公司内部的Gitlab）没有 HTTPS 支持，可以添加此标记。请在确定安全的情况下使用它   -t 下载并安装指定的代码包中的测试源码文件中依赖的代码包   -u 强制使用网络更新已有代码包及其依赖包。默认情况该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包   -v 显示执行的命令    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"cdbb2fa885480d7f223a33aba8a08365","permalink":"https://xueqing.github.io/translation/go-doc/command/install/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/install/","section":"translation","summary":"命令 安装代码包 安装命令源码文件 go install 的参数 命令 go install 用于编译并安装指定的代码包及它们的依赖包 这个命令在内部实际上分成了两步操作：第一步是生成结果","tags":["go-command"],"title":"go install","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  用法 -f -m  用法  列举命名包，每行一个。不带参数时判断一个包是否存在工作空间，存在则输出包的导入路径 命令 go list [-f format] [-json] [-m] [list flags] [build flags] [packages]  常用的参数是 -f 和 -json，用于控制输出格式  go list cnet hash ... 通配符用于匹配包的导入路径中的任意子串  go list ... 枚举工作空间的所有包 go list ch3/... 指定子树中的所有包 go list ...xml.. 指定具体主题  go list 获取每个包的完整元数据，提供各种用于对用户或其他工具可访问的格式     标志 描述     -e 以容错模式加载和分析指定的代码包，这样讲不会打印错误信息   -json 把代码包的结构实体用 JSON 样式打印，所有值为对应类型的空值的字段会被忽略   -compiled -   -deps -   -export -   -find -   -test -   -m 列举模块而不是包。使用 -f 指定的是模块模板    -f  使用包模板语法指定可选格式。默认输出等价于 -f '{{ImportPath}}'。-f 的值需要满足 text/template 中定义的语法  {{.S}} 代表根结构体的 S 字段的值。go list 对应的跟结构体就是指定的代码包所对应的的结构体 go list -f {{.GoFiles}} cnet/ctcp go list -e -f {{.Error.Err}} cnet go list -e -f 'The package {{.ImportPath}} is {{if .Incomplete}}incomplete!{{else}}complete.{{end}}' cnet  模板结构如下\ntype Package struct { Dir string // directory containing package sources ImportPath string // import path of package in dir ImportComment string // path in import comment on package statement Name string // package name Doc string // package documentation string Target string // install path Shlib string // the shared library that contains this package (only set when -linkshared) Goroot bool // is this package in the Go root? Standard bool // is this package part of the standard Go library? Stale bool // would 'go install' do anything for this package? StaleReason string // explanation for Stale==true Root string // Go root or Go path dir containing this package ConflictDir string // this directory shadows Dir in $GOPATH BinaryOnly bool // binary-only package (no longer supported) ForTest string // package is only for use in named test Export string // file containing export data (when using -export) Module *Module // info about package's containing module, if any (can be nil) Match []string // command-line patterns matching this package DepOnly bool // package is only a dependency, not explicitly listed // Source files GoFiles []string // .go source files (excluding CgoFiles, TestGoFiles, XTestGoFiles) CgoFiles []string // .go source files that import \u0026quot;C\u0026quot; CompiledGoFiles []string // .go files presented to compiler (when using -compiled) IgnoredGoFiles []string // .go source files ignored due to build constraints CFiles []string // .c source files CXXFiles []string // .cc, .cxx and .cpp source files MFiles []string // .m source files HFiles []string // .h, .hh, .hpp and .hxx source files FFiles []string // .f, .F, .for and .f90 Fortran source files SFiles []string // .s source files SwigFiles []string // .swig files SwigCXXFiles []string // .swigcxx files SysoFiles []string // .syso object files to add to archive TestGoFiles []string // _test.go files in package XTestGoFiles []string // _test.go files outside package // Cgo directives CgoCFLAGS []string // cgo: flags for C compiler CgoCPPFLAGS []string // cgo: flags for C preprocessor CgoCXXFLAGS []string // cgo: flags for C++ compiler CgoFFLAGS []string // cgo: flags for Fortran compiler CgoLDFLAGS []string // cgo: flags for linker CgoPkgConfig []string // cgo: pkg-config names // Dependency information Imports []string // import paths used by this package ImportMap map[string]string // map from source import to ImportPath (identity entries omitted) Deps []string // all (recursively) imported dependencies TestImports []string // imports from TestGoFiles XTestImports []string // imports from XTestGoFiles // Error information Incomplete bool // this package or a dependency has an error Error *PackageError // error loading package DepsErrors []*PackageError // errors loading dependencies } type PackageError struct { ImportStack []string // shortest path from package named on command line to this one Pos string // position of error (if present, file:line:col) Err string // the error itself }  模板函数 join 调用 strings.Join\n go list -f '{{join .Deps \u0026quot; \u0026quot;}}' strconv 输出 strconv 包的依赖过渡关系记录，空格分隔 go list -f '{{.ImportPath}} -\u0026gt; {{join .Imports \u0026quot; \u0026quot;}}' compress/... 输出标准库的 compress 子树中每个包的直接导入记录  模板函数 context 返回构建上下文，定义如下\ntype Context struct { GOARCH string // target architecture GOOS string // target operating system GOROOT string // Go root GOPATH string // Go path CgoEnabled bool // whether cgo can be used UseAllFiles bool // use files regardless of +build lines, file names Compiler string // compiler to assume when computing target paths BuildTags []string // build constraints to match in +build lines ReleaseTags []string // releases the current release is compatible with InstallSuffix string // suffix to use in the name of the install dir }   -m  默认输出模块路径、版本信息，如果有替换，输出替换信息  如果有替换，即 Replace 不为 nil 时，下面的 Dir 设置的是 Replace.Dir  主模块是包含当前目录的模块。活动模块是主模块及其依赖模块。默认显示主模块  all 指定所有活动模块  和 -f 一起使用，指定模块模板 结构体 Module 有一个 String 方法，用于格式化输出行，因此默认输出等价于 -f {{.String}}\ntype Module struct { Path string // module path Version string // module version Versions []string // available module versions (with -versions) Replace *Module // replaced by this module Time *time.Time // time version was created Update *Module // available update, if any (with -u) Main bool // is this the main module? Indirect bool // is this module only an indirect dependency of main module? Dir string // directory holding files for this module, if any GoMod string // path to go.mod file for this module, if any GoVersion string // go version used in module Error *ModuleError // error loading module } type ModuleError struct { Err string // the error itself }  -u 增加了关于可以升级的信息：go list -m -u -json all\n -version 设置 Module.Version 域为模块已知的版本\n 模板函数 module 接收一个字符串参数(必须是一个模块路径或查询)，返回指定的模块对应的 Module 结构体\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"4d3af960cff930fed92677b8dd1d730a","permalink":"https://xueqing.github.io/translation/go-doc/command/list/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/list/","section":"translation","summary":"用法 -f -m 用法 列举命名包，每行一个。不带参数时判断一个包是否存在工作空间，存在则输出包的导入路径 命令 go list [-f format] [-json] [-m] [list flags] [build flags] [packages] 常用的参数是 -f 和 -j","tags":["go-command"],"title":"go list","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  用法 download edit graph init tidy vendor verify why  用法  用于操作模块。注意：所有的 go 命令支持模块 用法：go mod \u0026lt;command\u0026gt; [arguments]     命令 功能     download 下载模块到本地缓存   edit 使用工具或脚本更新 go.mod   graph 打印模块需求图   init 在当前目录初始化一个新模块   tidy 添加缺失模块，删除无用模块   vendor 创建依赖的 vendor 拷贝   verify 验证依赖拥有预期的内容   why 解释为什么需要一个包或者模块    download  用法： go mod download [-json] [modules] 不带模块参数时，默认下载主模块的所有依赖 其他 go 命令会自动下载所需模块，go mod download 主要用于预先填充本地缓存或用户计算 Go 模块代理 默认将错误发生给标准错误。-json 会打印 JSON 对象到标准输出，描述每个下载的模块(或失败)\ntype Module struct { Path string // module path Version string // module version Error string // error loading module Info string // absolute path to cached .info file GoMod string // absolute path to cached .mod file Zip string // absolute path to cached .zip file Dir string // absolute path to cached source root directory Sum string // checksum for path, version (as in go.sum) GoModSum string // checksum for go.mod (as in go.sum) Latest bool // would @latest resolve to this version? }   edit  用法：go mod edit [edit flags] [go.mod] 命令只会读写主模块 go.mod 文件，可在编辑参数指定另外需要编辑的文件 编辑标识包括\n -fmt: 只格式化文件。其他参数默认会格式化。只有在没有其他编辑参数时需要指定 -fmt -module: 修改模块路径(module 行) -require=path@version/-droprequire=path: -exclude=path@version/-dropexclude=path@version: -replace=old[@v]=new[@v]/-dropreplace=old[@v]: -go=version: -print: -json: 以 JSON 格式打印最终的 go.mod 而不是写到 go.mod。JSON 输出符合下面的 Go 类型 命令只会描述 go.mod 文件，间接引用的模块不会包含。需要查看编译所需的所有模块使用 go list -m -json all\ntype Module struct { Path string Version string } type GoMod struct { Module Module Go string Require []Require Exclude []Module Replace []Replace } type Require struct { Path string Version string Indirect bool } type Replace struct { Old Module New Module }   工具可以通过解析 go mod edit -json 的输出获取 go.mod 数据结构，然后通过 go mod edit 修改\n  graph  用法：go mod graph 功能：以文本格式打印模块需求图(使用 replaced 模块)。每一行输出包含模块及其一个依赖  init  用法：go mod init [module] 功能：在当前目录初始化并写一个新的 go.mod，实际上是以当前目录为根创建一个新模块。go.mod 一定不能已经存在。可能的话，命令会从导入注释或版本控制配置(git 等)猜测模块路径。要 覆盖猜测，可以提供模块路径参数  tidy  用法：go mod tidy [-v] 功能：确保 go.mod 和模块的源码匹配。拉取需要的缺失模块，删除无用模块。同时修改 go.sum -v 会输出删除模块信息到标准错误  vendor  用法：go mod vendor [-v] 功能：重置主模块的 vendor 目录一包含编译和测试主模块所有包所需的包。目录不包含 vendored 包的测试代码 -v 打印 vendored 模块和包的名称到标准错误  verify  用法：go mod verify 功能：检查当前模块的依赖在下载之后不曾被修改，该依赖存储在一个本地下载的源码缓存。如果所有模块未被修改，输出 all modules verified.。否则打印被修改的模块，并导致 go mod 以非 0 状态码返回  why  用法：go mod why [-m] [-vendor] packages... 功能：显示主模块到每个列举包的最短导入路径 -m 将参数视为一系列模块，并为模块的每个包找到一个路径  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"2febc55e5dc0e9aa93adf5a71107750e","permalink":"https://xueqing.github.io/translation/go-doc/command/mod/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/mod/","section":"translation","summary":"用法 download edit graph init tidy vendor verify why 用法 用于操作模块。注意：所有的 go 命令支持模块 用法：go mod \u0026lt;command\u0026gt; [arguments] 命令 功能 download 下载模块到本地缓存 edit 使用工具或脚本更新 go.mod graph 打印模块","tags":["go-command"],"title":"go mod","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 构建并运行程序  对于简单的程序，可以使用 go run program.go 直接构建并允许程序 go run 不会再运行目录生成任何文件，可执行文件被放在临时文件中执行，工作目录被设置为当前目录 go run 可以跟参数，第一个不是以 .go 结尾的参数会作为可执行程序的参数列表的开始  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"bd57bbe073bd71deb3a1bb32299cc649","permalink":"https://xueqing.github.io/translation/go-doc/command/run/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/run/","section":"translation","summary":"构建并运行程序 对于简单的程序，可以使用 go run program.go 直接构建并允许程序 go run 不会再运行目录生成任何文件，可执行文件被放在临时文件中执行，工作目录被设置","tags":["go-command"],"title":"go run","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"用法：go test [build/test flags] [packages] [build/test flags \u0026amp; test binary flags]\ngo test 自动测试通过导入路径命名的包。命令按下面的格式打印测试结果的概要：\nok archive/tar 0.011s FAIL archive/zip 0.022s ok compress/gzip 0.033s ...  之后是每个失败的包的详细输出。\ngo test 重新编译每个包以及所有名字匹配 “*_test.go” 的文件。这些额外的文件可以包含测试函数，基准测试函数和示例函数。查看 go help testfunc 获取更多信息。每个列举的包执行一个单独的二进制测试。忽视以 “_” (包括 “_test.go”) 或 “.” 开始的文件。\n声明了后缀为 “_test” 的包的测试文件会作为一个单独的包被编译，然后被主二进制测试链接和运行。\ngo tool 会忽视 “testdata” 命名的目录，使得可以包含测试所需的辅助数据。\n作为编译一个二进制测试的一部分，go test 在包及其测试源文件上运行 go vet 以识别显著的问题。如果 go vet 发现任何问题，go test 报告这些问题并且不再运行二进制测试。只使用了默认 go vet 检查的高可信度的子集。这些子集包括：atomic、bool、buildtags、nilfunc 和 printf。你可以通过 go doc cmd/vet 查看他们的文档以及其他的 vet 测试。使用 -vet=off 标识禁用 go vet 的运行。\n即使测试打印输出到它自己的标准错误，所有的测试输出和总结行会被打印到 go 命令的标准输出。(保留 go 命令的标准错误用于打印编译这些测试的错误。)\ngo test 运行包括两种模式：\n 叫做本地目录模式。当调用 go test 不带包参数时发生(如 go test 或 go test -v)。在这种模式，go test 在当前目录找到的包源文件和测试文件，然后运行生成的二进制测试。在这种模式，禁用缓存(后面会讨论)。包测试结束之后，go test 打印一个总结行显示测试状态(“ok” 或 “FAIL”)、包名和用时。 叫做包列表模式。当调用 go test 携带显式的包参数时发送(如 go test math、go test ./... 甚至 go test ..)。在这种模式，go test 编译和测试命令行列举的每个包。如果一个包测试通过，go test 只打印最后的 “ok” 总结行。如果一个包测试失败，go test 打印完整的测试输出。如果调用时携带 -bench 或 -v 标识，go test 也会为通过测试包打印完整的输出，以显示请求的基准测试结果或错误日志。当所有列举的包测试结束且打印了他们的输出之后，如果任何一个包测试失败，go test 打印一个最终的 “FAIL” 状态。  只有在包列表模式，go test 会缓存成功的包测试结果以避免不必要的重复运行测试。当一个测试的结果可从缓存中恢复时，go test 会再次显示之前的输出而不是再次运行二进制测试。这时，go test 打印 “(cached)” 取代总结行中的用时。\n缓存匹配的规则是 go 命令调用相同的二进制测试，且命令行标识完全来自受限的可缓存的测试标识集合，被定义为 -cpu、-list、-parallel、-run、-short 和 -v。如果允许一次 go test 包含任何这个集合之外的测试标识或非测试标识，结果都是不可缓存的。要禁用测试缓存，使用除了可缓存的标识以外的任意的测试标识或参数。惯用的显式禁用测试缓存的方法是使用 -count=1。打开在包的源根(通常是 $GOPATH)或者查询环境变量的测试只有在这些文件和环境变量不改变时才会与之后的运行匹配。一个缓存的测试结果被视为立刻执行，因此无论如何设置 -timeout，一个成功的包测试结果会被缓存且重用。\n除了编译标志，go test 专属的标识包括：\n args：传递命令行的剩余部分(-args 之后的所有)给二进制测试，不解释且不修改。因为这个标识使用了命令行的剩余部分，包列表(如果有)必须出现在这个标识之前。 -c：编译二进制测试为 pkg.test 但不要运行(pkg 是包导入路径的最后一个元素)。文件名可以使用 -o 标识修改。 -exec xprog：使用 xprog 运行二进制测试。这个行为和 go run 相同。查看 go run 获取更多信息。 -i：安装测试的依赖包。不要运行测试。 -json：将测试输出转化为 JSON 用于自动处理。查看 go doc test2json 获取编码信息。 -o file：编译二进制测试到指定名称的文件。测试仍然运行(除非指定 -c 或 -i)。  二进制测试也接收控制测试执行的标识；这些标识也可被 go test 访问。查看 go help testflag 获取更多信息。\n需要更多关于编译标识，查看 go help build。需要更多关于指定包的，查看 go help package。\n查看其他：go build、go vet\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e2d42fb61ceb1fcc90383fb94bf4a788","permalink":"https://xueqing.github.io/translation/go-doc/command/test_package/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/test_package/","section":"translation","summary":"用法：go test [build/test flags] [packages] [build/test flags \u0026amp; test binary flags] go test 自动测试通过导入路径命名的包。命令按下面的格式打印测试结果的概要： ok archive/tar 0.011s FAIL archive/zip 0.022s ok compress/gzip 0.033s ... 之后是每个失败的包的","tags":["go-command"],"title":"go test","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"当使用模块时，不再使用 GOPATH 来解决导入。但是，它仍被用于存储下载的源码(在 GOPATH/pkg/mod)和编译好的命令(在 GOPATH/bin)。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"69f52d251a5d0fb637cf0de1201c8fa5","permalink":"https://xueqing.github.io/translation/go-doc/command/gopath_and_module/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/gopath_and_module/","section":"translation","summary":"当使用模块时，不再使用 GOPATH 来解决导入。但是，它仍被用于存储下载的源码(在 GOPATH/pkg/mod)和编译好的命令(在 GOPATH/bin)","tags":["go-command"],"title":"GOPATH 和模块","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"Go 路径用于解决导入语句，它通过 go/build 包实现，并记录在 go/build 包。\nGOPATH 环境变量列举了寻找 Go 代码的位置。在 Unix 上，其值是一个冒号分隔的字符串。在 Windows 上，其值是一个分号分隔的字符串。在 Plan 9 上，其值是一个列表。\n如果环境变量未被设置，GOPATH 默认是用户主目录下的一个 “go” 子目录(Unix 下是 $HOME/go，Windows 下是 %USERPROFILE%\\go)，除非那个目录存在一个 Go 发行版本。运行 go env GOPATH 查看当前的 GOPATH。\n查看 SettingGOPATH 设置一个自定义的 GOPATH。\nGOPATH 下的每个目录必须有一个规定的结构：\n src 目录持有源码。src 下的目录确定了导入路径或可执行文件名字。 pkg 目录持有安装的包对象。在 Go 树中，每个目标操作系统和架构对有其自己的包的子目录(pkg/GOOS_ARCH). 如果 DIR 是GOPATH 下的一个目录，包的源码在 DIR/src/foo/bar，那么包可以导出为 “foo/bar”，且将其编译文件安装到 “DIR/pkg/GOOS_GOARCH/foo/bar.a”。 bin 目录持有编译的命令。每个命令命名为它的源码目录，但是只有最后一个元素，而不是整个路径。也就是说，一个命令的源码在 DIR/src/foo/quux，那么它被安装到 DIR/bin/quux。这个 “foo/” 前缀被除去以便你可以增加 DIR/bin 到你的 PATH 来获取安装的命令。如果设置了 GOBIN 环境变量，命令被安装到 GOBIN 命名的目录而不是 DIR/bin。GOBIN 必须是一个绝对路径。  这里是一个目录格式示例：\nGOPATH=/home/user/go /home/user/go/ src/ foo/ bar/ (包 bar 中的 go 代码) x.go quux/ (包 main 中的 go 代码) y.go bin/ quux (安装的命令) pkg/ linux_amd64/ foo/ bar.a (安装的包对象)  Go 搜索 GOPATH 列举的每个目录来查找源码，但是新包总是下载到列表中的第一个目录。\n查看如何编写 Go 代码的例子。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ae041917790b4f4539f9719057786175","permalink":"https://xueqing.github.io/translation/go-doc/command/gopath_env_var/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/gopath_env_var/","section":"translation","summary":"Go 路径用于解决导入语句，它通过 go/build 包实现，并记录在 go/build 包。 GOPATH 环境变量列举了寻找 Go 代码的位置。在 Unix 上，其值是一个冒号分隔的字符串。在 Windows 上，其值是一","tags":["go-command"],"title":"GOPATH 环境变量","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"class hash_map { hash_map() {set_load(); v.reserve(max_load*b.size());} // 表“太满”(如 75% 满)时性能会恶化 void set_load(float m=0.7, float g=1.6) {max_load=m; grow=g;} // 查找 mapped_type\u0026amp; operator[] (const key_type\u0026amp; k) { // 先计算散列值，查找表索引 size_type i = hash(k) % b.size(); // 找到之后遍历散列链匹配 for(Entry* p=b[i]; p; p=p-\u0026gt;next) { if(eq(k, p-\u0026gt;key)) { // 找到则插入表 if(p-\u0026gt;erased) { p-\u0026gt;erased = false; no_of_erased--; return p-\u0026gt;val = default_value; } return p-\u0026gt;val; } } // 找不到则插入散列表 // 若表已经“满”了，增大存储 if(size_tye(b.size() * max_load) \u0026lt;= v.size()) { resize(b.size() * grow); return operator[](k); } // 插入元素 v.push_back(Entry(k, default_value, b[i])); b[i] = \u0026amp;v.back(); return b[i]-\u0026gt;val; } // 调整散列表大小 void resize(size_type s) { // 计算 erased 元素数目，同时从存储中删除对应元素 size_type i = v.size() while(no_of_erased) { if(v[--i].erased) { v.erase(\u0026amp;v[i]); --no_of_erased; } } // 如果 b.size() \u0026gt;= s，返回 if(s \u0026lt;= b.size()) return; // 如果 b.size() \u0026lt; s，增大 b，b 全部清 0，重新计算 b.resize(s); fill(b.begin(), b.end(), 0); // 重新分配底层存储 v.reserve(s * max_load); // 重新计算元素散列值 for(size_type i=0; i\u0026lt;v.size(); i++) { size_type ii = hash(v[i].key) % b.size(); v[i].next = b[ii]; b[ii] = \u0026amp;v[i]; } } private: struct Entry { key_type key; mapped_type val; bool erased; Entry* next; // 散列链 }; vector\u0026lt;Entry\u0026gt; v; // 实际存储 vector\u0026lt;Entry*\u0026gt; b; // 散列表，保存实际存储的指针 float max_load; // 保持 v.size() \u0026lt;= b.size()*max_load float grow; // 接近太满时自动改变大小 resize(bucket_count() * grow) size_type no_of_erased; // erased 元素项的数目 Hasher hash; // 散列函数 key_equal eq; // 相等判断 const T default_value; // entry 默认值 };  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"72cea9697f7a972572e2d1f3a2428fbf","permalink":"https://xueqing.github.io/blog/cplusplus/hash_map/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/hash_map/","section":"blog","summary":"class hash_map { hash_map() {set_load(); v.reserve(max_load*b.size());} // 表“太满”(如 75% 满)时性能会恶化 void set_load(float m=0.7, float g=1.6) {max_load=m; grow=g;} // 查找 mapped_type\u0026amp; operator[] (const key_type\u0026amp; k) { // 先计算散列值，查找表索引 size_type i = hash(k) % b.size(); // 找到之后遍历散列链匹配","tags":["c++","STL"],"title":"hash map","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Images Remember the picture generator you wrote earlier? Let's write another one, but this time it will return an implementation of image.Image instead of a slice of data. Define your own Image type, implement the necessary methods, and call pic.ShowImage. Bounds should return a image.Rectangle, like image.Rect(0, 0, w, h). ColorModel should return color.RGBAModel. At should return a color; the value v in the last picture generator corresponds to color.RGBA{v, v, 255, 255} in this one. */ package main import ( \u0026quot;image\u0026quot; \u0026quot;image/color\u0026quot; \u0026quot;math\u0026quot; \u0026quot;golang.org/x/tour/pic\u0026quot; ) /* type Image interface { // ColorModel returns the Image's color model. ColorModel() color.Model // Bounds returns the domain for which At can return non-zero color. // The bounds do not necessarily contain the point (0, 0). Bounds() Rectangle // At returns the color of the pixel at (x, y). // At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid. // At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one. At(x, y int) color.Color } */ type myImage struct{} func (img myImage) ColorModel() color.Model { return color.NRGBAModel } func (img myImage) Bounds() image.Rectangle { return image.Rect(0, 0, 100, 100) } func (img myImage) At(x, y int) color.Color { val := float64(x ^ y) v := uint8(math.Abs(val)) return color.RGBA{v, v, 255, 255} } func main() { m := myImage{} pic.ShowImage(m) }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0fbedeec9b95bf2620a9075e37cfc5db","permalink":"https://xueqing.github.io/translation/go-doc/gotour/images/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/images/","section":"translation","summary":"/* Exercise: Images Remember the picture generator you wrote earlier? Let's write another one, but this time it will return an implementation of image.Image instead of a slice of data. Define your own Image type, implement the necessary methods, and call pic.ShowImage. Bounds should return a image.Rectangle, like image.Rect(0, 0, w, h). ColorModel should return color.RGBAModel. At should return a color; the value v in the last picture generator corresponds to color.","tags":["go-tour"],"title":"Images","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  概述 索引  参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;testing/iotest\u0026quot;\n概述 iotest 包实现了主要用于 testing 的 Reader 和 Writer。\n索引 参考\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e1de4b2b5be747d2165e5a3ff7ea2bf6","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/iotest/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/iotest/","section":"translation","summary":"概述 索引 参考 Golang 官网文档 学习。 导入语句：import \u0026quot;testing/iotest\u0026quot; 概述 iotest 包实现了主要用于 testing 的 Reader 和 Writer。 索引 参考","tags":["golang-pkg"],"title":"iotest 包","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  问题 解决方法 返回类型 \u0026ldquo;捕获\u0026rdquo;变量 使用 lambda 作为变量 参考  问题  C++ 包含一些有用的通用函数，比如 std::for_each 和 std::transform，用起来很方便。但是使用比较复杂，尤其是使用的仿函数(functor)是唯一的。\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; namespace { struct f { void operator()(int i) { std::cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; std::endl; } }; } void func(std::vector\u0026lt;int\u0026gt;\u0026amp; v) { f f; std::for_each(v.begin(), v.end(), f); } int main() { int arr[] = {1,10,9}; std::vector\u0026lt;int\u0026gt; v(arr,arr+3); func(v); return 0; }  如果只使用上述 f 一次，看起来写一个完整的类来完成一些微小的事情是过犹不及的。\n  解决方法  C++11 介绍了 lambda，支持写一个内联、匿名仿函数来替换 struct f。对于简单的例子代码会更易读，且易于维护 形式定义 []() {}\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; void func(std::vector\u0026lt;int\u0026gt;\u0026amp; v) { std::for_each(v.begin(), v.end(), [](int i) {std::cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; std::endl;}); } int main() { int arr[] = {1,10,9}; std::vector\u0026lt;int\u0026gt; v(arr,arr+3); func(v); return 0; }   返回类型  简单的例子中，lambda 的返回类型是编译器推断出来的\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; void func(std::vector\u0026lt;double\u0026gt; \u0026amp;v) { std::transform(v.begin(), v.end(), v.begin(), [](double d) {return d \u0026lt; 0.00001 ? 0 : d;} ); std::for_each(v.begin(), v.end(), [](double d) {std::cout \u0026lt;\u0026lt; d \u0026lt;\u0026lt; std::endl;}); } int main() { double arr[] = {0.000001,1.0,0.000009}; std::vector\u0026lt;double\u0026gt; v(arr,arr+3); func(v); return 0; }  但是当实现更加复杂的 lambda 时，会遇到一些情况，编译器不能推断返回类型。此时可以显式地指明lambda 函数的返回值，使用 -\u0026gt; T\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; void func(std::vector\u0026lt;double\u0026gt; \u0026amp;v) { std::transform(v.begin(), v.end(), v.begin(), [](double d) -\u0026gt; double { if(d \u0026lt; 0.00001) return 0; else return d; } ); std::for_each(v.begin(), v.end(), [](double d) {std::cout \u0026lt;\u0026lt; d \u0026lt;\u0026lt; std::endl;}); } int main() { double arr[] = {0.000001,1.0,0.000009}; std::vector\u0026lt;double\u0026gt; v(arr,arr+3); func(v); return 0; }   \u0026ldquo;捕获\u0026rdquo;变量  也可以使用 lambda 内部的变量。如果想要是有其他变量可以使用捕获语句 []\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; void func(std::vector\u0026lt;double\u0026gt; \u0026amp;v, const double \u0026amp;val) { std::transform(v.begin(), v.end(), v.begin(), [val](double d) -\u0026gt; double { if(d \u0026lt; val) return 0; else return d; } ); std::for_each(v.begin(), v.end(), [](double d) {std::cout \u0026lt;\u0026lt; d \u0026lt;\u0026lt; std::endl;}); } int main() { double arr[] = {0.000001,1.0,0.000009}; std::vector\u0026lt;double\u0026gt; v(arr,arr+3); double val = 0.000005; func(v, val); return 0; }  可以捕获引用和值，分别使用 \u0026amp; 和 =\n [\u0026amp;val] 捕获引用 [\u0026amp;] 捕获当前范围使用的所有变量的引用 [=] 捕获当前范围使用的所有变量的值 [\u0026amp;, val] 类似于 [\u0026amp;]，但是 val 捕获值 [=, \u0026amp;val] 类似于 [=]，但是 val 捕获引用  生成的操作符 () 默认是 const，捕获默认也是 const，使得每次相同的输入产生相同的结果\n 使用 []() mutable -\u0026gt; T {}，允许改变以值捕获的值   使用 lambda 作为变量  可以使用 functional 头文件  std::function\u0026lt;double(int, bool)\u0026gt; f = [](int a, bool b) -\u0026gt; double {//...} 通常可让编译器推断类型 auto f = [](int a, bool b) -\u0026gt; double {//...}   参考  What is a lambda expression in C++11?  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"eabf3c57f51f6ed7f98f215016b1aedf","permalink":"https://xueqing.github.io/blog/cplusplus/lambda/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/lambda/","section":"blog","summary":"问题 解决方法 返回类型 \u0026ldquo;捕获\u0026rdquo;变量 使用 lambda 作为变量 参考 问题 C++ 包含一些有用的通用函数，比如 std::for_each 和 std::transform","tags":["c++"],"title":"lambda 表达式","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: Loops and Functions As a way to play with functions and loops, let\u0026rsquo;s implement a square root function: given a number x, we want to find the number z for which z² is most nearly x.\nComputers typically compute the square root of x using a loop. Starting with some guess z, we can adjust z based on how close z² is to x, producing a better guess:\nz -= (z*z - x) / (2*z) Repeating this adjustment makes the guess better and better until we reach an answer that is as close to the actual square root as can be.\nImplement this in the func Sqrt provided. A decent starting guess for z is 1, no matter what the input. To begin with, repeat the calculation 10 times and print each z along the way. See how close you get to the answer for various values of x (1, 2, 3, \u0026hellip;) and how quickly the guess improves.\nHint: To declare and initialize a floating point value, give it floating point syntax or use a conversion:\nz := 1.0 z := float64(1) Next, change the loop condition to stop once the value has stopped changing (or only changes by a very small amount). See if that\u0026rsquo;s more or fewer than 10 iterations. Try other initial guesses for z, like x, or x/2. How close are your function\u0026rsquo;s results to the math.Sqrt in the standard library?\n(Note: If you are interested in the details of the algorithm, the z² − x above is how far away z² is from where it needs to be (x), and the division by 2z is the derivative of z², to scale how much we adjust z by how quickly z² is changing. This general approach is called Newton\u0026rsquo;s method. It works well for many functions but especially well for square root.) */\npackage main\nimport ( \u0026ldquo;fmt\u0026rdquo; \u0026ldquo;math\u0026rdquo; )\nfunc mySqrt(x float64) float64 { // z := x / 2 z := x tmp := 0.0 for math.Abs(z-tmp) \u0026gt;= 0.000000000001 { tmp = z z -= (z*z - x) / (2 * z) fmt.Println(z) } return z }\nfunc main() { fmt.Println(mySqrt(2)) fmt.Println(math.Sqrt(2)) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0f1e68fdc4f4002282f28d6379fda910","permalink":"https://xueqing.github.io/translation/go-doc/gotour/loops_and_functions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/loops_and_functions/","section":"translation","summary":"```go /* Exercise: Loops and Functions As a way to play with functions and loops, let\u0026rsquo;s implement a square root function: given a number x, we want to find the number z for which z² is most nearly x.\nComputers typically compute the square root of x using a loop. Starting with some guess z, we can adjust z based on how close z² is to x, producing a better guess:","tags":["go-tour"],"title":"Loops and Functions","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: Maps Implement WordCount. It should return a map of the counts of each “word” in the string s. The wc.Test function runs a test suite against the provided function and prints success or failure.\nYou might find strings.Fields helpful. */\npackage main\nimport ( \u0026ldquo;strings\u0026rdquo;\n\u0026quot;golang.org/x/tour/wc\u0026quot;  )\nfunc wordCount(s string) map[string]int { m := make(map[string]int) var ss []string ss = strings.Fields(s) for i := 0; i \u0026lt; len(ss); i++ { m[ss[i]]++ }\nreturn m  }\nfunc main() { wc.Test(wordCount) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"df7f056b21e2097422b7591ec7fb9aaf","permalink":"https://xueqing.github.io/translation/go-doc/gotour/maps/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/maps/","section":"translation","summary":"```go /* Exercise: Maps Implement WordCount. It should return a map of the counts of each “word” in the string s. The wc.Test function runs a test suite against the provided function and prints success or failure.\nYou might find strings.Fields helpful. */\npackage main\nimport ( \u0026ldquo;strings\u0026rdquo;\n\u0026quot;golang.org/x/tour/wc\u0026quot;  )\nfunc wordCount(s string) map[string]int { m := make(map[string]int) var ss []string ss = strings.Fields(s) for i := 0; i \u0026lt; len(ss); i++ { m[ss[i]]++ }","tags":["go-tour"],"title":"Maps","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  MD001 - Heading levels should only increment by one level at a time MD002 - First heading should be a top level heading MD003 - Heading style MD004 - Unordered list style MD005 - Inconsistent indentation for list items at the same level MD006 - Consider starting bulleted lists at the beginning of the line MD007 - Unordered list indentation MD009 - Trailing spaces MD010 - Hard tabs MD011 - Reversed link syntax MD012 - Multiple consecutive blank lines MD013 - Line length MD014 - Dollar signs used before commands without showing output MD018 - No space after hash on atx style heading MD019 - Multiple spaces after hash on atx style heading MD020 - No space inside hashes on closed atx style heading MD021 - Multiple spaces inside hashes on closed atx style heading MD022 - Headings should be surrounded by blank lines MD023 - Headings must start at the beginning of the line MD024 - Multiple headings with the same content MD025 - Multiple top level headings in the same document MD026 - Trailing punctuation in heading MD027 - Multiple spaces after blockquote symbol MD028 - Blank line inside blockquote MD029 - Ordered list item prefix MD030 - Spaces after list markers MD031 - Fenced code blocks should be surrounded by blank lines MD032 - Lists should be surrounded by blank lines MD033 - Inline HTML MD034 - Bare URL used MD035 - Horizontal rule style MD036 - Emphasis used instead of a heading MD037 - Spaces inside emphasis markers MD038 - Spaces inside code span elements MD039 - Spaces inside link text MD040 - Fenced code blocks should have a language specified MD041 - First line in file should be a top level heading MD042 - No empty links MD043 - Required heading structure MD044 - Proper names should have the correct capitalization MD045 - Images should have alternate text (alt text)  This document contains a description of all rules, what they are checking for, as well as an examples of documents that break the rule and corrected versions of the examples.\nMD001 - Heading levels should only increment by one level at a time Tags: headings, headers\nAliases: heading-increment, header-increment\nThis rule is triggered when you skip heading levels in a markdown document, for example:\n# Heading 1 ### Heading 3 We skipped out a 2nd level heading in this document  When using multiple heading levels, nested headings should increase by only one level at a time:\n# Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ## Another Heading 2 ### Another Heading 3  MD002 - First heading should be a top level heading Tags: headings, headers\nAliases: first-heading-h1, first-header-h1\nParameters: level (number; default 1)\n Note: MD002 has been deprecated and is disabled by default. MD041/first-line-heading offers an improved implementation.\n This rule is intended to ensure document headings start at the top level and is triggered when the first heading in the document isn\u0026rsquo;t an h1 heading:\n## This isn't an H1 heading ### Another heading  The first heading in the document should be an h1 heading:\n# Start with an H1 heading ## Then use an H2 for subsections  Note: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally.\nMD003 - Heading style Tags: headings, headers\nAliases: heading-style, header-style\nParameters: style (\u0026ldquo;consistent\u0026rdquo;, \u0026ldquo;atx\u0026rdquo;, \u0026ldquo;atx_closed\u0026rdquo;, \u0026ldquo;setext\u0026rdquo;, \u0026ldquo;setext_with_atx\u0026rdquo;, \u0026ldquo;setext_with_atx_closed\u0026rdquo;; default \u0026ldquo;consistent\u0026rdquo;)\nThis rule is triggered when different heading styles (atx, setext, and \u0026lsquo;closed\u0026rsquo; atx) are used in the same document:\n# ATX style H1 ## Closed ATX style H2 ## Setext style H1 ===============  Be consistent with the style of heading used in a document:\n# ATX style H1 ## ATX style H2  The setext_with_atx and setext_with_atx_closed doc styles allow atx-style headings of level 3 or more in documents with setext style headings:\nSetext style H1 =============== Setext style H2 --------------- ### ATX style H3  Note: the configured heading style can be a specific style to use (atx, atx_closed, setext, setext_with_atx, setext_with_atx_closed), or simply require that the usage be consistent within the document.\nMD004 - Unordered list style Tags: bullet, ul\nAliases: ul-style\nParameters: style (\u0026ldquo;consistent\u0026rdquo;, \u0026ldquo;asterisk\u0026rdquo;, \u0026ldquo;plus\u0026rdquo;, \u0026ldquo;dash\u0026rdquo;, \u0026ldquo;sublist\u0026rdquo;; default \u0026ldquo;consistent\u0026rdquo;)\nThis rule is triggered when the symbols used in the document for unordered list items do not match the configured unordered list style:\n* Item 1 + Item 2 - Item 3  To fix this issue, use the configured style for list items throughout the document:\n* Item 1 * Item 2 * Item 3  The configured list style can be a specific symbol to use (asterisk, plus, dash), can require that usage be consistent within the document, or can require that each sublist have a consistent symbol that is different from its parent list.\nFor example, the following is valid for the sublist style because the outer-most indent uses asterisk, the middle indent uses plus, and the inner-most indent uses dash:\n* Item 1 + Item 2 - Item 3 + Item 4 * Item 4 + Item 5  MD005 - Inconsistent indentation for list items at the same level Tags: bullet, ul, indentation\nAliases: list-indent\nThis rule is triggered when list items are parsed as being at the same level, but don\u0026rsquo;t have the same indentation:\n* Item 1 * Nested Item 1 * Nested Item 2 * A misaligned item  Usually this rule will be triggered because of a typo. Correct the indentation for the list to fix it:\n* Item 1 * Nested Item 1 * Nested Item 2 * Nested Item 3  Sequentially-ordered list markers are usually left-aligned such that all items have the same starting column:\n... 8. Item 9. Item 10. Item 11. Item ...  This rule also supports right-alignment of list markers such that all items have the same ending column:\n... 8. Item 9. Item 10. Item 11. Item ...  MD006 - Consider starting bulleted lists at the beginning of the line Tags: bullet, ul, indentation\nAliases: ul-start-left\nThis rule is triggered when top level lists don\u0026rsquo;t start at the beginning of a line:\nSome text * List item * List item  To fix, ensure that top level list items are not indented:\nSome test * List item * List item  Rationale: Starting lists at the beginning of the line means that nested list items can all be indented by the same amount when an editor\u0026rsquo;s indent function or the tab key is used to indent. Starting a list 1 space in means that the indent of the first nested list is less than the indent of the second level (3 characters if you use 4 space tabs, or 1 character if you use 2 space tabs).\nNote: This rule is triggered for the following scenario because the unordered sublist is not recognized as such by the parser. Not being nested 3 characters as required by the outer ordered list, it creates a top-level unordered list instead.\n1. List item - List item - List item 1. List item  MD007 - Unordered list indentation Tags: bullet, ul, indentation\nAliases: ul-indent\nParameters: indent (number; default 2)\nThis rule is triggered when list items are not indented by the configured number of spaces (default: 2).\nExample:\n* List item * Nested list item indented by 3 spaces  Corrected Example:\n* List item * Nested list item indented by 2 spaces  Rationale (2 space indent): indenting by 2 spaces allows the content of a nested list to be in line with the start of the content of the parent list when a single space is used after the list marker.\nRationale (4 space indent): Same indent as code blocks, simpler for editors to implement. See https://www.cirosantilli.com/markdown-style-guide/#indentation-of-content-inside-lists for more information.\nIn addition, this is a compatibility issue with multi-markdown parsers, which require a 4 space indents. See http://support.markedapp.com/discussions/problems/21-sub-lists-not-indenting for a description of the problem.\nNote: This rule applies to a sublist only if its parent lists are all also unordered (otherwise, extra indentation of ordered lists interferes with the rule).\nMD009 - Trailing spaces Tags: whitespace\nAliases: no-trailing-spaces\nParameters: br_spaces, list_item_empty_lines (number; default 2, boolean; default false)\nThis rule is triggered on any lines that end with unexpected whitespace. To fix this, remove the trailing space from the end of the line.\nThe br_spaces parameter allows an exception to this rule for a specific number of trailing spaces, typically used to insert an explicit line break. The default value allows 2 spaces to indicate a hard break (\u0026lt;br\u0026gt; element).\nNote: You must set br_spaces to a value \u0026gt;= 2 for this parameter to take effect. Setting br_spaces to 1 behaves the same as 0, disallowing any trailing spaces.\nUsing spaces to indent blank lines inside a list item is usually not necessary, but some parsers require it. Set the list_item_empty_lines parameter to true to allow this:\n- list item text [2 spaces] list item text  MD010 - Hard tabs Tags: whitespace, hard_tab\nAliases: no-hard-tabs\nParameters: code_blocks (boolean; default true)\nThis rule is triggered by any lines that contain hard tab characters instead of using spaces for indentation. To fix this, replace any hard tab characters with spaces instead.\nExample:\nSome text * hard tab character used to indent the list item  Corrected example:\nSome text * Spaces used to indent the list item instead  You have the option to exclude this rule for code blocks. To do so, set the code_blocks parameter to false. Code blocks are included by default since handling of tabs by tools is often inconsistent (ex: using 4 vs. 8 spaces).\nMD011 - Reversed link syntax Tags: links\nAliases: no-reversed-links\nThis rule is triggered when text that appears to be a link is encountered, but where the syntax appears to have been reversed (the [] and () are reversed):\n(Incorrect link syntax)[https://www.example.com/]  To fix this, swap the [] and () around:\n[Correct link syntax](https://www.example.com/)  Note: Markdown Extra-style footnotes do not trigger this rule:\nFor (example)[^1]  MD012 - Multiple consecutive blank lines Tags: whitespace, blank_lines\nAliases: no-multiple-blanks\nParameters: maximum (number; default 1)\nThis rule is triggered when there are multiple consecutive blank lines in the document:\nSome text here Some more text here  To fix this, delete the offending lines:\nSome text here Some more text here  Note: this rule will not be triggered if there are multiple consecutive blank lines inside code blocks.\nNote: The maximum parameter can be used to configure the maximum number of consecutive blank lines.\nMD013 - Line length Tags: line_length\nAliases: line-length\nParameters: line_length, heading_line_length, code_blocks, tables, headings, headers (number; default 80, boolean; default true)\n If headings is not provided, headers (deprecated) will be used.\n This rule is triggered when there are lines that are longer than the configured line_length (default: 80 characters). To fix this, split the line up into multiple lines. To set a different maximum length for headings, use heading_line_length.\nThis rule has an exception where there is no whitespace beyond the configured line length. This allows you to still include items such as long URLs without being forced to break them in the middle.\nYou have the option to exclude this rule for code blocks, tables, or headings. To do so, set the code_blocks, tables, or headings parameter(s) to false.\nCode blocks are included in this rule by default since it is often a requirement for document readability, and tentatively compatible with code rules. Still, some languages do not lend themselves to short lines.\nMD014 - Dollar signs used before commands without showing output Tags: code\nAliases: commands-show-output\nThis rule is triggered when there are code blocks showing shell commands to be typed, and the shell commands are preceded by dollar signs ($):\n$ ls $ cat foo $ less bar  The dollar signs are unnecessary in the above situation, and should not be included:\nls cat foo less bar  However, an exception is made when there is a need to distinguish between typed commands and command output, as in the following example:\n$ ls foo bar $ cat foo Hello world $ cat bar baz  Rationale: it is easier to copy and paste and less noisy if the dollar signs are omitted when they are not needed. See https://www.cirosantilli.com/markdown-style-guide/#dollar-signs-in-shell-code for more information.\nMD018 - No space after hash on atx style heading Tags: headings, headers, atx, spaces\nAliases: no-missing-space-atx\nThis rule is triggered when spaces are missing after the hash characters in an atx style heading:\n#Heading 1 ##Heading 2  To fix this, separate the heading text from the hash character by a single space:\n# Heading 1 ## Heading 2  MD019 - Multiple spaces after hash on atx style heading Tags: headings, headers, atx, spaces\nAliases: no-multiple-space-atx\nThis rule is triggered when more than one space is used to separate the heading text from the hash characters in an atx style heading:\n# Heading 1 ## Heading 2  To fix this, separate the heading text from the hash character by a single space:\n# Heading 1 ## Heading 2  MD020 - No space inside hashes on closed atx style heading Tags: headings, headers, atx_closed, spaces\nAliases: no-missing-space-closed-atx\nThis rule is triggered when spaces are missing inside the hash characters in a closed atx style heading:\n#Heading 1# ##Heading 2##  To fix this, separate the heading text from the hash character by a single space:\n# Heading 1 # ## Heading 2 ##  Note: this rule will fire if either side of the heading is missing spaces.\nMD021 - Multiple spaces inside hashes on closed atx style heading Tags: headings, headers, atx_closed, spaces\nAliases: no-multiple-space-closed-atx\nThis rule is triggered when more than one space is used to separate the heading text from the hash characters in a closed atx style heading:\n# Heading 1 # ## Heading 2 ##  To fix this, separate the heading text from the hash character by a single space:\n# Heading 1 # ## Heading 2 ##  Note: this rule will fire if either side of the heading contains multiple spaces.\nMD022 - Headings should be surrounded by blank lines Tags: headings, headers, blank_lines\nAliases: blanks-around-headings, blanks-around-headers\nParameters: lines_above, lines_below (number; default 1)\nThis rule is triggered when headings (any style) are either not preceded or not followed by at least one blank line:\n# Heading 1 Some text Some more text ## Heading 2  To fix this, ensure that all headings have a blank line both before and after (except where the heading is at the beginning or end of the document):\n# Heading 1 Some text Some more text ## Heading 2  Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse headings that don\u0026rsquo;t have a blank line before, and will parse them as regular text.\nThe lines_above and lines_below parameters can be used to specify a different number of blank lines (including 0) above or below each heading.\nNote: If lines_above or lines_below are configured to require more than one blank line, MD012/no-multiple-blanks should also be customized.\nMD023 - Headings must start at the beginning of the line Tags: headings, headers, spaces\nAliases: heading-start-left, header-start-left\nThis rule is triggered when a heading is indented by one or more spaces:\nSome text # Indented heading  To fix this, ensure that all headings start at the beginning of the line:\nSome text # Heading  Rationale: Headings that don\u0026rsquo;t start at the beginning of the line will not be parsed as headings, and will instead appear as regular text.\nMD024 - Multiple headings with the same content Tags: headings, headers\nAliases: no-duplicate-heading, no-duplicate-header\nParameters: siblings_only, allow_different_nesting (boolean; default false)\nThis rule is triggered if there are multiple headings in the document that have the same text:\n# Some text ## Some text  To fix this, ensure that the content of each heading is different:\n# Some text ## Some more text  Rationale: Some markdown parses generate anchors for headings based on the heading name, and having headings with the same content can cause problems with this.\nIf the parameter siblings_only (alternatively allow_different_nesting) is set to true, heading duplication is allowed for non-sibling headings (common in change logs):\n# Change log ## 1.0.0 ### Features ## 2.0.0 ### Features  MD025 - Multiple top level headings in the same document Tags: headings, headers\nAliases: single-title, single-h1\nParameters: level, front_matter_title (number; default 1, string; default \u0026ldquo;^\\s*title:\u0026ldquo;)\nThis rule is triggered when a top level heading is in use (the first line of the file is an h1 heading), and more than one h1 heading is in use in the document:\n# Top level heading # Another top level heading  To fix, structure your document so that there is a single h1 heading that is the title for the document, and all later headings are h2 or lower level headings:\n# Title ## Heading ## Another heading  Rationale: A top level heading is an h1 on the first line of the file, and serves as the title for the document. If this convention is in use, then there can not be more than one title for the document, and the entire document should be contained within this heading.\nNote: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally.\nIf YAML front matter is present and contains a title property (commonly used with blog posts), this rule treats that as a top level heading and will report a violation for any subsequent top level headings. To use a different property name in front matter, specify the text of a regular expression via the front_matter_title parameter. To disable the use of front matter by this rule, specify \u0026quot;\u0026quot; for front_matter_title.\nMD026 - Trailing punctuation in heading Tags: headings, headers\nAliases: no-trailing-punctuation\nParameters: punctuation (string; default \u0026ldquo;.,;:!?\u0026ldquo;)\nThis rule is triggered on any heading that has a punctuation character as the last character in the line:\n# This is a heading.  To fix this, remove any trailing punctuation:\n# This is a heading  Note: The punctuation parameter can be used to specify what characters class as punctuation at the end of the heading. For example, you can set it to \u0026quot;.,;:!\u0026quot; to allow headings with question marks in them, such as might be used in an FAQ.\nMD027 - Multiple spaces after blockquote symbol Tags: blockquote, whitespace, indentation\nAliases: no-multiple-space-blockquote\nThis rule is triggered when blockquotes have more than one space after the blockquote (\u0026gt;) symbol:\n\u0026gt; This is a block quote with bad indentation \u0026gt; there should only be one.  To fix, remove any extraneous space:\n\u0026gt; This is a blockquote with correct \u0026gt; indentation.  MD028 - Blank line inside blockquote Tags: blockquote, whitespace\nAliases: no-blanks-blockquote\nThis rule is triggered when two blockquote blocks are separated by nothing except for a blank line:\n\u0026gt; This is a blockquote \u0026gt; which is immediately followed by \u0026gt; this blockquote. Unfortunately \u0026gt; In some parsers, these are treated as the same blockquote.  To fix this, ensure that any blockquotes that are right next to each other have some text in between:\n\u0026gt; This is a blockquote. And Jimmy also said: \u0026gt; This too is a blockquote.  Alternatively, if they are supposed to be the same quote, then add the blockquote symbol at the beginning of the blank line:\n\u0026gt; This is a blockquote. \u0026gt; \u0026gt; This is the same blockquote.  Rationale: Some markdown parsers will treat two blockquotes separated by one or more blank lines as the same blockquote, while others will treat them as separate blockquotes.\nMD029 - Ordered list item prefix Tags: ol\nAliases: ol-prefix\nParameters: style (\u0026ldquo;one\u0026rdquo;, \u0026ldquo;ordered\u0026rdquo;, \u0026ldquo;one_or_ordered\u0026rdquo;, \u0026ldquo;zero\u0026rdquo;; default \u0026ldquo;one_or_ordered\u0026rdquo;)\nThis rule is triggered for ordered lists that do not either start with \u0026lsquo;1.\u0026rsquo; or do not have a prefix that increases in numerical order (depending on the configured style). The less-common pattern of using \u0026lsquo;0.\u0026rsquo; for all prefixes is also supported.\nExample valid list if the style is configured as \u0026lsquo;one\u0026rsquo;:\n1. Do this. 1. Do that. 1. Done.  Example valid list if the style is configured as \u0026lsquo;ordered\u0026rsquo;:\n1. Do this. 2. Do that. 3. Done.  Both examples are valid when the style is configured as \u0026lsquo;one_or_ordered\u0026rsquo;.\nExample valid list if the style is configured as \u0026lsquo;zero\u0026rsquo;:\n0. Do this. 0. Do that. 0. Done.  Example invalid list for all styles:\n1. Do this. 3. Done.  This rule supports 0-prefixing ordered list items for uniform indentation:\n... 08. Item 09. Item 10. Item 11. Item ...  MD030 - Spaces after list markers Tags: ol, ul, whitespace\nAliases: list-marker-space\nParameters: ul_single, ol_single, ul_multi, ol_multi (number; default 1)\nThis rule checks for the number of spaces between a list marker (e.g. \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;+\u0026rsquo; or \u0026lsquo;1.\u0026rsquo;) and the text of the list item.\nThe number of spaces checked for depends on the document style in use, but the default is 1 space after any list marker:\n* Foo * Bar * Baz 1. Foo 1. Bar 1. Baz 1. Foo * Bar 1. Baz  A document style may change the number of spaces after unordered list items and ordered list items independently, as well as based on whether the content of every item in the list consists of a single paragraph, or multiple paragraphs (including sub-lists and code blocks).\nFor example, the style guide at https://www.cirosantilli.com/markdown-style-guide/#spaces-after-list-marker specifies that 1 space after the list marker should be used if every item in the list fits within a single paragraph, but to use 2 or 3 spaces (for ordered and unordered lists respectively) if there are multiple paragraphs of content inside the list:\n* Foo * Bar * Baz  vs.\n* Foo Second paragraph * Bar  or\n1. Foo Second paragraph 1. Bar  To fix this, ensure the correct number of spaces are used after list marker for your selected document style.\nMD031 - Fenced code blocks should be surrounded by blank lines Tags: code, blank_lines\nAliases: blanks-around-fences\nThis rule is triggered when fenced code blocks are either not preceded or not followed by a blank line:\nSome text ``` Code block ``` ``` Another code block ``` Some more text  To fix this, ensure that all fenced code blocks have a blank line both before and after (except where the block is at the beginning or end of the document):\nSome text ``` Code block ``` ``` Another code block ``` Some more text  Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse fenced code blocks that don\u0026rsquo;t have blank lines before and after them.\nMD032 - Lists should be surrounded by blank lines Tags: bullet, ul, ol, blank_lines\nAliases: blanks-around-lists\nThis rule is triggered when lists (of any kind) are either not preceded or not followed by a blank line:\nSome text * Some * List 1. Some 2. List Some text  To fix this, ensure that all lists have a blank line both before and after (except where the block is at the beginning or end of the document):\nSome text * Some * List 1. Some 2. List Some text  Rationale: Aside from aesthetic reasons, some parsers, including kramdown, will not parse lists that don\u0026rsquo;t have blank lines before and after them.\nNote: List items without hanging indents are a violation of this rule; list items with hanging indents are okay:\n* This is not okay * This is okay  MD033 - Inline HTML Tags: html\nAliases: no-inline-html\nParameters: allowed_elements (array of string; default empty)\nThis rule is triggered whenever raw HTML is used in a markdown document:\n\u0026lt;h1\u0026gt;Inline HTML heading\u0026lt;/h1\u0026gt;  To fix this, use \u0026lsquo;pure\u0026rsquo; markdown instead of including raw HTML:\n# Markdown heading  Rationale: Raw HTML is allowed in markdown, but this rule is included for those who want their documents to only include \u0026ldquo;pure\u0026rdquo; markdown, or for those who are rendering markdown documents in something other than HTML.\nNote: To allow specific HTML elements, use the \u0026lsquo;allowed_elements\u0026rsquo; parameter.\nMD034 - Bare URL used Tags: links, url\nAliases: no-bare-urls\nThis rule is triggered whenever a URL is given that isn\u0026rsquo;t surrounded by angle brackets:\nFor more information, see https://www.example.com/.  To fix this, add angle brackets around the URL:\nFor more information, see \u0026lt;https://www.example.com/\u0026gt;.  Rationale: Without angle brackets, the URL isn\u0026rsquo;t converted into a link in many markdown parsers.\nNote: if you do want a bare URL without it being converted into a link, enclose it in a code block, otherwise in some markdown parsers it will be converted:\n`https://www.example.com`  MD035 - Horizontal rule style Tags: hr\nAliases: hr-style\nParameters: style (\u0026ldquo;consistent\u0026rdquo;, \u0026ldquo;\u0026mdash;\u0026rdquo;, \u0026ldquo;***\u0026ldquo;, or other string specifying the horizontal rule; default \u0026ldquo;consistent\u0026rdquo;)\nThis rule is triggered when inconsistent styles of horizontal rules are used in the document:\n--- - - - *** * * * ****  To fix this, ensure any horizontal rules used in the document are consistent, or match the given style if the rule is so configured:\n--- ---  Note: by default, this rule is configured to just require that all horizontal rules in the document are the same, and will trigger if any of the horizontal rules are different than the first one encountered in the document. If you want to configure the rule to match a specific style, the parameter given to the \u0026lsquo;style\u0026rsquo; option is a string containing the exact horizontal rule text that is allowed.\nMD036 - Emphasis used instead of a heading Tags: headings, headers, emphasis\nAliases: no-emphasis-as-heading, no-emphasis-as-header\nParameters: punctuation (string; default \u0026ldquo;.,;:!?\u0026ldquo;)\nThis check looks for instances where emphasized (i.e. bold or italic) text is used to separate sections, where a heading should be used instead:\n**My document** Lorem ipsum dolor sit amet... _Another section_ Consectetur adipiscing elit, sed do eiusmod.  To fix this, use markdown headings instead of emphasized text to denote sections:\n# My document Lorem ipsum dolor sit amet... ## Another section Consectetur adipiscing elit, sed do eiusmod.  Note: this rule looks for single line paragraphs that consist entirely of emphasized text. It won\u0026rsquo;t fire on emphasis used within regular text, multi-line emphasized paragraphs, and paragraphs ending in punctuation. Similarly to rule MD026, you can configure what characters are recognized as punctuation.\nMD037 - Spaces inside emphasis markers Tags: whitespace, emphasis\nAliases: no-space-in-emphasis\nThis rule is triggered when emphasis markers (bold, italic) are used, but they have spaces between the markers and the text:\nHere is some ** bold ** text. Here is some * italic * text. Here is some more __ bold __ text. Here is some more _ italic _ text.  To fix this, remove the spaces around the emphasis markers:\nHere is some **bold** text. Here is some *italic* text. Here is some more __bold__ text. Here is some more _italic_ text.  Rationale: Emphasis is only parsed as such when the asterisks/underscores aren\u0026rsquo;t completely surrounded by spaces. This rule attempts to detect where they were surrounded by spaces, but it appears that emphasized text was intended by the author.\nMD038 - Spaces inside code span elements Tags: whitespace, code\nAliases: no-space-in-code\nThis rule is triggered on code span elements that have spaces right inside the backticks:\n` some text ` `some text ` ` some text`  To fix this, remove the spaces inside the codespan markers:\n`some text`  Note: A single leading or trailing space is allowed if used to separate codespan markers from an embedded backtick:\n`` ` embedded backtick``  MD039 - Spaces inside link text Tags: whitespace, links\nAliases: no-space-in-links\nThis rule is triggered on links that have spaces surrounding the link text:\n[ a link ](https://www.example.com/)  To fix this, remove the spaces surrounding the link text:\n[a link](https://www.example.com/)  MD040 - Fenced code blocks should have a language specified Tags: code, language\nAliases: fenced-code-language\nThis rule is triggered when fenced code blocks are used, but a language isn\u0026rsquo;t specified:\n``` #!/bin/bash echo Hello world ```  To fix this, add a language specifier to the code block:\n```bash #!/bin/bash echo Hello world ```  MD041 - First line in file should be a top level heading Tags: headings, headers\nAliases: first-line-heading, first-line-h1\nParameters: level, front_matter_title (number; default 1, string; default \u0026ldquo;^\\s*title:\u0026ldquo;)\nThis rule is intended to ensure documents have a title and is triggered when the first line in the file isn\u0026rsquo;t a top level (h1) heading:\nThis is a file without a heading  To fix this, add a top level heading to the beginning of the file:\n# File with heading This is a file with a top level heading  Note: The level parameter can be used to change the top level (ex: to h2) in cases where an h1 is added externally.\nIf YAML front matter is present and contains a title property (commonly used with blog posts), this rule will not report a violation. To use a different property name in front matter, specify the text of a regular expression via the front_matter_title parameter. To disable the use of front matter by this rule, specify \u0026quot;\u0026quot; for front_matter_title.\nMD042 - No empty links Tags: links\nAliases: no-empty-links\nThis rule is triggered when an empty link is encountered:\n[an empty link]()  To fix the violation, provide a destination for the link:\n[a valid link](https://example.com/)  Empty fragments will trigger this rule:\n[an empty fragment](#)  But non-empty fragments will not:\n[a valid fragment](#fragment)  MD043 - Required heading structure Tags: headings, headers\nAliases: required-headings, required-headers\nParameters: headings, headers (array of string; default null for disabled)\n If headings is not provided, headers (deprecated) will be used.\n This rule is triggered when the headings in a file do not match the array of headings passed to the rule. It can be used to enforce a standard heading structure for a set of files.\nTo require exactly the following structure:\n# Head ## Item ### Detail  Set the headings parameter to:\n[ \u0026quot;# Head\u0026quot;, \u0026quot;## Item\u0026quot;, \u0026quot;### Detail\u0026quot; ]  To allow optional headings as with the following structure:\n# Head ## Item ### Detail (optional) ## Foot ### Notes (optional)  Use the special value \u0026quot;*\u0026quot; meaning \u0026ldquo;one or more unspecified headings\u0026rdquo; and set the headings parameter to:\n[ \u0026quot;# Head\u0026quot;, \u0026quot;## Item\u0026quot;, \u0026quot;*\u0026quot;, \u0026quot;## Foot\u0026quot;, \u0026quot;*\u0026quot; ]  When an error is detected, this rule outputs the line number of the first problematic heading (otherwise, it outputs the last line number of the file).\nNote that while the headings parameter uses the \u0026ldquo;## Text\u0026rdquo; ATX heading style for simplicity, a file may use any supported heading style.\nMD044 - Proper names should have the correct capitalization Tags: spelling\nAliases: proper-names\nParameters: names, code_blocks (string array; default null, boolean; default true)\nThis rule is triggered when any of the strings in the names array do not have the specified capitalization. It can be used to enforce a standard letter case for the names of projects and products.\nFor example, the language \u0026ldquo;JavaScript\u0026rdquo; is usually written with both the \u0026lsquo;J\u0026rsquo; and \u0026rsquo;S\u0026rsquo; capitalized - though sometimes the \u0026rsquo;s\u0026rsquo; or \u0026lsquo;j\u0026rsquo; appear in lower-case. To enforce the proper capitalization, specify the desired letter case in the names array:\n[ \u0026quot;JavaScript\u0026quot; ]  Set the code_blocks parameter to false to disable this rule for code blocks.\nMD045 - Images should have alternate text (alt text) Tags: accessibility, images\nAliases: no-alt-text\nThis rule is triggered when an image is missing alternate text (alt text) information. Alternate text is important for accessibility, describing the content of an image for people who may not be able to see it.\nAlternate text is commonly specified inline as:\n![Alternate text](image.jpg)  Or with reference syntax as:\n![Alternate text][ref] ... [ref]: image.jpg \u0026quot;Optional title\u0026quot;  Guidance for writing alternate text is available from the W3C, Wikipedia, and other locations.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7351de3bbd485947fecd79515c5dd561","permalink":"https://xueqing.github.io/blog/markdown/markdownlint_rules/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/markdown/markdownlint_rules/","section":"blog","summary":"MD001 - Heading levels should only increment by one level at a time MD002 - First heading should be a top level heading MD003 - Heading style MD004 - Unordered list style MD005 - Inconsistent indentation for list items at the same level MD006 - Consider starting bulleted lists at the beginning of the line MD007 - Unordered list indentation MD009 - Trailing spaces MD010 - Hard tabs MD011 - Reversed link syntax MD012 - Multiple consecutive blank lines MD013 - Line length MD014 - Dollar signs used before commands without showing output MD018 - No space after hash on atx style heading MD019 - Multiple spaces after hash on atx style heading MD020 - No space inside hashes on closed atx style heading MD021 - Multiple spaces inside hashes on closed atx style heading MD022 - Headings should be surrounded by blank lines MD023 - Headings must start at the beginning of the line MD024 - Multiple headings with the same content MD025 - Multiple top level headings in the same document MD026 - Trailing punctuation in heading MD027 - Multiple spaces after blockquote symbol MD028 - Blank line inside blockquote MD029 - Ordered list item prefix MD030 - Spaces after list markers MD031 - Fenced code blocks should be surrounded by blank lines MD032 - Lists should be surrounded by blank lines MD033 - Inline HTML MD034 - Bare URL used MD035 - Horizontal rule style MD036 - Emphasis used instead of a heading MD037 - Spaces inside emphasis markers MD038 - Spaces inside code span elements MD039 - Spaces inside link text MD040 - Fenced code blocks should have a language specified MD041 - First line in file should be a top level heading MD042 - No empty links MD043 - Required heading structure MD044 - Proper names should have the correct capitalization MD045 - Images should have alternate text (alt text)  This document contains a description of all rules, what they are checking for, as well as an examples of documents that break the rule and corrected versions of the examples.","tags":["md"],"title":"Markdownlint Rules","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  概述 索引  参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;testing/quick\u0026quot;\n概述 quick 包实现了帮辅助黑盒测试的工具函数。\ntesting/quick 包被冻结，且不再接受新特性。\n索引 参考\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"083c90316707ced2ed6b4ab3d70dcff3","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/quick/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/quick/","section":"translation","summary":"概述 索引 参考 Golang 官网文档 学习。 导入语句：import \u0026quot;testing/quick\u0026quot; 概述 quick 包实现了帮辅助黑盒测试的工具函数。 testing/quick 包被冻结，且不再接受新特性。 索引 参考","tags":["golang-pkg"],"title":"quick 包","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  概念 使用 RAII 例子 标准库 注解 参考  概念 资源获取即初始化（Resource Acquisition Is Initialization），或称 RAII，是一种 C++ 编程技术，它将必须在使用前请求的资源（分配的堆内存、执行线程、打开的套接字、打开的文件、锁定的互斥体、磁盘空间、数据库连接等——任何存在受限供给中的事物）的生命周期绑定与一个对象的生存期相绑定。\n使用 RAII  RAII 保证资源可用于任何会访问该对象的函数（资源可用性是一种类不变式，这会消除冗余的运行时测试）。它亦保证所有资源在其控制对象的生存期结束时，以获取顺序的逆序释放。类似地，若资源获取失败（构造函数以异常退出），则为已构造完成的对象和基类子对象所获取的所有资源，会以初始化顺序的逆序释放。这有效地利用了语言特性（对象生存期、退出作用域、初始化顺序以及栈回溯）以消除内存泄漏并保证异常安全。根据 RAII 对象的生存期在退出作用域时结束这一基本状况，此技术的另一名称是作用域界定的资源管理（ Scope-Bound Resource Management，SBRM）。\n RAII 可总结如下:\n 将每个资源封装入一个类，其中 构造函数请求资源，并建立所有类不变式，或在它无法完成时抛出异常 析构函数释放资源并决不抛出异常 始终经由 RAII 类的实例使用满足要求的资源，该资源 自身拥有自动存储期或临时生存期，或 具有与自动或临时对象的生存期绑定的生存期  移动语义使得在对象间、跨作用域，以及在线程内外安全地移动所有权，而同时维护资源安全成为可能。\n  例子 拥有 open()/close()、lock()/unlock()，或 init()/copyFrom()/destroy() 成员函数的类是非 RAII 类的典型的例子\nstd::mutex m; void bad() { m.lock(); // 请求互斥体 f(); // 若 f() 抛异常，则互斥体永远不被释放 if(!everything_ok()) return; // 提早返回，互斥体永远不被释放 m.unlock(); // 若 bad() 抵达此语句，互斥才被释放 } void good() { std::lock_guard\u0026lt;std::mutex\u0026gt; lk(m); // RAII类：互斥体的请求即是初始化 f(); // 若 f() 抛异常，则释放互斥体 if(!everything_ok()) return; // 提早返回，互斥体被释放 } // 若 good() 正常返回，则释放互斥体  标准库  C++ 标准库遵循 RAII 管理其自身的资源：std::string、std::vector、std::thread，以及多数其他类在构造函数中获取其资源（错误时抛出异常），并在其析构函数中释放之（决不抛出），而不要求显式清理。 另外，标准库提供几种 RAII 包装器以管理用户提供的资源：  std::unique_ptr 及 std::shared_ptr 用于管理动态分配的内存，或以用户提供的删除器管理任何以普通指针表示的资源 std::lock_guard、std::unique_lock、std::shared_lock 用于管理互斥体   注解 RAII 不适用于并非在使用前请求的资源：CPU 时间、核心，以及缓存容量、熵池容量、网络带宽、电力消费、栈内存等。\n参考  RAII  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1775799c6d24e8f867cab3ad896a9a24","permalink":"https://xueqing.github.io/blog/cplusplus/raii/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/raii/","section":"blog","summary":"概念 使用 RAII 例子 标准库 注解 参考 概念 资源获取即初始化（Resource Acquisition Is Initialization），或称 RAII，是一种 C++ 编程技术，它将必","tags":["c++"],"title":"RAII 资源获取即初始化","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: Readers Implement a Reader type that emits an infinite stream of the ASCII character \u0026lsquo;A\u0026rsquo;. */\npackage main\nimport \u0026ldquo;golang.org/x/tour/reader\u0026rdquo;\ntype myReader struct{}\nfunc (r myReader) Read(c []byte) (int, error) { i := 0 for ; i \u0026lt; len\u0026copy;; i++ { c[i] = \u0026lsquo;A\u0026rsquo; } for ; i \u0026lt; cap\u0026copy;; i++ { c = append(c, \u0026lsquo;A\u0026rsquo;) }\nreturn cap(c), nil  }\nfunc main() { reader.Validate(myReader{}) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"abf0cd1a172a86b8bb76a4459b3a9fcc","permalink":"https://xueqing.github.io/translation/go-doc/gotour/reader/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/reader/","section":"translation","summary":"```go /* Exercise: Readers Implement a Reader type that emits an infinite stream of the ASCII character \u0026lsquo;A\u0026rsquo;. */\npackage main\nimport \u0026ldquo;golang.org/x/tour/reader\u0026rdquo;\ntype myReader struct{}\nfunc (r myReader) Read(c []byte) (int, error) { i := 0 for ; i \u0026lt; len\u0026copy;; i++ { c[i] = \u0026lsquo;A\u0026rsquo; } for ; i \u0026lt; cap\u0026copy;; i++ { c = append(c, \u0026lsquo;A\u0026rsquo;) }\nreturn cap(c), nil  }\nfunc main() { reader.Validate(myReader{}) }","tags":["go-tour"],"title":"Readers","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: rot13Reader A common pattern is an io.Reader that wraps another io.Reader, modifying the stream in some way.\nFor example, the gzip.NewReader function takes an io.Reader (a stream of compressed data) and returns a *gzip.Reader that also implements io.Reader (a stream of the decompressed data).\nImplement a rot13Reader that implements io.Reader and reads from an io.Reader, modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.\nThe rot13Reader type is provided for you. Make it an io.Reader by implementing its Read method. */\npackage main\nimport ( \u0026ldquo;io\u0026rdquo; \u0026ldquo;os\u0026rdquo; \u0026ldquo;strings\u0026rdquo; )\ntype rot13Reader struct { r io.Reader }\nfunc rot13(b byte) byte { if b \u0026gt;= \u0026lsquo;a\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026rsquo;m\u0026rsquo; { return b + 13 } if b \u0026gt;= \u0026lsquo;n\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026lsquo;z\u0026rsquo; { return b - \u0026lsquo;n\u0026rsquo; + \u0026lsquo;a\u0026rsquo; } if b \u0026gt;= \u0026lsquo;A\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026rsquo;M\u0026rsquo; { return b + 13 } if b \u0026gt;= \u0026lsquo;N\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026lsquo;Z\u0026rsquo; { return b - \u0026lsquo;N\u0026rsquo; + \u0026lsquo;A\u0026rsquo; } return b }\nvar rot13Map = make(map[byte]byte)\nfunc initializeRot13Map() { s1 := \u0026ldquo;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026rdquo; s2 := \u0026ldquo;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\u0026rdquo; for i := 0; i \u0026lt; len(s1); i++ { rot13Map[s1[i]] = s2[i] } }\nfunc rot13ByMap(b byte) byte { val, ok := rot13Map[b] if ok { return val } return b }\nfunc (rot rot13Reader) Read(c []byte) (int, error) { b := make([]byte, 8) n, err := rot.r.Read(b) initializeRot13Map() for i := 0; i \u0026lt; n; i++ { // b[i] = rot13(b[i]) b[i] = rot13ByMap(b[i]) } if err == io.EOF { return n, err } copy(c, b) return n, nil }\nfunc main() { s := strings.NewReader(\u0026ldquo;Lbh penpxrq gur pbqr!\u0026rdquo;) r := rot13Reader{s} io.Copy(os.Stdout, \u0026amp;r) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9e3b955c5865480af365f8048bd70668","permalink":"https://xueqing.github.io/translation/go-doc/gotour/rot_reader/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/rot_reader/","section":"translation","summary":"```go /* Exercise: rot13Reader A common pattern is an io.Reader that wraps another io.Reader, modifying the stream in some way.\nFor example, the gzip.NewReader function takes an io.Reader (a stream of compressed data) and returns a *gzip.Reader that also implements io.Reader (a stream of the decompressed data).\nImplement a rot13Reader that implements io.Reader and reads from an io.Reader, modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.","tags":["go-tour"],"title":"rot13Reader","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  sizeof strlen 总结 参考  sizeof  sizeof 是编译时一元运算符，可用于计算运算元的大小 sizeof 作用于 unsigned int 时，结果一般表示为 size_t sizeof 可用于任何数据类型，包括基本类型(比如整型、浮点型、指针类型)或符合数据类型(比如结构体、联合体等) sizeof 计算结构体的大小时，并不一定等于结构体每个成员 sizeof 计算结果之和\n 原因：编译器因为对齐问题会给结构体增加填充。不同编译器的对齐约束可能不同，所以填充大小也不确定。当结构体的一个成员之和有一个更大的成员，或者在结构体最后时，前者可能会被填充 C 编译器不允许编译器重排结构体的成员来减小填充。为了最下滑填充，结构体的成员必须按照从大到小的顺序排列\n#include \u0026lt;stdio.h\u0026gt; int main() { struct A { int x; //sizeof(int)=4, Padding of 4 bytes double z; //sizeof(double)=8 short int y;//sizeof(short int)=2, Padding of 6 bytes }; printf(\u0026quot;Size of struct: %d\u0026quot;, sizeof(struct A));//24 struct B { double z; //sizeof(double)=8 int x; //sizeof(int)=4 short int y;//sizeof(short int)=2, Padding of 2 bytes }; printf(\u0026quot;Size of struct: %d\u0026quot;, sizeof(struct B));//16 struct C { double z; //sizeof(double)=8 short int y;//sizeof(short int)=2, Padding of 2 bytes int x; //sizeof(int)=4 }; printf(\u0026quot;Size of struct: %d\u0026quot;, sizeof(struct C));//16 return 0; }    strlen  strlen 是 C 语言预定义的函数，包含在头文件 string.h 中 strlen 接受指向数组的指针作为参数，并在运行时从该地址开始遍历查找 NULL 字符，然后计算在找到 NULL 字符钱经过的内存大小 strlen 的主要用于计算一个数组或字符串的长度\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { char ch[]={'g', 'e', 'e', 'k', 's', '\\0'}; printf(\u0026quot;Length of string is: %d\u0026quot;, strlen(ch));//5 char str[]= \u0026quot;geeks\u0026quot;; printf(\u0026quot;Length of string is: %d\u0026quot;, strlen(str));//5 char *str1 = \u0026quot;geeks\u0026quot;; printf(\u0026quot;Length of string is: %d\u0026quot;, strlen(str1));//5 return 0; }   总结    差异 sizeof strlen     原型 - size_t strlen(const char * str);   类型 一元运算符 C 预定义的函数   支持的数据类型 返回任何数据(分配的)的实际大小，单位是 Byte，包含 null 值 返回字符串或字符数组的长度   计算大小 sizeof 是编译时表达式，返回一个类型或变量的大小，并不关心变量的值 strlen 是运行时计算，返回一个 C 风格的以 NULL 结尾的字符串的长度   C++ 中 sizeof 常用作 malloc/memcpy/memset 的参数，C++ 可用 new/std::copy/std::fill 或构造函数替换 C 风格的字符串使用 char_traits::length 获取长度，也可用 std::string 类型保存计算    #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { char str[] = \u0026quot;November\u0026quot;; printf(\u0026quot;Length of String is %d\\n\u0026quot;, strlen(str));//8 printf(\u0026quot;Size of String is %d\\n\u0026quot;, sizeof(str));//9 } // 字符串以 NULL 字符，即 '\\0' 结束，strlen 计算找到 NULL 字符经过的内存大小，不会计算 NULL。而 sizeof 返回为运算元实际分配的内存，也会计算 NULL  #include \u0026lt;iostream\u0026gt; #include \u0026lt;string.h\u0026gt; using namespace std; int main() { char a[] = {\u0026quot;Geeks for\u0026quot;}; char b[] = {'G','e','e','k','s',' ','f','o','r'}; cout \u0026lt;\u0026lt; \u0026quot;sizeof(a) = \u0026quot; \u0026lt;\u0026lt; sizeof(a);//10 cout \u0026lt;\u0026lt; \u0026quot;\\nstrlen(a) = \u0026quot;\u0026lt;\u0026lt; strlen(a);//9 cout\u0026lt;\u0026lt; \u0026quot;\\nsizeof(b) = \u0026quot; \u0026lt;\u0026lt; sizeof(b);//9 cout\u0026lt;\u0026lt; \u0026quot;\\nstrlen(b) = \u0026quot; \u0026lt;\u0026lt; strlen(b);//18，不确定 return 0; } // strlen 找不到 NULL 字符，返回结果是不确定的  参考  Difference between strlen() and sizeof() for string in C Sizeof vs Strlen  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"bd8f5c440e147317a2330d5a30e8cb9b","permalink":"https://xueqing.github.io/blog/cplusplus/sizeof_strlen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/sizeof_strlen/","section":"blog","summary":"sizeof strlen 总结 参考 sizeof sizeof 是编译时一元运算符，可用于计算运算元的大小 sizeof 作用于 unsigned int 时，结果一般表示为 size_t sizeof 可用于任何数据类型，包括基本类型(比如整型、浮点","tags":["c++"],"title":"sizeof vs strlen","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Slices Implement Pic. It should return a slice of length dy, each element of which is a slice of dx 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values. The choice of image is up to you. Interesting functions include (x+y)/2, x*y, and x^y. (You need to use a loop to allocate each []uint8 inside the [][]uint8.) (Use uint8(intValue) to convert between types.) */ package main import \u0026quot;golang.org/x/tour/pic\u0026quot; func myPic(dx, dy int) [][]uint8 { pic := make([][]uint8, dx) for i := 0; i \u0026lt; dx; i++ { pic[i] = make([]uint8, dy) } for i := 0; i \u0026lt; dx; i++ { for j := 0; j \u0026lt; dy; j++ { pic[i][j] = uint8((i ^ j)) } } return pic } func main() { pic.Show(myPic) }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"3b0e279c2e5225f6603e4d0a3b8affc4","permalink":"https://xueqing.github.io/translation/go-doc/gotour/slices/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/slices/","section":"translation","summary":"/* Exercise: Slices Implement Pic. It should return a slice of length dy, each element of which is a slice of dx 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values. The choice of image is up to you. Interesting functions include (x+y)/2, x*y, and x^y. (You need to use a loop to allocate each []uint8 inside the [][]uint8.","tags":["go-tour"],"title":"Slices","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  介绍 算法  头文件 algorithm 排序 搜索 重要的 STL 算法  未加工算法 加工算法  有用的 Array 算法 划分操作 头文件 valarray  容器  顺序容器 array vector deque forward_list list 容器适配器 stack queue priority_queue 关联容器 set multiset map multimap 无序关联容器 unordered_set unordered_multiset unordered_map unordered_multimap  仿函数 迭代器 参考  介绍  STL(Standard Template Library，标准模板库)是 C++ 模板类集合，提供了统一的编程书籍结构和函数。 STL 是容器类、算法和迭代器的库，是一个通用的库，组件都是参数化的。 STL 有 4 个组件：算法、容器、函数和迭代器。  算法  定义了 STL 的基础性的算法(均为函数模板)，用于给定范围的元素。 C++98 中有 70 个算法模板函数，C++11 增加了 20 个算法模板函数，其中有 5 个定义在 numeric 头文件，其他定义在 algorithm 中 numeric 头文件包含的算法模板函数  accumulate：累加序列值 adjacent_difference：计算相邻两项的差值 inner_product：计算输入序列的内积 partial_sum：计算序列的部分累加值 iota：保存增加的连续值序列   头文件 algorithm 排序  函数原型：  template \u0026lt;class RandomAccessIterator\u0026gt; void sort (RandomAccessIterator first, RandomAccessIterator last); template \u0026lt;class RandomAccessIterator, class Compare\u0026gt; void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);  底层使用快排实现。 算法复杂度： O(N*lgN)。\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; void show(int a[]) { for(int i=0; i\u0026lt;10; ++i) cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;; cout \u0026lt;\u0026lt; endl; } int main() { int a[10]={1, 5, 8, 9, 6, 7, 3, 4, 2, 0}; cout \u0026lt;\u0026lt; \u0026quot;\\n The array before sorting is : \u0026quot;; show(a); sort(a,a+10); cout \u0026lt;\u0026lt; \u0026quot;\\n The array after sorting is : \u0026quot;; show(a); return 0; }   搜索  广泛使用的搜索算法是二分搜索，前提是数组已经排好序。 函数原型：\n template \u0026lt;class ForwardIterator, class T\u0026gt; bool binary_search (ForwardIterator first, ForwardIterator last, const T\u0026amp; val); template \u0026lt;class ForwardIterator, class T, class Compare\u0026gt; bool binary_search (ForwardIterator first, ForwardIterator last, const T\u0026amp; val, Compare comp);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; void show(int a[], int arraysize) { for(int i=0; i\u0026lt;arraysize; ++i) cout \u0026lt;\u0026lt; a[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;; cout \u0026lt;\u0026lt; endl; } int main() { int a[] = { 1, 5, 8, 9, 6, 7, 3, 4, 2, 0 }; int asize = sizeof(a) / sizeof(a[0]); cout \u0026lt;\u0026lt; \u0026quot;The array is : \u0026quot;; show(a, asize); cout \u0026lt;\u0026lt; \u0026quot;Let's say we want to search for 2 in the array\u0026quot; \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026quot;So, we first sort the array\u0026quot; \u0026lt;\u0026lt; endl; sort(a, a + asize); cout \u0026lt;\u0026lt; \u0026quot;The array after sorting is : \u0026quot;; show(a, asize); cout \u0026lt;\u0026lt; \u0026quot;Now, we do the binary search for 2\u0026quot; \u0026lt;\u0026lt; endl; if(binary_search(a, a + 10, 2)) cout \u0026lt;\u0026lt; \u0026quot;Element found in the array\u0026quot; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026quot;Element not found in the array\u0026quot; \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026quot;Now, say we want to search for 10\u0026quot; \u0026lt;\u0026lt; endl; if(binary_search(a, a + 10, 10)) cout \u0026lt;\u0026lt; \u0026quot;Element found in the array\u0026quot; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; \u0026quot;Element not found in the array\u0026quot; \u0026lt;\u0026lt; endl; return 0; }    重要的 STL 算法 未加工算法  排序  template \u0026lt;class RandomAccessIterator\u0026gt; void sort (RandomAccessIterator first, RandomAccessIterator last); template \u0026lt;class RandomAccessIterator, class Compare\u0026gt; void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);  逆序  template \u0026lt;class BidirectionalIterator\u0026gt; void reverse (BidirectionalIterator first, BidirectionalIterator last);  返回序列中最大值的迭代器  template \u0026lt;class ForwardIterator\u0026gt; ForwardIterator max_element (ForwardIterator first, ForwardIterator last); template \u0026lt;class ForwardIterator, class Compare\u0026gt; ForwardIterator max_element (ForwardIterator first, ForwardIterator last, Compare comp);  返回序列中最小值的迭代器  template \u0026lt;class ForwardIterator\u0026gt; ForwardIterator min_element (ForwardIterator first, ForwardIterator last); template \u0026lt;class ForwardIterator, class Compare\u0026gt; ForwardIterator min_element (ForwardIterator first, ForwardIterator last, Compare comp);  计算序列元素的累加值\n template \u0026lt;class InputIterator, class T\u0026gt; T accumulate (InputIterator first, InputIterator last, T init); template \u0026lt;class InputIterator, class T, class BinaryOperation\u0026gt; T accumulate (InputIterator first, InputIterator last, T init, BinaryOperation binary_op);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;numeric\u0026gt; //For accumulate operation using namespace std; int main() { int arr[] = {10, 20, 5, 23 ,42 , 15}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vect(arr, arr+n); cout \u0026lt;\u0026lt; \u0026quot;Vector is: \u0026quot;; for(int i=0; i\u0026lt;n; i++) cout \u0026lt;\u0026lt; vect[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;; sort(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nVector after sorting is: \u0026quot;; for(int i=0; i\u0026lt;n; i++) cout \u0026lt;\u0026lt; vect[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;; reverse(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nVector after reversing is: \u0026quot;; for(int i=0; i\u0026lt;6; i++) cout \u0026lt;\u0026lt; vect[i] \u0026lt;\u0026lt; \u0026quot; \u0026quot;; cout \u0026lt;\u0026lt; \u0026quot;\\nMaximum element of vector is: \u0026quot;; cout \u0026lt;\u0026lt; *max_element(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nMinimum element of vector is: \u0026quot;; cout \u0026lt;\u0026lt; *min_element(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nThe summation of vector elements is: \u0026quot;; cout \u0026lt;\u0026lt; accumulate(vect.begin(), vect.end(), 0); cout\u0026lt;\u0026lt; endl; return 0; }   计算给定元素出现的次数\n template \u0026lt;class InputIterator, class T\u0026gt; typename iterator_traits\u0026lt;InputIterator\u0026gt;::difference_type count (InputIterator first, InputIterator last, const T\u0026amp; val);  返回指向第一个等于给定元素的指针\n template \u0026lt;class InputIterator, class T\u0026gt; InputIterator find (InputIterator first, InputIterator last, const T\u0026amp; val);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int arr[] = {10, 20, 5, 23 ,42, 20, 15}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vect(arr, arr+n); cout \u0026lt;\u0026lt; \u0026quot;Occurrences of 20 in vector : \u0026quot;; cout \u0026lt;\u0026lt; count(vect.begin(), vect.end(), 20) \u0026lt;\u0026lt; endl; find(vect.begin(), vect.end(), 5) != vect.end()? cout \u0026lt;\u0026lt; \u0026quot;Element 5 found\\n\u0026quot; : cout \u0026lt;\u0026lt; \u0026quot;Element 5 not found\\n\u0026quot;; return 0; }   二分查找指定元素\n template \u0026lt;class ForwardIterator, class T\u0026gt; bool binary_search (ForwardIterator first, ForwardIterator last, const T\u0026amp; val); template \u0026lt;class ForwardIterator, class T, class Compare\u0026gt; bool binary_search (ForwardIterator first, ForwardIterator last, const T\u0026amp; val, Compare comp);  返回指向第一个不小于指定元素的迭代器(序列有序)\n template \u0026lt;class ForwardIterator, class T\u0026gt; ForwardIterator lower_bound (ForwardIterator first, ForwardIterator last, const T\u0026amp; val); template \u0026lt;class ForwardIterator, class T, class Compare\u0026gt; ForwardIterator lower_bound (ForwardIterator first, ForwardIterator last, const T\u0026amp; val, Compare comp);  返回指向第一个大于指定元素的迭代器(序列有序)\n template \u0026lt;class ForwardIterator, class T\u0026gt; ForwardIterator upper_bound (ForwardIterator first, ForwardIterator last, const T\u0026amp; val); template \u0026lt;class ForwardIterator, class T, class Compare\u0026gt; ForwardIterator upper_bound (ForwardIterator first, ForwardIterator last, const T\u0026amp; val, Compare comp);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int arr[] = {5, 10, 15, 20, 20, 23, 42, 45}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vect(arr, arr+n); sort(vect.begin(), vect.end()); for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; endl; auto q = lower_bound(vect.begin(), vect.end(), 20); cout \u0026lt;\u0026lt; \u0026quot;The lower bound for 20 is at position: \u0026quot;; cout \u0026lt;\u0026lt; q-vect.begin() \u0026lt;\u0026lt; endl; auto p = upper_bound(vect.begin(), vect.end(), 20); cout \u0026lt;\u0026lt; \u0026quot;The upper bound for 20 is at position: \u0026quot;; cout \u0026lt;\u0026lt; p-vect.begin() \u0026lt;\u0026lt; endl; return 0; }    加工算法  过滤连续相等的元素\n template \u0026lt;class ForwardIterator\u0026gt; ForwardIterator unique (ForwardIterator first, ForwardIterator last); template \u0026lt;class ForwardIterator, class BinaryPredicate\u0026gt; ForwardIterator unique (ForwardIterator first, ForwardIterator last, BinaryPredicate pred);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int arr[] = {5, 10, 15, 20, 20, 23, 42, 45}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vect(arr, arr+n); for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); vect.erase(vect.begin()+1); cout \u0026lt;\u0026lt; \u0026quot;\\nVector after erasing the second element: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); sort(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nVector before removing duplicate occurrences: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); vect.erase(unique(vect.begin(),vect.end()),vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nVector after deleting duplicates: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); return 0; }   返回下一个置换\n template \u0026lt;class BidirectionalIterator\u0026gt; bool next_permutation (BidirectionalIterator first, BidirectionalIterator last); template \u0026lt;class BidirectionalIterator, class Compare\u0026gt; bool next_permutation (BidirectionalIterator first, BidirectionalIterator last, Compare comp);  返回前一个置换\n template \u0026lt;class BidirectionalIterator\u0026gt; bool prev_permutation (BidirectionalIterator first, BidirectionalIterator last ); template \u0026lt;class BidirectionalIterator, class Compare\u0026gt; bool prev_permutation (BidirectionalIterator first, BidirectionalIterator last, Compare comp);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int arr[] = {5, 10, 15, 20, 20, 23, 42, 45}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vect(arr, arr+n); cout \u0026lt;\u0026lt; \u0026quot;Given Vector is: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); next_permutation(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nVector after performing next permutation: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); prev_permutation(vect.begin(), vect.end()); cout \u0026lt;\u0026lt; \u0026quot;\\nVector after performing prev permutation: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); return 0; }   计算迭代器之间的距离。用于查找下标\n 包含在头文件 iterator template\u0026lt;class InputIterator\u0026gt; typename iterator_traits\u0026lt;InputIterator\u0026gt;::difference_type distance (InputIterator first, InputIterator last);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int arr[] = {5, 10, 15, 20, 20, 23, 42, 45}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vect(arr, arr+n); cout \u0026lt;\u0026lt; \u0026quot;Given Vector is: \u0026quot;; for_each(vect.begin(), vect.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; \u0026quot;\\nDistance between first to max element: \u0026quot; \u0026lt;\u0026lt; distance(vect.begin(), max_element(vect.begin(), vect.end())) \u0026lt;\u0026lt; endl; return 0; }    有用的 Array 算法  以下算法在 C++11 开始支持 测试序列是否都满足某个条件  template \u0026lt;class InputIterator, class UnaryPredicate\u0026gt; bool all_of (InputIterator first, InputIterator last, UnaryPredicate pred);  测试序列是否存在一个元素满足某个条件  template \u0026lt;class InputIterator, class UnaryPredicate\u0026gt; bool any_of (InputIterator first, InputIterator last, UnaryPredicate pred);  测试序列是否都不满足某个条件  template \u0026lt;class InputIterator, class UnaryPredicate\u0026gt; bool none_of (InputIterator first, InputIterator last, UnaryPredicate pred);  拷贝序列元素  template \u0026lt;class InputIterator, class Size, class OutputIterator\u0026gt; OutputIterator copy_n (InputIterator first, Size n, OutputIterator result);  存储增加的序列\n template \u0026lt;class ForwardIterator, class T\u0026gt; void iota (ForwardIterator first, ForwardIterator last, T val);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;numeric\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; int main() { int arr1[] = {1, 2, 3, 4, 5, -6}; all_of(arr1, arr1+6, [](int x) {return x\u0026gt;0;}) ? cout \u0026lt;\u0026lt; \u0026quot;All are positive elments\\n\u0026quot; : cout \u0026lt;\u0026lt; \u0026quot;Not all are positive elments\\n\u0026quot;; any_of(arr1, arr1+6, [](int x) {return x\u0026lt;0;}) ? cout \u0026lt;\u0026lt; \u0026quot;There exists a negative element\\n\u0026quot; : cout \u0026lt;\u0026lt; \u0026quot;All are positive elments\\n\u0026quot;; int arr2[] = {1, 2, 3, 4, 5, 6}; none_of(arr2, arr2+6, [](int x) {return x\u0026lt;0;}) ? cout \u0026lt;\u0026lt; \u0026quot;No negative elements\\n\u0026quot; : cout \u0026lt;\u0026lt; \u0026quot;There exists a negative element\\n\u0026quot;; int arrc[6]; copy_n(arr2, 6, arrc); cout \u0026lt;\u0026lt; \u0026quot;Copyed array: \u0026quot;; for_each(arrc, arrc+6, [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; endl; int arr3[6] = {0}; iota(arr3, arr3+6, 20); cout \u0026lt;\u0026lt; \u0026quot;Assigned array: \u0026quot;; for_each(arr3, arr3+6, [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; endl; return 0; }    划分操作  根据条件重排序列，返回第一个不满足条件的迭代器  template \u0026lt;class ForwardIterator, class UnaryPredicate\u0026gt; ForwardIterator partition (ForwardIterator first, ForwardIterator last, UnaryPredicate pred);  根据条件重排序列，且两组元素内部的相对顺序保持不变。一般是用临时缓冲区实现  template \u0026lt;class BidirectionalIterator, class UnaryPredicate\u0026gt; BidirectionalIterator stable_partition (BidirectionalIterator first, BidirectionalIterator last, UnaryPredicate pred);  判断序列是否是根据条件划分的  template \u0026lt;class InputIterator, class UnaryPredicate\u0026gt; bool is_partitioned (InputIterator first, InputIterator last, UnaryPredicate pred);  输入队列已经是分割过的，二分查找分界点  template \u0026lt;class ForwardIterator, class UnaryPredicate\u0026gt; ForwardIterator partition_point (ForwardIterator first, ForwardIterator last, UnaryPredicate pred);  输入序列中满足条件和不满足条件的分别拷贝到两个序列中\n template \u0026lt;class InputIterator, class OutputIterator1, class OutputIterator2, class UnaryPredicate pred\u0026gt; pair\u0026lt;OutputIterator1,OutputIterator2\u0026gt; partition_copy (InputIterator first, InputIterator last, OutputIterator1 result_true, OutputIterator2 result_false, UnaryPredicate pred);\n#include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; int main() { vector\u0026lt;int\u0026gt; vect1 = { 2, 1, 5, 6, 8, 7 }; cout \u0026lt;\u0026lt; \u0026quot;The vector is: \u0026quot;; for_each(vect1.begin(), vect1.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); is_partitioned(vect1.begin(), vect1.end(), [](int i) {return i%2==0;}) ? cout \u0026lt;\u0026lt; \u0026quot;\\nVector is partitioned\u0026quot; : cout \u0026lt;\u0026lt; \u0026quot;\\nVector is not partitioned\u0026quot;; partition(vect1.begin(), vect1.end(), [](int i){return i%2==0;}); cout \u0026lt;\u0026lt; \u0026quot;\\nThe partitioned vector is: \u0026quot;; for_each(vect1.begin(), vect1.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); is_partitioned(vect1.begin(), vect1.end(), [](int i) {return i%2==0;}) ? cout \u0026lt;\u0026lt; \u0026quot;\\nNow, vector is partitioned after partition operation\u0026quot;: cout \u0026lt;\u0026lt; \u0026quot;\\nVector is still not partitioned after partition operation\u0026quot;; vector\u0026lt;int\u0026gt; vect2 = { 2, 1, 5, 6, 8, 7 }; cout \u0026lt;\u0026lt; \u0026quot;\\n\\nThe vector is: \u0026quot;; for_each(vect2.begin(), vect2.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); stable_partition(vect2.begin(), vect2.end(), [](int i) {return i%2==0;}); cout \u0026lt;\u0026lt; \u0026quot;\\nThe stable partitioned vector is: \u0026quot;; for_each(vect2.begin(), vect2.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); auto it = partition_point(vect2.begin(), vect2.end(), [](int i) {return i%2==0;}); cout \u0026lt;\u0026lt; \u0026quot;\\nBefore the partition point: \u0026quot;; for_each(vect2.begin(), it, [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; \u0026quot;\\nAfter the partition point: \u0026quot;; for_each(it, vect2.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); vector\u0026lt;int\u0026gt; vect3 = { 2, 1, 5, 6, 8, 7 }; cout \u0026lt;\u0026lt; \u0026quot;\\n\\nThe vector is: \u0026quot;; for_each(vect3.begin(), vect3.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); vector\u0026lt;int\u0026gt; vecteven, vectodd; int n = count_if(vect3.begin(), vect3.end(), [](int i) {return i%2==0;}); vecteven.resize(n); vectodd.resize(vect3.size()-n); partition_copy(vect3.begin(), vect3.end(), vecteven.begin(), vectodd.begin(), [](int i) {return i%2==0;}); cout \u0026lt;\u0026lt; \u0026quot;\\nThe elements that return true for condition are : \u0026quot;; for_each(vecteven.begin(), vecteven.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; \u0026quot;\\nThe elements that return false for condition are : \u0026quot;; for_each(vectodd.begin(), vectodd.end(), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; endl; return 0; }    头文件 valarray  valarray 类：C++98 引入的特殊容器，用于保存和提供对 array 的高效算术操作 应用操作到所有的元素，返回一个新的 valarray  valarray apply (T func(T)) const; valarray apply (T func(const T\u0026amp;)) const;  返回所有元素的和  T sum() const;  返回元素的最小值  T min() const;  返回元素的最大值  T max() const;  将 valarray 的元素移位，返回新的 valarray。如果参数为正数，左移；否则右移  valarray shift (int n) const;  将 valarray 的元素循环移位，返回新的 valarray。如果参数为正数，循环左移；否则循环右移  valarray cshift (int n) const;  和另外一个 valarray 交换\n void swap (valarray\u0026amp; x) noexcept;\n#include \u0026lt;valarray\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; int main() { valarray\u0026lt;int\u0026gt; varr1 = { 10, 2, 20, 1, 30 }; cout \u0026lt;\u0026lt; \u0026quot;The varr1 is: \u0026quot;; for_each(begin(varr1), end(varr1), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; \u0026quot;\\nThe sum of varr1 is: \u0026quot; \u0026lt;\u0026lt; varr1.sum(); cout \u0026lt;\u0026lt; \u0026quot;\\nThe max of varr1 is: \u0026quot; \u0026lt;\u0026lt; varr1.max(); cout \u0026lt;\u0026lt; \u0026quot;\\nThe min of varr1 is: \u0026quot; \u0026lt;\u0026lt; varr1.min(); valarray\u0026lt;int\u0026gt; varr2; varr2 = varr1.apply([](int i){return i=i+5;}); cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr2 (varr1 add 5 for each element) is: \u0026quot;; for_each(begin(varr2), end(varr2), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); valarray\u0026lt;int\u0026gt; varr3; varr3 = varr1.shift(2); cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr3 (varr1 shift 2) is: \u0026quot;; for_each(begin(varr3), end(varr3), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); varr3 = varr1.shift(-2); cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr3 (varr1 shift -2) is: \u0026quot;; for_each(begin(varr3), end(varr3), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); varr3 = varr1.cshift(2); cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr3 (varr1 cshift 2) is: \u0026quot;; for_each(begin(varr3), end(varr3), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); varr3 = varr1.cshift(-2); cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr3 (varr1 cshift -2) is: \u0026quot;; for_each(begin(varr3), end(varr3), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); valarray\u0026lt;int\u0026gt; varr4 = {2, 4, 6, 8}; cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr4 is: \u0026quot;; for_each(begin(varr4), end(varr4), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); varr1.swap(varr4); cout \u0026lt;\u0026lt; \u0026quot;\\nThe varr4 after swap with varr1 is: \u0026quot;; for_each(begin(varr4), end(varr4), [](int i) {cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot;;}); cout \u0026lt;\u0026lt; \u0026quot;\\n\u0026quot;; return 0; }    容器  容器是一个对象，保存了其他对象或对象元素的集合 容器自己管理元素的存储空间，并且提供成员函数来访问元素，直接访问或通过迭代器访问 容器类模板：包括顺序容器、容器适配器、关联容器和无序关联容器  顺序容器  实现的数据结构可以按顺序访问  array  C++11 引入，替换 C 风格数组。相比 C 风格数组的优点包括  array 知道自己的大小，因此传递参数时不需要单独传递 array 的大小 C 风格的数组会有退化成指针的风险，但是 array 不会 相比 C 风格数组，array 更加高效、轻量和可靠  方法  at： get：不是 array 的类成员函数，而是重载 tuple 类的函数 []: 类似于 C 风格的数组访问 front/back：返回第一个/最后一个元素 size/max_size：返回 array 的元素数目/可以承载的最大元素数目。二者返回值相同 swap：和另外一个 array 交换元素 empty：array 的大小是否是 0 fill：使用指定值填充正哥 array  固定大小数组，顺序连续存储，可使用偏移量访问 大小为 0 是有效的，但是不能间接引用，比如 front，back，data 交换是按顺序交换每个元素，效率低 可以当做 tuple（可以存储不同类型的元素的集合），重载了 get 接口等 访问快，可使用偏移量访问，常数时间  vector  大小可变数组，顺序连续存储，可使用偏移量访问 一开始分配额外的存储空间，容量一般不等于实际大小 使用动态分配数组存储元素，插入元素时可能需要重新分配数组，将所有元素移到新的数组，效率低 访问快，和 array 一样，在尾部插入和删除也快。删除元素是常数时间，不会重新调整大小 在其他位置插入和删除低效，需要线性时间。没有随机访问迭代器  deque  双端队列，顺序存储，可在两端增加或减小大小 可用随机访问迭代器直接访问单个元素 vs vector  存储可以是不连续的块，在容器增加或减小时内存分配效率更高   forward_list  C++11 引入 顺序存储，在任意位置插入和删除都是常数时间 单向链表，存储位置可以是不同的没有关系的 vs array/vector/deque  list 和 forward_list 的插入、删除更有效，对于排序算法也更快（交换更快） list 和 forward_list 没有根据位置直接访问元素的方法，同时每个节点需要额外的存储存储链接的相关信息 list 和 forward_list 遍历较慢 list 和 forward_list 没有 size 方法，因为很耗时，可以使用 distance 算法（包含在头文件\u0026lt;iterator\u0026gt;）计算 begin 和 end 之间的距离，消耗时间是线性的   list  双向链表 forward_list vs list： 前者只存储一个指向后面对象的链接，后者存储两个链接分别指向前一个和后一个对象，因此两个方向的迭代都比较搞笑，但同时每个节点需要额外的存储，且插入和删除也有额外的时间负载  容器适配器  不完全是容器类，而是依赖某一个容器类提供特定的接口，封装之后提供不同于顺序容器的接口  stack  后进先出（LIFO），使用标准的容器（vector/deque/list）类模板实现接口，如果初始化未指定容器类，则使用 deque 实现相关接口 如std::stack\u0026lt;int, std::vector\u0026lt;int\u0026gt; \u0026gt; mystack使用 vector 实现的空的 stack  queue  先进先出（FIFO）队列，使用标准的容器（deque/list）类模板实现接口，默认使用 deque 如std::queue\u0026lt;int, std::list\u0026lt;int\u0026gt; \u0026gt; myqueue使用 list 实现的空的 queue  priority_queue  依据严格的弱排序（strict weak ordering）标准第一个元素总是最大的元素，所有元素是非增序的 使用标准的容器（vector/deque）类模板实现接口，，默认是 vector C++ 默认为 priority_queue 创建最大堆\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; using namespace std; void showpq(priority_queue\u0026lt;int\u0026gt; \u0026amp;gq) { priority_queue\u0026lt;int\u0026gt; g = gq; while (!g.empty()) { cout \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; g.top(); g.pop(); } cout \u0026lt;\u0026lt; endl; } int main () { priority_queue\u0026lt;int\u0026gt; gquiz; gquiz.push(10); gquiz.push(30); gquiz.push(20); gquiz.push(5); gquiz.push(1); cout \u0026lt;\u0026lt; \u0026quot;The priority queue gquiz is: \u0026quot;; showpq(gquiz); cout \u0026lt;\u0026lt; \u0026quot;gquiz.size(): \u0026quot; \u0026lt;\u0026lt; gquiz.size() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026quot;gquiz.top(): \u0026quot; \u0026lt;\u0026lt; gquiz.top() \u0026lt;\u0026lt; endl; gquiz.pop(); cout \u0026lt;\u0026lt; \u0026quot;after gquiz.pop(): \u0026quot;; showpq(gquiz); return 0; }  为 priority_queue 创建最小堆 priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; g=gq;\n 下面的语法难记，因此对于数字的值，可以给每个元素乘以 -1，然后使用最大值堆达到最小值堆的效果\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;queue\u0026gt; using namespace std; void showpq(priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; \u0026amp;gq) { priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; g = gq; while(!g.empty()) { cout \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; g.top(); g.pop(); } cout \u0026lt;\u0026lt; endl; } int main () { priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; gquiz; gquiz.push(10); gquiz.push(30); gquiz.push(20); gquiz.push(5); gquiz.push(1); cout \u0026lt;\u0026lt; \u0026quot;The priority queue gquiz is: \u0026quot;; showpq(gquiz); cout \u0026lt;\u0026lt; \u0026quot;gquiz.size(): \u0026quot; \u0026lt;\u0026lt; gquiz.size() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026quot;gquiz.top(): \u0026quot; \u0026lt;\u0026lt; gquiz.top() \u0026lt;\u0026lt; endl; gquiz.pop(); cout \u0026lt;\u0026lt; \u0026quot;after gquiz.pop(): \u0026quot;; showpq(gquiz); return 0; }    关联容器  实现排好序的数据结构，可以达到快速查询的时间复杂度 O(logn)  set  保存的值都是唯一的，不能修改，只能插入或删除，key 和 value 相同 存储的元素总是依照严格的弱排序标准排序，通过内部的比较对象 在通过 key 访问单个元素的时候通常比 unordered_set 慢，但是可以访问有序集合的一个子集 通常实现为二分搜索树  multiset  可以存储相同值的元素 在通过 key 访问的那个元素的时候比 unordered_multiset 慢  map  关联容器，存储的对象包括一个 key 和映射的 value 通过 key 排序和标记唯一元素，存储的元素总是依照严格的弱排序标准排序，通过内部的比较对象 在通过 key 访问单个元素的时候通常比 unordered_map 慢，但是可以访问有序集合的一个子集 通常实现为二分搜索树  multimap 无序关联容器  实现无序数据结构，可以快速查询  unordered_set unordered_multiset unordered_map unordered_multimap 仿函数 迭代器 参考  C++ STL Tutorial The C++ Standard Template Library (STL) C++/STL/Algorithm C++/Numeric  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"f5a59d7aa9c3c87853d13b51ac76aad4","permalink":"https://xueqing.github.io/blog/cplusplus/stl/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/stl/","section":"blog","summary":"介绍 算法 头文件 algorithm 排序 搜索 重要的 STL 算法 未加工算法 加工算法 有用的 Array 算法 划分操作 头文件 valarray 容器 顺序容器 array vector deque forward_list list 容器适配器 stack queue priority_queue 关联容器 set multiset map multimap 无序","tags":["c++","STL"],"title":"STL","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  前言 std::queue::emplace  std::deque::emplace_back std::allocator_traits::construct std::allocator std::deque::allocator  std::queue::push  std::deque::push_back  std::vector 的 emplace_back 和 push_back  产生时间 类型的构造函数不止 1 个 效率  std::map 的 emplace 和 insert 其他参考  前言  下面的说明以 STL 的 queue 为实例，其他 STL 还有 push_back/emplace_back 等，各自的影响不尽相同  deque: emplace/emplace_back/emplace_front/insert/push_back/push_front forward_list: emplace_after/emplace_front/insert_after/push_front list: emplace/emplace_back/emplace_front/insert/push_back/push_front map: emplace/emplace_hint/insert queue: emplace/push set: emplace/emplace_hint/insert stack: emplace/push vector: emplace/emplace_back/insert/push_back   std::queue::emplace  参考 std::queue::emplace 函数原型： template \u0026lt;class... Args\u0026gt; void emplace (Args\u0026amp;\u0026amp;... args);  args：被传递作为新元素构造函数的参数  功能：构造并插入一个元素。增加新元素到 queue 的末尾，即当前最后一个元素之后。将传入的参数作为新元素的构造函数的参数。 底层容器对象调用 emplace_back，并传递参数。  std::deque::emplace_back  参考 std::deque::emplace_back 函数原型：template \u0026lt;class... Args\u0026gt; void emplace_back (Args\u0026amp;\u0026amp;... args);  args：被传递作为新元素构造函数的参数  功能：构造并在末尾插入一个元素。增加新元素到 deque 的末尾，即当前最后一个元素之后。将传入的参数作为新元素的构造函数的参数。 这个操作将容器大小高效增加 1 元素通过调用 std::allocator_traits::construct 和参数构造。  新元素的存储通过 allocator_traits\u0026lt;allocator_type\u0026gt;::construct() 分配，失败时可能会抛异常(对于默认的 std::allocator，分配失败会抛 bad_alloc 异常)。  迭代器有效性：容器相关的所有迭代器无效，但是指针和引用是有效的，和调用函数之前指向的元素相同。 异常安全性：强保证。如果抛出异常，则容器没有改变。如果 std::allocator_traits::construct 对于传递的参数不支持，会导致未定义的行为。  std::allocator_traits::construct  参考 std::allocator_traits::construct 静态成员函数 函数原型：template \u0026lt;class T, class... Args\u0026gt; static void construct (allocator_type alloc, T* p, Args\u0026amp;\u0026amp;... args ); 功能：构造一个元素。在指针 p 指向的位置传递参数给构造函数构造一个元素对象。 注意：对象被 in-place 构造，而不用为元素分配存储。如果不可行，则调用 ::new (static_cast\u0026lt;void*\u0026gt;(p)) T (forward\u0026lt;Args\u0026gt;(args)...)  std::allocator  参考 std::allocator 函数原型：template \u0026lt;class T\u0026gt; class allocator;  T：对象分配的元素类型  功能：默认分配器。  分配器：定义内存模型的类，被标准库的一些部分使用，大多数情况是被 STL 容器使用。 allocator 是默认分配器模板，这是所有标准容器未指定最后一个(可选的)模板参数时会使用的分配器，也是标准库中唯一一个预定义的分配器。   std::deque::allocator  参考std::deque::get_allocator 函数原型：allocator_type get_allocator() const noexcept;  allocator_type：是容器使用的分配器的类型  功能：返回和 deque 对象相关的分配器对象的拷贝。 异常安全性：保证没有异常。拷贝默认分配器的任何实例也保存不会抛异常  std::queue::push  参考 std::queue::push 函数原型：void push (const value_type\u0026amp; val);或void push (value_type\u0026amp;\u0026amp; val);  val：经过初始化的新插入元素的值 value_type：是容器元素的类型  功能：插入一个新元素到 queue 末尾，即当前最后一个元素之后。新元素的内容被初始化为 val。 底层容器对象调用 push_back  std::deque::push_back  参考 std::deque::push_back 函数原型：void push_back (const value_type\u0026amp; val);或void push_back (value_type\u0026amp;\u0026amp; val);  val：将要拷贝或移动给新对象的值 value_type：是容器元素的类型  新元素的存储通过容器的 allocator 分配，失败时可能会抛异常(对于默认的std::allocator，分配失败会抛 bad_alloc 异常) 迭代器有效性：容器相关的所有迭代器无效，但是指针和引用是有效的，和调用函数之前指向的元素相同。 异常安全性：强保证。如果抛出异常，则容器没有改变。如果 std::allocator_traits::construct 对于传递的参数不支持，会导致未定义的行为。  std::vector 的 emplace_back 和 push_back 产生时间  push_back 是标准 C++ 创建之初就有的；emplace_back 是在 C++11 特性前提下增加的  类型的构造函数不止 1 个  当类型的构造函数不止 1 个时：push_back 只接收类型的对象，emplace_back 接收类型构造函数的参数 C++ 11 支持从参数构造对象，因此当类型的构造函数参数只有一个时，push_back 可以传入构造函数参数，C++ 11 会构造对象，并传递对象给容器\nclass OneParam { int m_i; public: OneParam(int ii) : m_i(ii) { cout \u0026lt;\u0026lt; \u0026quot;OneParam::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } OneParam(const OneParam \u0026amp;copy) : m_i(copy.m_i) { cout \u0026lt;\u0026lt; \u0026quot;OneParam::copy::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } ~OneParam( ) { cout \u0026lt;\u0026lt; \u0026quot;~OneParam::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } int get() const { return m_i; } }; class MoreThanOneParam { int m_i; string m_s; public: MoreThanOneParam(int ii, string s) : m_i(ii), m_s(s) { cout \u0026lt;\u0026lt; \u0026quot;MoreThanOneParam::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } MoreThanOneParam(const MoreThanOneParam \u0026amp;copy) : m_i(copy.m_i), m_s(copy.m_s) { cout \u0026lt;\u0026lt; \u0026quot;MoreThanOneParam::copy::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } ~MoreThanOneParam( ) { cout \u0026lt;\u0026lt; \u0026quot;~MoreThanOneParam::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } int getInt() const { return m_i; } string getString() const { return m_s; } }; int main( ) { vector\u0026lt;OneParam\u0026gt; vec1={ 21 , 45 }; //对于每个元素，构造一次，拷贝一次，析构一次 vec1.push_back( OneParam(34) ); //构造一次，拷贝一次，析构一次【底层可能会对 vector 重新分配内存，导致对之前元素的拷贝和析构】 vec1.push_back( 901 ); //构造一次，拷贝一次，析构一次 vec1.emplace_back( OneParam(7889) ); //构造一次，拷贝一次，析构一次【底层可能会对 vector 重新分配内存，导致对之前元素的拷贝和析构】 vec1.emplace_back( 4156 ); //构造一次 //21; 45; 34; 901; 7889; 4156; for( auto \u0026amp;elem:vec1 ) { cout \u0026lt;\u0026lt; elem.get() \u0026lt;\u0026lt; \u0026quot;; \u0026quot;; } //21; 45; 34; 901; 7889; 4156; cout \u0026lt;\u0026lt; endl; vector\u0026lt;MoreThanOneParam\u0026gt; vec2={ {21,\u0026quot;String\u0026quot;} , MoreThanOneParam{45 , \u0026quot;tinger\u0026quot;} }; //对于每个元素，构造一次，拷贝一次，析构一次 vec2.push_back( MoreThanOneParam(34 , \u0026quot;Happy\u0026quot; ) ); //构造一次，拷贝一次，析构一次【底层可能会对 vector 重新分配内存，导致对之前元素的拷贝和析构】 // vec2.push_back( 901 , \u0026quot;Doer\u0026quot; ); //Error!! vec2.emplace_back( MoreThanOneParam(78 , \u0026quot;Gomu gomu\u0026quot; )); //构造一次，拷贝一次，析构一次【底层可能会对 vector 重新分配内存，导致对之前元素的拷贝和析构】 vec2.emplace_back( 41 , \u0026quot;Shanks\u0026quot; ); //构造一次 //21 String; 45 tinger; 34 Happy; 78 Gomu gomu; 41 Shanks; for( auto \u0026amp;elem:vec2 ) { cout \u0026lt;\u0026lt; elem.getInt( ) \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; elem.getString( ) \u0026lt;\u0026lt; \u0026quot;; \u0026quot;; } cout \u0026lt;\u0026lt; endl; cin.get( ); return 0; }   效率  这里的效率指的是：代码工作更快，生成的负载更小 当 vector 的类型是内置类型时，push_back 和 emplace_back 没有区别 当 vector 的类型是用户自定义类型时，emplace_back 比 push_back 更高效  当尝试直接添加对象 (在对象被创建之前) 到 vector，使用 push_back 的流程是 调用构造函数创建临时对象 在 vector 中创建临时对象的拷贝 拷贝对象完成之后，调用析构函数销毁临时对象 使用 emplace_back 将不会创建临时对象，而是直接在 vector 中创建对象。因此提高了性能   std::map 的 emplace 和 insert  insert 需要先创建临时对象，然后拷贝到 std::pair\u0026lt;key, val\u0026gt; 中，再将 pair 拷贝到 map 中\nclass Complicated { int m_i; double m_d; string m_s; public: Complicated(int i, double d, string s) : m_i(i), m_d(d), m_s(s) { cout \u0026lt;\u0026lt; \u0026quot;Complicated::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } Complicated(const Complicated \u0026amp;copy) : m_i(copy.m_i), m_d(copy.m_d), m_s(copy.m_s) { cout \u0026lt;\u0026lt; \u0026quot;Complicated::copy::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } ~Complicated() { cout \u0026lt;\u0026lt; \u0026quot;~Complicated::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } }; int main() { map\u0026lt;int, Complicated\u0026gt; m; m.insert( make_pair(4, Complicated(4, 4.0, \u0026quot;C++4\u0026quot;)) ); //构造一次，拷贝两次，析构两次 m.insert( 5, {5, 5.0, \u0026quot;C++5\u0026quot;} ); //构造一次，拷贝两次，析构两次 m.insert( pair\u0026lt;int, Complicated\u0026gt;(7, {7, 7.0, \u0026quot;C++7\u0026quot;}) ); //构造一次，拷贝两次，析构两次 m.emplace( piecewise_construct, forward_as_tuple(6), forward_as_tuple(6, 6.0, \u0026quot;C++6\u0026quot;) ); //构造一次 //4; 5; 6; 7; for( auto \u0026amp;elem:m ) cout \u0026lt;\u0026lt; elem.first \u0026lt;\u0026lt; \u0026quot;; \u0026quot;; cout \u0026lt;\u0026lt; endl; cin.get(); return 0; }   其他参考  C++ difference between emplace_back and push_back function https://stackoverflow.com/questions/4303513/push-back-vs-emplace-back  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"d054bc79d43f2d4d30576ae2b88f84a8","permalink":"https://xueqing.github.io/blog/cplusplus/stl_push_emplace/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/stl_push_emplace/","section":"blog","summary":"前言 std::queue::emplace std::deque::emplace_back std::allocator_traits::construct std::allocator std::deque::allocator std::queue::push std::deque::push_back std::vector 的 emplace_back 和 push_back 产生时间 类型的构造函数不止 1 个 效率 std::map 的 emplace 和 insert 其他参考 前言 下面的说明以 STL 的 queue 为实例，其他 STL 还有 push_back/emplace_back 等，各自的影响不尽","tags":["c++","STL"],"title":"STL 的 push 和 emplace","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" find vs find_first_of  find 函数原型\n// c++11 string (1) size_t find (const string\u0026amp; str, size_t pos = 0) const noexcept; c-string (2) size_t find (const char* s, size_t pos = 0) const; buffer (3) size_t find (const char* s, size_t pos, size_type n) const; character (4) size_t find (char c, size_t pos = 0) const noexcept;  find_first_of 函数原型\n// c++11 string (1) size_t find_first_of (const string\u0026amp; str, size_t pos = 0) const noexcept; c-string (2) size_t find_first_of (const char* s, size_t pos = 0) const; buffer (3) size_t find_first_of (const char* s, size_t pos, size_t n) const; character (4) size_t find_first_of (char c, size_t pos = 0) const noexcept;  对比\n find：匹配查找整个字符串 find_first_of：匹配查找指定参数的任意一个字符   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"a844b2c63b93f024683bd7c8adeb84e2","permalink":"https://xueqing.github.io/blog/cplusplus/string/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/string/","section":"blog","summary":"find vs find_first_of find 函数原型 // c++11 string (1) size_t find (const string\u0026amp; str, size_t pos = 0) const noexcept; c-string (2) size_t find (const char* s, size_t pos = 0) const; buffer (3) size_t find (const char* s, size_t pos, size_type n) const; character (4) size_t find (char c, size_t pos = 0) const noexcept; find_first_of 函数原型 // c++11 string (1) size_t find_first_of","tags":["c++"],"title":"string","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Stringers Make the IPAddr type implement fmt.Stringer to print the address as a dotted quad. For instance, IPAddr{1, 2, 3, 4} should print as \u0026quot;1.2.3.4\u0026quot;. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;strconv\u0026quot; \u0026quot;strings\u0026quot; ) type iPAddr [4]byte func (ip iPAddr) String() string { arr := []string{\u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;} for i := 0; i \u0026lt; 4; i++ { arr[i\u0026lt;\u0026lt;1] = strconv.Itoa(int(ip[i])) } sip := strings.Join(arr, \u0026quot;\u0026quot;) return sip } func main() { hosts := map[string]iPAddr{ \u0026quot;loopback\u0026quot;: {127, 0, 0, 1}, \u0026quot;googleDNS\u0026quot;: {8, 8, 8, 8}, } for name, ip := range hosts { fmt.Printf(\u0026quot;%v: %v\\n\u0026quot;, name, ip) } }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8e3551f16161a6a08dbe0dda88b01799","permalink":"https://xueqing.github.io/translation/go-doc/gotour/stringer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/stringer/","section":"translation","summary":"/* Exercise: Stringers Make the IPAddr type implement fmt.Stringer to print the address as a dotted quad. For instance, IPAddr{1, 2, 3, 4} should print as \u0026quot;1.2.3.4\u0026quot;. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;strconv\u0026quot; \u0026quot;strings\u0026quot; ) type iPAddr [4]byte func (ip iPAddr) String() string { arr := []string{\u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;} for i := 0; i \u0026lt; 4; i++ { arr[i\u0026lt;\u0026lt;1] = strconv.Itoa(int(ip[i])) } sip := strings.Join(arr, \u0026quot;\u0026quot;) return sip } func main() { hosts := map[string]iPAddr{ \u0026quot;loopback\u0026quot;: {127, 0, 0, 1}, \u0026quot;googleDNS\u0026quot;: {8, 8, 8, 8}, } for name, ip := range hosts { fmt.","tags":["go-tour"],"title":"Stringers","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  概述  基准测试 示例函数 跳过测试 子测试项目和子基准测试 Main  索引 例子 子目录  参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;testing\u0026quot;\n概述 testing 包提供对 Go 包的自动测试。它适用于和 go test 命令协作，自动执行下面格式的函数\nfunc TestXxx(*testing.T)  其中，Xxx 不是小写字母开头。这个函数名用于识别测试代码。\n在这些函数中，使用 Error、Fail 或相关的方法来标记失败。\n要写一个新的测试集，新建一个文件以 _test.go 结尾，其中包含上述的 TestXxx 函数。将此文件放在将要测试的同一包中。正常的包编译不会包含此文件，但是运行 go test 命令时会包含。查看更多细节，运行 go help test 和 go help testflag。\n一个简单的功能测试函数看起来像这样：\nfunc TestAbs(t testing.T) { got := Abs(-1) if got != 1 { t.Errorf(\u0026quot;Abs(-1) = %d; want 1\u0026quot;, got) } }  基准测试 下面格式的函数被当做基准测试，并且当 go test 命令提供 -bench 标记时会执行此函数。基准测试是顺序执行的。\nfunc BenchmarkXxxx(*testing.B)  对 testing 标记的描述，查看 Testing flags。\n一个简单的基准测试函数看起来像这样：\nfunc BenchmarkHello(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { fmt.Sprintf(\u0026quot;hello\u0026quot;) } }  基准测试函数必须运行目标代码 b.N 次。在执行基准测试期间，会调整 b.N 直到基准测试函数持续时间足够长，认为是时间可靠的。输出 BenchmarkHello 10000000 282 ns/op 意味着这个循环以每次循环 282 纳秒的速度运行了 10000000 次。\n如果一个基准测试在运行之前需要一些耗时的设置，可重置定时器：\nfunc BenchmarkBigLen(b *testing.B) { big := NewBig() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { big.Len() } }  如果一个基准测试需要并行测试性能，可以使用 RunParallel 辅助函数；这样的基准测试适用于和 go test -cpu 标识一起使用：\nfunc BenchmarkTemplateParallel(b *testing.B) { templ := template.Must(template.New(\u0026quot;test\u0026quot;).Parse(\u0026quot;Hello, {{.}}!\u0026quot;)) b.RunParallel(func(pb *testing.PB) { var buf bytes.Buffer for pb.Next() { buf.Reset() templ.Execute(\u0026amp;buf, \u0026quot;World\u0026quot;) } }) }  示例函数 testing 包也会运行和验证示例代码。示例函数可以包含一个总结性的行注释，以 “Output:” 开头，并且运行测试的是和这个函数的标准输出比较。(这个比较忽视开始和末尾的空格)。下面是一个示例代码的例子：\nfunc ExampleHello() { fmt.Println(\u0026quot;hello\u0026quot;) // Output: hello } func ExampleSalutations() { fmt.Println(\u0026quot;hello, and\u0026quot;) fmt.Println(\u0026quot;goodbye\u0026quot;) // Output: // hello, and // goodbye }  注释前缀 “Unordered output:” 类似于 “Output:”，但是匹配任意的行顺序：\nfunc ExamplePerm() { for _, value := range Perm(4) { fmt.Println(value) } // Unordered output: 4 // 2 // 1 // 3 // 0 }  没有输出注释的示例函数被编译但是不会被执行。\n声明包、函数 F、类型 T 和作用于类型 T 的方法 M 的示例函数的命名如下：\nfunc Example() { ... } func ExampleF() { ... } func ExampleT() { ... } func ExampleT_M() { ... }  可通过增加一个不同的后缀到函数名字后面以支持对于一个包/类型/函数/方法的多个示例函数。后缀必须以小写字母开始。\nfunc Example_suffix() { ... } func ExampleF_suffix() { ... } func ExampleT_suffix() { ... } func ExampleT_M_suffix() { ... }  当文件包含一个单独的示例函数，及至少一个其他的函数、类型、变量或常数声明，且没有功能测试函数或者基准测试函数时，整个测试文件作为例子显示。\n跳过测试 可在运行时调用 *T 或 *B 的 Skip 方法跳过功能测试或基准测试：\nfunc TestTimeConsuming(t *testing.T) { if testing.Short() { t.Skip(\u0026quot;skipping test in short mode.\u0026quot;) } // ... }  子测试项目和子基准测试 T 和 B 的 Run 方法允许定义子测试项目和子基准测试，而不需要为每个子测试项目和子基准测试定义另外的函数。这使能使用类似表驱动的基准测试和创建分级测试。它也提供了一种方式来共享共用的设置和终止代码：\nfunc TestFoo(t *testing.T) { // \u0026lt;setup code\u0026gt; t.Run(\u0026quot;A=1\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;A=2\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;B=1\u0026quot;, func(t *testing.T) { ... }) // \u0026lt;tear-down code\u0026gt; }  每个子测试项目和子基准测试有一个唯一的名字：结合顶层测试的名字以及传递给 Run 的名字的顺序，由斜线分隔，以及一个可选的尾随的序号以消除歧义。\n传递给 -run 和 -bench 命令行标识符的参数是一个不固定的正则表达式，匹配了测试的名字。参数是多个斜线分隔的元素时，比如子测试，参数是自身(斜线分隔)；表达式匹配每个名字元素。因为是不固定的，一个空的表达式匹配任意字符串。比如，使用 “matching” 表达 “谁的名字包含”：\ngo test -run '' # Run all tests. go test -run Foo # Run top-level tests matching \u0026quot;Foo\u0026quot;, such as \u0026quot;TestFooBar\u0026quot;. go test -run Foo/A= # For top-level tests matching \u0026quot;Foo\u0026quot;, run subtests matching \u0026quot;A=\u0026quot;. go test -run /A=1 # For all top-level tests, run subtests matching \u0026quot;A=1\u0026quot;.  子测试也可用于控制并行度。一个父测试只有在其子测试完成时才会完成。在这个例子中，所有测试去其他测试并行运行，且只与其他测试并行，而与可能定义的其他顶层测试无关。\nfunc TestGroupedParallel(t *testing.T) { for _, tc := range tests { tc := tc // capture range variable t.Run(tc.Name, func(t *testing.T) { t.Parallel() // ... }) } }  当程序超过 8192 个并行 goroutine 时，竞争检测器会杀掉程序，因此当运行并行测试且设置了 -race 标识时需要注意。\nRun 只有在并行子测试结束才会返回，为一组并行测试之后的资源清理提供了一种方式。\nfunc TestTeardownParallel(t *testing.T) { // This Run will not return until the parallel tests finish. t.Run(\u0026quot;group\u0026quot;, func(t *testing.T) { t.Run(\u0026quot;Test1\u0026quot;, parallelTest1) t.Run(\u0026quot;Test2\u0026quot;, parallelTest2) t.Run(\u0026quot;Test3\u0026quot;, parallelTest3) }) // \u0026lt;tear-down code\u0026gt; }  Main 测试程序有时需要在测试之前或之后做一些额外的设置和清理。并且，测试程序有时需要控制哪些代码运行在主线程。为了满足这些需求和其他的场景，一个测试文件可以包含一个函数：\nfunc TestMain(m *testing.M)  然后，生成的测试会调用 TestMain(m) 而不是直接运行测试。TestMain 在主的 goroutine 运行，且可以做调用 m.Run 前后所需的所有设置和清理。然后，它应该使用 m.Run 的结果调用 OS.Exit。当调用 TestMain 时，flag.Parse 还没有运行。如果 TestMain(包括这些测试包) 依赖命令行标识，应该显式调用 flag.Parse。\n一个简单的 TestMain 的实现：\nfunc TestMain(m *testing.M) { // call flag.Parse() here if TestMain uses flags os.Exit(m.Run()) }  索引 参考\n例子 参考\n子目录    名字 概述     iotest 实现了主要用于 testing 的 Reader 和 Writer   quick 实现了帮助黑盒测试的工具函数    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"2ba7d1a4b1fe66bc92ec62550ecdf5b4","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/testing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/testing/","section":"translation","summary":"概述 基准测试 示例函数 跳过测试 子测试项目和子基准测试 Main 索引 例子 子目录 参考 Golang 官网文档 学习。 导入语句：import \u0026quot;testing\u0026quot; 概述 testing 包提供对 Go 包的自动测试。","tags":["golang-pkg"],"title":"testing 包","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  1 对命名空间的 using 指令  命名空间 using 指令  2 对命名空间成员的 using 声明 3 对类成员的 using 声明 4 类型别名与别名模板声明 参考  1 对命名空间的 using 指令 命名空间  命名空间提供了在大项目中避免名字冲突的一种方法。 声明于命名空间块内的符号被放入一个具名的作用域中，避免这些符号被误认为其他作用域中的同名符号。 允许具有相同名字的多个命名空间块。这些块中的所有声明声明于该具名作用域。  using 指令  语法 attr(可选) using namespace 嵌套名说明符(可选) 命名空间名;  attr(C++11)：应用到此 using 指令的任意数量的属性 嵌套名说明符：名字与作用域解析运算符 :: 的序列，以作用域解析运算符结束。单个 :: 代表全局命名空间 命名空间名：命名空间名。查找此名时，查找只考虑命名空间声明  从 using 指令之后到指令出现的作用域结尾为止，以对任何名字的无限定名字查找的视点来说，来自 命名空间名 的任何名字均可见，如同它声明于同时含有该 using 指令和 命名空间名 两者的最接近外围命名空间作用域一样。  2 对命名空间成员的 using 声明 3 对类成员的 using 声明 4 类型别名与别名模板声明 参考  C++ keywords: using  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"d960745e9010cb226e8fc28ba17fb1eb","permalink":"https://xueqing.github.io/blog/cplusplus/using/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/using/","section":"blog","summary":"1 对命名空间的 using 指令 命名空间 using 指令 2 对命名空间成员的 using 声明 3 对类成员的 using 声明 4 类型别名与别名模板声明 参考 1 对命名空间的 using 指令 命名空间 命名空间","tags":["c++"],"title":"using 关键字","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" resize  原型  void resize (size_type n); void resize (size_type n, const value_type\u0026amp; val);  resize 方法(传递参数来构造是一样的)调整容器大小使得包含 n 个元素  如果当前大小大于 n，会从尾部删除多余的元素 如果当前大小小于 n，会在尾部插入适量的元素到 vector 达到指定的大小(有第二个可选参数指定元素的值)。如果指定值，新元素初始化为 val 的拷贝，否则使用默认构造函数初始化 如果当前容量(capacity) 小于 n，需要重新分配内存  它会影响 size()，如果不需要重新分配内存，则 capacity() 也不会改变  reserver  原型  void reserve (size_type n);  reserve 方法请求修改容量(capacity)，即容量需要足够包含 n 个元素  如果当前容量小于 n，需要重新分配内存，使得容量不小于 n 如果当前容量不小于 n，不会重新分配内存，也不会影响容量  它只会影响 capacity()，size() 不会改变，也不会修改元素。只分配内存，但是没有初始化。容器中没有添加任何元素。如果之后插入元素，容器不会发生重新分配内存。  取舍  如果需要初始化内存，使用 resize 如果知道需要保存元素的大小，只是为了避免多次分配，使用 reserve\n#include \u0026lt;vector\u0026gt; #include \u0026lt;iostream\u0026gt; using namespace std; class MoreThanOneParam { int m_i; string m_s; public: MoreThanOneParam() : m_i(-1) { cout \u0026lt;\u0026lt; \u0026quot;MoreThanOneParam::default::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } MoreThanOneParam(int ii, string s) : m_i(ii), m_s(s) { cout \u0026lt;\u0026lt; \u0026quot;MoreThanOneParam::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } MoreThanOneParam(const MoreThanOneParam \u0026amp;copy) : m_i(copy.m_i), m_s(copy.m_s) { cout \u0026lt;\u0026lt; \u0026quot;MoreThanOneParam::copy::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } ~MoreThanOneParam( ) { cout \u0026lt;\u0026lt; \u0026quot;~MoreThanOneParam::\u0026quot; \u0026lt;\u0026lt; m_i \u0026lt;\u0026lt; endl; } int getInt() const { return m_i; } string getString() const { return m_s; } }; int main( ) { vector\u0026lt;MoreThanOneParam\u0026gt; vec2={ {1,\u0026quot;s1\u0026quot;} , MoreThanOneParam{2 , \u0026quot;s2\u0026quot;} }; //对于每个元素，构造一次，拷贝一次，析构一次 cout \u0026lt;\u0026lt; \u0026quot;=============at first, size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.reserve(6); cout \u0026lt;\u0026lt; \u0026quot;=============after reserve(6), size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.push_back( MoreThanOneParam(3 , \u0026quot;s3\u0026quot; ) ); //构造一次，拷贝一次，析构一次【底层可能会对 vector 重新分配内存，导致对之前元素的拷贝和析构】 vec2.emplace_back( MoreThanOneParam(4 , \u0026quot;s4\u0026quot; )); //构造一次，拷贝一次，析构一次【底层可能会对 vector 重新分配内存，导致对之前元素的拷贝和析构】 vec2.emplace_back( 5 , \u0026quot;s5\u0026quot; ); //构造一次 cout \u0026lt;\u0026lt; \u0026quot;=============after push_back/emplace_back 3 elements, size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.emplace_back( 6 , \u0026quot;s6\u0026quot; ); //构造一次 cout \u0026lt;\u0026lt; \u0026quot;=============after push_back/emplace_back 1 elements, size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.emplace_back( 7 , \u0026quot;s7\u0026quot; ); //构造一次 cout \u0026lt;\u0026lt; \u0026quot;=============after push_back/emplace_back 1 elements, size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.reserve(6); cout \u0026lt;\u0026lt; \u0026quot;=============after reserve(6), size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.resize(14); cout \u0026lt;\u0026lt; \u0026quot;=============after resize(14), size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; vec2.resize(6); cout \u0026lt;\u0026lt; \u0026quot;=============after resize(6), size=\u0026quot; \u0026lt;\u0026lt; vec2.size() \u0026lt;\u0026lt; \u0026quot;; cap=\u0026quot; \u0026lt;\u0026lt; vec2.capacity() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; endl; return 0; }   参考  Choice between vector::resize() and vector::reserve()  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"f50fc27654f363c3c3ffbc33fe2fc1fd","permalink":"https://xueqing.github.io/blog/cplusplus/vector_resize_reserve/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/vector_resize_reserve/","section":"blog","summary":"resize 原型 void resize (size_type n); void resize (size_type n, const value_type\u0026amp; val); resize 方法(传递参数来构造是一样的)调整容器大小使得包含 n 个元素 如果当前大小大于 n，会从尾部删除多余的元素 如果当前大","tags":["c++"],"title":"vector 的 resize 和 reserve","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Web Crawler In this exercise you'll use Go's concurrency features to parallelize a web crawler. Modify the Crawl function to fetch URLs in parallel without fetching the same URL twice. Hint: you can keep a cache of the URLs that have been fetched on a map, but maps alone are not safe for concurrent use! */ package main import ( \u0026quot;fmt\u0026quot; ) type Fetcher interface { // Fetch returns the body of URL and // a slice of URLs found on that page. Fetch(url string) (body string, urls []string, err error) } // Crawl uses fetcher to recursively crawl // pages starting with url, to a maximum of depth. func Crawl(url string, depth int, fetcher Fetcher) { // TODO: Fetch URLs in parallel. // TODO: Don't fetch the same URL twice. // This implementation doesn't do either: if depth \u0026lt;= 0 { return } body, urls, err := fetcher.Fetch(url) if err != nil { fmt.Println(err) return } fmt.Printf(\u0026quot;found: %s %q\\n\u0026quot;, url, body) for _, u := range urls { Crawl(u, depth-1, fetcher) } return } func main() { Crawl(\u0026quot;https://golang.org/\u0026quot;, 4, fetcher) } // fakeFetcher is Fetcher that returns canned results. type fakeFetcher map[string]*fakeResult type fakeResult struct { body string urls []string } func (f fakeFetcher) Fetch(url string) (string, []string, error) { if res, ok := f[url]; ok { return res.body, res.urls, nil } return \u0026quot;\u0026quot;, nil, fmt.Errorf(\u0026quot;not found: %s\u0026quot;, url) } // fetcher is a populated fakeFetcher. var fetcher = fakeFetcher{ \u0026quot;https://golang.org/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;The Go Programming Language\u0026quot;, []string{ \u0026quot;https://golang.org/pkg/\u0026quot;, \u0026quot;https://golang.org/cmd/\u0026quot;, }, }, \u0026quot;https://golang.org/pkg/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;Packages\u0026quot;, []string{ \u0026quot;https://golang.org/\u0026quot;, \u0026quot;https://golang.org/cmd/\u0026quot;, \u0026quot;https://golang.org/pkg/fmt/\u0026quot;, \u0026quot;https://golang.org/pkg/os/\u0026quot;, }, }, \u0026quot;https://golang.org/pkg/fmt/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;Package fmt\u0026quot;, []string{ \u0026quot;https://golang.org/\u0026quot;, \u0026quot;https://golang.org/pkg/\u0026quot;, }, }, \u0026quot;https://golang.org/pkg/os/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;Package os\u0026quot;, []string{ \u0026quot;https://golang.org/\u0026quot;, \u0026quot;https://golang.org/pkg/\u0026quot;, }, }, }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ade17c3f46c17c4552a0296296a21864","permalink":"https://xueqing.github.io/translation/go-doc/gotour/web_crawler/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/web_crawler/","section":"translation","summary":"/* Exercise: Web Crawler In this exercise you'll use Go's concurrency features to parallelize a web crawler. Modify the Crawl function to fetch URLs in parallel without fetching the same URL twice. Hint: you can keep a cache of the URLs that have been fetched on a map, but maps alone are not safe for concurrent use! */ package main import ( \u0026quot;fmt\u0026quot; ) type Fetcher interface { // Fetch returns the body of URL and // a slice of URLs found on that page.","tags":["go-tour"],"title":"Web Crawler","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 原文参考 Binary-compatible C++ Interfaces。\n作者：Chad Austin, 2002.02.15\n 二进制兼容的 C++ 接口  概述 背景 概念 初次尝试 第二次尝试 第三次修正 第四次修正 完成润色 最终实现 总结 参考   概述 本文解释如何生成跨编译器和配置(发布/调试等)的 C++ DLL API。\n背景 许多平台对他们偏好的编程语言有自己的 ABI。比如，BeOS 的主要语言是 C++，所以 C++ 编译器一定可以生成保持操作系统 C++ 系统调用二(还有类等)进制兼容的代码。\nWindows 为 C 语言定义 API 和 ABI，因此 C++ 编译器的开发者可以自由控制 C++ ABI 的实现。但是，MS 最后为 Windows 创建面向对象的 ABI，称为 COM。为了简化 COM 的使用，他们使 C++ ABI 的虚表(vtables)映射到 COM 接口所需的虚表。由于不能使用 COM 的 Windows 编译器非常受限，其他的编译器强制执行 COM 虚表和 C++ 虚表之前的映射。\nABI 包含多个方面。这篇文章只讨论在 Windows 下使用 C++ 的问题。其他平台要求不一样。(幸运的是，因为大部分其他平台不如 Windows 流行，这些平台只有一或两个编译器，因此不是很大的问题。)\n概念  ABI(Application Binary Interface，应用程序二进制接口)：系统之间的二进制接口。如果一个二进制接口改变，接口两端(使用者和实现)必须被重新编译。 API(Application Program Interface，应用程序编程接口)：系统之间的源接口。如果一个源接口改变，使用这个接口的代码必须修改。API 改变通常暗示 ABI 改变。 Interface(接口)：一个所有方法都是纯虚的类，因此没有内在实现。一个接口只是对象之间通讯的协议。 Factory(工厂)：用于创建对象。在这篇文章中，我们使用一个全局的函数作为我们的工厂。 DLL Boundary(DLL 界限)：DLL 中被实例化的代码和调用进程的代码之间的线被称为 DLL 界限。在一些情况下，代码可以在界限两侧：一个头文件中的一个内联函数在 DLL 和可执行文件中被使用。这个函数实际上在界限两侧被实例化。因此，如果内联函数有一个静态变量，会创建两个变量，分别在可执行文件和 DLL 中，哪个变量被使用取决于 DLL 还是可执行文件中的代码调用了这个函数。  初次尝试 假设想要创建一个可移植的 windowing API，而且想要把实现放在 DLL 中。我会创建一个名为 Window 的类，这个类可以表示不同的 windowing 系统的一个窗口，Win32，MFC，wxWindows，Qt，Gtk，Aqua，X11，Swing(gasp)等。我们会多次尝试创建一个接口直到它可以在不同的实现、编译器和编译器设置上工作。\n// Window.h #include \u0026lt;string\u0026gt; #ifdef WIN32 #ifdef EXPORTING #define DLLIMPORT _declspec(dllexport) #endif #else #define DLLIMPORT _declspec(dllimport) #endif #define CALL __stdcall #else #define DLLIMPORT #define CALL #endif class DLLIMPORT Window { public: Window(std::string title); ~Window(); void setTitle(std::string title); std::string getTitle(); //... private: HWND m_window; };  我不会展示实现，因为我假定你已经知道如何实现。关于这个接口有一个明显的问题：它假定你使用基础的 Win32 API。即它持有一个 HWND 作为私有成员，因此引入了 Window 类和 WIn32 SDK 的依赖。一个可能的解决方案是使用 pImpl 语法从类的定义中移除这个私有成员。参考文档1、2、3和4。同时，你不能在不破坏二进制兼容的条件下向这个类增加新成员，因为这个类的大小会改变。\n可能这个方法最重要的问题是成员方法不是纯虚的。因此，这些成员方法被实现为专门命名的函数，且函数使用 this 指针作为第一个参数。不幸的是，我不知道有哪两种编译器对方法的名称重整(name mangling)是一样的。因此不要认为你用一个编译器生成的的 DLL 可被另一个编译器编译的可执行文件使用。\n第二次尝试 对于面向对象编程，你知道每个类可以分为两个概念：接口和工厂。工厂是创建对象的一种机制，接口支持对象之间通讯。下个版本的 Window.h 会分离这些概念。注意你不再需要导出类(你需要导出工厂函数)，因为这个是抽象类：所有的方法调用经过对象的虚表(vtables)，而不是通过一个直接的链接到 DLL。只有调用这个工厂函数会直接调用 DLL。\n// Window.h #include \u0026lt;string\u0026gt; class Window { public: virtual ~Window() {} virtual void setTitle(std::string title) = 0; virtual std::string getTitle() = 0; }; Window* DLLIMPORT CreateWindow(std::string title);  这样的代码更好。使用 Window 对象的代码不关心 Window 对象实际的类型，只要实现 Window 接口的类型都可以。但是，还有一个问题：不同的编译器重整符号名称不同，因此不同编译器生成的 DLL 中的 CreateWindow 函数名称不同。这意味着如果你使用 Visual C++ 6 编译 windowing DLL，不能再 Bor兰 C++ 中使用，反之亦然。幸运的是，C++ 标准通过 extern \u0026quot;C\u0026quot; 使得禁用符号重整成特殊的名称。\n一些人可能注意到代码的另一个问题。不同的编译器对 C++ 库的实现不同。在一些不明显的情况下，一些人会用其他的(如 STLPort)替代编译器的库实现……由此你不能依赖跨编译器的 STL 对象是二进制兼容的，你不能在 DLL 接口中安全使用它们。\n如果一个 C++ ABI 曾为 Windows 创建，需要明确指定如何与标准库中的每个类交互，但是我马上就不会再看到这个事情发生了。\n最后一个问题比较小。出于惯例，COM 方法和 DLL 函数使用 __stdcall 调用惯例。我们可以使用前面定义的 CALL 宏解决这个问题。(可以在工程中重命名)\n第三次修正 // Window.h class Window { public: virtual ~Window() {} virtual void CALL setTitle(const char* title) = 0; virtual const char* CALL getTitle() = 0; }; extern \u0026quot;C\u0026quot; Window* CALL CreateWindow(const char* title);  马上就完成了！这个特殊的接口可能在大多数情况下会有效。但是，虚析构函数使得事情有趣了……因为 COM 不使用虚析构函数，你不能依赖不同的编译器使用是一样的。然而，你可以使用一个虚方法取代虚析构函数。即在实现类中通过 delete this 实现；这个方式会在 DLL 界限同一侧实现构造和析构函数。比如，如果尝试使用 VC++6 的发布版可执行程序调试 DLL，程序会崩溃或遇到类似“Value of ESP not saved across function call”的警告。发生这个错误是因为 VC++ 运行时库的调试版本和发布版的分配器(allocator)不同。因为两个分配器不兼容，我们不能在 DLL 界限一侧申请内存然后再另一侧释放这个内存。\n但是一个虚析构函数和一个虚方法是什么不同呢？虚析构函数不负责释放这个对象使用的内存：它们只是在释放对象之前简单地被调用执行必要的清理。使用 DLL 的可执行程序不会尝试释放对象本身的内存。另一方面， destroy() 函数负责释放内存，因此所有的 new 和 delete 调用在 DLL 界限的同一侧。\n可以将接口的析构函数设为受保护的，以便使用接口的地方在析构函数中不小心删除它。\n第四次修正 //Window.h class Window { protected: virtual ~Window() {} //use destroy() public: virtual void CALL destroy() = 0; virtual void CALL setTitle(const char* title) = 0; virtual const char* CALL getTitle() = 0; }; extern \u0026quot;C\u0026quot; Window* CALL CreateWindow(const char* title);  因为这段代码不使用 COM 定义的语义，它可以跨编译器和配置工作。不幸的是，它不是完美的。你必须记住使用 object-\u0026gt;destroy() 删除对象，这个不如 delete object 直观。可能更重要的是，你不能在这个对象类型上使用 std::auto_ptr，autho_ptr 会使用 delete object 删除它拥有的对象。有一种方式实现 delete object 语法吗，实际上调用 object-\u0026gt;destroy()？有的。这正使得事情有点奇怪……你可以为这个接口重载 operator delete，在内部调用 destroy()。因为运算符 delete 持有一个 void 指针，你需要记得你永远不会对任何非 Window 调用 Window::operator delete。这是一个相当安全的假设。下面是运算符的实现\n//... void operator delete(void *p) { if(p) { Window* w = static_cast\u0026lt;Window*\u0026gt;(p); w-\u0026gt;destroy(); } } //...  看起来相当好……你现在可以再使用 autho_ptr，而且你仍然有一个稳定的二进制接口。当你重新编译和测试你的新代码，你会注意到在 WindowImpl::destroy 有一个栈溢出！发生了什么？如果你记得 destroy 方法如何被实现，你会发现它只是简单的执行 delete this。由于这个接口重载了 operator delete，WindowImpl::destroy 调用 Window::operator delete 会调用 WindowImpl::destroy……无限循环。这个特别问题的解决方法是在实现类中重载运算符 delete 来调用全局的运算符 delete\n//... void operator delete(void *p) { ::operator delete(p); } //...  完成润色 如果你的系统有很多接口和实现，你会发现你想要一些方式自动化取消定义运算符 delete。幸运的是，这个也是可能的。简单地创建一个模板类叫做 DefaultDelete，然后不要从接口类 I 衍生，而是从 class DefaultDelete\u0026lt;I\u0026gt; 衍生实现类。下面是 DefaultDelete 的实现\ntemplate\u0026lt;typename T\u0026gt; class DefaultDelete : public T { public: void operator delete(void *p) { ::operator delete(p); } };  最终实现 下面是最终版本的代码\n//Window.h #ifdef WIN32 #define CALL __stdcall #else #define CALL #endif class Window { public: virtual void CALL destroy() = 0; virtual void CALL setTitle(const char* title) = 0; virtual const char* CALL getTitle() = 0; void operator delete(void* p) { if(p) { Window* p = static_cast\u0026lt;Window*\u0026gt;(p); w-\u0026gt;destroy(); } } }; extern \u0026quot;C\u0026quot; Window* CALL CreateWindow(const char* title);  //DefaultDelete.h template\u0026lt;typename T\u0026gt; class DefaultDelete : public T { public: void operator delete(void* p) { ::operator delete(p); } }  //Window.cpp #include \u0026quot;Window.h\u0026quot; #include \u0026lt;string\u0026gt; #include \u0026lt;windows.h\u0026gt; #include \u0026quot;DefaultDelete.h\u0026quot; class WindowImpl : public DefaultDelete\u0026lt;Window\u0026gt; { public: WindowImpl(HWND window) { m_window = window; } ~WindowImpl() { DestroyWindow(m_window); } void CALL destroy() { delete this; } void CALL setTitle(const char* title) { SetWindowtext(m_window, title); } const char* CALL getTitle() { char title[512]; GetWindowText(m_window, title, 512); m_title = title; //save the title past the call return m_title.c_str(); } private: HWND m_window; std::string m_title; } Window* CALL CreateWindow(const char* title) { // create Win32 window object HWND window = ::CreateWindow(..., title, ...); return (window ? new WindowImple(window) : 0); }  总结 我会枚举一些指导方针，在创建 C++ 接口的时候需要记得。你可以回顾作为一个参考或者使用它帮助巩固你的知识。\n 所有的接口类应该是完全抽象的。每个方法应该是纯虚的(或者内联的……你可以安全地编写内联方法调用其他方法)。 所有的全局函数应该是 extern \u0026quot;C\u0026quot; 以避免不兼容的名称重整。并且，导出的函数和方法应该使用。__stdcall 调用惯例，因为 DLL 函数和 COM 习惯上使用这种调用惯例。这种方式，如果这个库的使用者使用默认的 __cdecl 编译，对 DLL 的调用仍然使用正确的惯例。 不要使用标准 C++ 库。 不要使用异常处理。 不要使用虚析构函数。相反地，创建一个 destroy() 方法和一个重载的 operator delete 调用 destroy()。 不要在 DLL 界限的一侧申请内存，在另一侧释放它。不同的 DLL 和 可执行文件可以使用不同的堆编译，并且使用不同的堆申请和释放内存块肯定会导致崩溃。比如，不要内联内存申请函数以便函数不会编译到不同的可执行文件和 DLL。 不要在接口使用重载的方法。不同的编译器在虚表中排序不同。  参考  STLPort 是 STL 的替代 SGI 有另外一个标准的 C++ 库实现 Corona 图片 I/O 库使用了本文引入的技术  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ea51cb398b9086b3f726a5a942dd9b12","permalink":"https://xueqing.github.io/translation/cplusplus/binary_compatible_cpp_interface/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/cplusplus/binary_compatible_cpp_interface/","section":"translation","summary":"原文参考 Binary-compatible C++ Interfaces。 作者：Chad Austin, 2002.02.15 二进制兼容的 C++ 接口 概述 背景 概念 初次尝试 第二次尝试 第三次修正 第四次修正 完成润色 最终实现 总结","tags":["c++"],"title":"二进制兼容的 C++ 接口","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"原文\n好的程序员并一定是技术强的程序员，而是那些可以在不完美的工作环境下保证软件质量和工作效率的程序员\n 寻找不同观点  要经常在做事之前问自己和别人，这么做对不对 做完事后问自己，还可不可以改进 努力去寻找别的不同的观点或方法 程序员应该经常上网，经常和同事讨论不同的实现方法，不同的技术观点，这样才能取长补短  千万别信自己的代码  当出现问题的时候，要学会 review 代码中所有的可疑点，千万别觉得某段代码很简单，可以略过 在查错的过程中，切忌过早下结论，切忌四处乱改,停下来想一想，会是哪儿的代码有重大嫌疑，然后查看一下代码，捋一捋程序的逻辑  思考和放松  思考其实就是一种放松 做事前多想一想，这样做事的时候就不会不顾此失彼，手忙脚乱 在工作中要学会享受，要学会放松心情 善于总结成败得失，善于思考，善于调整，善于放松  学习历史，跟上时代  一定要学习历史，整个计算机文化的历史 只有通过历史，才能明白历史上出现的问题，新技术出来的原因，这样才能够更了解新的技术和未来的方向 使用新型的技术，停下来接受培训，可以工作得更快更高效  积极推动测试活动  积极地在各个环节推动项目组进行测试活动 只有测试才能证明软件可以正常工作，只有测试才能保证软件的质量   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9a34cd5156d610012d0aca560b68b125","permalink":"https://xueqing.github.io/blog/coolshell/%E4%BA%94%E4%B8%AA%E6%96%B9%E6%B3%95%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/coolshell/%E4%BA%94%E4%B8%AA%E6%96%B9%E6%B3%95%E6%88%90%E4%B8%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/","section":"blog","summary":"原文 好的程序员并一定是技术强的程序员，而是那些可以在不完美的工作环境下保证软件质量和工作效率的程序员 寻找不同观点 要经常在做事之前问自己和别人","tags":["coolshell"],"title":"五个方法成为更好的程序员","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍 表驱动测试基础 表驱动的基准测试 使用子测试的表驱动测试 运行指定的测试或基准测试 设置和清理 并行控制 并行运行一组测试 一组并行测试之后的清理 结论 相关文章  参考 Go 博客——使用子测试和子基准测试学习。\n作者：Marcel van Lohuizen 日期：2016/10/3  介绍 在 Go1.7，testing 包引入了一个 Run 方法，作用于 T 和 B 类型，允许创建子测试和子基准测试。子测试和子基准测试的引入使得支持更好的失败处理，从命令行对运行哪个测试的细粒度控制，并行控制，并且经常生成更简单和可维护的代码。\n表驱动测试基础 在深入细节之前，让我们先讨论用 Go 编写测试的常用方式。可以通过对一个测试用例切片的循环实现一系列相关的检查：\nfunc TestTime(t *testing.T) { testCases := []struct { gmt string loc string want string }{ {\u0026quot;12:31\u0026quot;, \u0026quot;Europe/Zuri\u0026quot;, \u0026quot;13:31\u0026quot;}, // incorrect location name {\u0026quot;12:31\u0026quot;, \u0026quot;America/New_York\u0026quot;, \u0026quot;7:31\u0026quot;}, // should be 07:31 {\u0026quot;08:08\u0026quot;, \u0026quot;Australia/Sydney\u0026quot;, \u0026quot;18:08\u0026quot;}, } for _, tc := range testCases { loc, err := time.LoadLocation(tc.loc) if err != nil { t.Fatalf(\u0026quot;could not load location %q\u0026quot;, tc.loc) } gmt, _ := time.Parse(\u0026quot;15:04\u0026quot;, tc.gmt) if got := gmt.In(loc).Format(\u0026quot;15:04\u0026quot;); got != tc.want { t.Errorf(\u0026quot;In(%s, %s) = %s; want %s\u0026quot;, tc.gmt, tc.loc, got, tc.want) } } }  这个方法常备表驱动测试提及。且相比为每个测试重复相同的代码，此方法减少了大量的重复代码，且使得增加测试用例更加直接。\n表驱动的基准测试 在 Go1.7 之前，不能为基准测试使用相同的表驱动方法。一个基准测试测试整个函数的性能，因此遍历基准测试只是将它们作为一个整体测试。\n一个常用的变通方案是定义单独的顶层基准测试，每个基准测试使用不同参数调用一个公共的函数。比如，在 1.7 之前，strconv 包地狱塔 AppendFloat 的基准测试看起来像这样：\nfunc benchmarkAppendFloat(b *testing.B, f float64, fmt byte, prec, bitSize int) { dst := make([]byte, 30) b.ResetTimer() // Overkill here, but for illustrative purposes. for i := 0; i \u0026lt; b.N; i++ { AppendFloat(dst[:0], f, fmt, prec, bitSize) } } func BenchmarkAppendFloatDecimal(b *testing.B) { benchmarkAppendFloat(b, 33909, 'g', -1, 64) } func BenchmarkAppendFloat(b *testing.B) { benchmarkAppendFloat(b, 339.7784, 'g', -1, 64) } func BenchmarkAppendFloatExp(b *testing.B) { benchmarkAppendFloat(b, -5.09e75, 'g', -1, 64) } func BenchmarkAppendFloatNegExp(b *testing.B) { benchmarkAppendFloat(b, -5.11e-95, 'g', -1, 64) } func BenchmarkAppendFloatBig(b *testing.B) { benchmarkAppendFloat(b, 123456789123456789123456789, 'g', -1, 64) } ...  Go1.7 可使用 Run 方法，相同的基准测试现在可以表示为一个顶层的基准测试：\nfunc BenchmarkAppendFloat(b *testing.B) { benchmarks := []struct{ name string float float64 fmt byte prec int bitSize int }{ {\u0026quot;Decimal\u0026quot;, 33909, 'g', -1, 64}, {\u0026quot;Float\u0026quot;, 339.7784, 'g', -1, 64}, {\u0026quot;Exp\u0026quot;, -5.09e75, 'g', -1, 64}, {\u0026quot;NegExp\u0026quot;, -5.11e-95, 'g', -1, 64}, {\u0026quot;Big\u0026quot;, 123456789123456789123456789, 'g', -1, 64}, ... } dst := make([]byte, 30) for _, bm := range benchmarks { b.Run(bm.name, func(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { AppendFloat(dst[:0], bm.float, bm.fmt, bm.prec, bm.bitSize) } }) } }  每次调用 Run 方法创建一个单独的基准测试。调用 Run 方法的闭包的基准测试函数只允许一次且不被测量。\n新代码行数更多，但是更易维护，更易读，且与测试常用的表驱动方法是一致的。此外，现在可以在运行时共享设置代码，同时不再需要重置计时器。\n使用子测试的表驱动测试 Go1.7 也引入了用于创建子测试的 Run 方法。这个测试是使用子测试对之前的例子重新的版本：\nfunc TestTime(t *testing.T) { testCases := []struct { gmt string loc string want string }{ {\u0026quot;12:31\u0026quot;, \u0026quot;Europe/Zuri\u0026quot;, \u0026quot;13:31\u0026quot;}, {\u0026quot;12:31\u0026quot;, \u0026quot;America/New_York\u0026quot;, \u0026quot;7:31\u0026quot;}, {\u0026quot;08:08\u0026quot;, \u0026quot;Australia/Sydney\u0026quot;, \u0026quot;18:08\u0026quot;}, } for _, tc := range testCases { t.Run(fmt.Sprintf(\u0026quot;%s in %s\u0026quot;, tc.gmt, tc.loc), func(t *testing.T) { loc, err := time.LoadLocation(tc.loc) if err != nil { t.Fatal(\u0026quot;could not load location\u0026quot;) } gmt, _ := time.Parse(\u0026quot;15:04\u0026quot;, tc.gmt) if got := gmt.In(loc).Format(\u0026quot;15:04\u0026quot;); got != tc.want { t.Errorf(\u0026quot;got %s; want %s\u0026quot;, got, tc.want) } }) } }  第一件要注意的事情是两个实现的输出不同。原本的实现打印：\n--- FAIL: TestTime (0.00s) time_test.go:62: could not load location \u0026quot;Europe/Zuri\u0026quot;  即使有两个错误，测试执行终止在对 Fatalf 的调用，且第二个测试永远不会运行。\n使用 Run 的实现打印两个错误：\n--- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_Europe/Zuri (0.00s) time_test.go:84: could not load location --- FAIL: TestTime/12:31_in_America/New_York (0.00s) time_test.go:88: got 07:31; want 7:31  Fatal 及其同属函数导致子测试被跳过，但是不会跳过父测试或后续的子测试。\n另外一件要注意的事情是新版本中的错误信息更短。因为子测试的名字唯一标识了一个子测试，因此不再需要在错误信息内部识别该测试。\n使用子测试或子基准测试还有其他的益处，下面的部分会阐明。\n运行指定的测试或基准测试 子测试和子基准测试可以在命令行使用 -run 或 -bench 标识选择。两个标识都接收一个斜线分隔的正则表达式列表，匹配了子测试或子基准测试的完整名字的对应部分。\n子测试或子基准测试的完整名字是一个斜线分隔的列表，包括自身的名字以及所有父测试的名字，从顶层测试开始。名字是顶层测试和基准测试对应的名字，且第一个参数必须是 Run。为了避免显示和解析问题，名字使用下划线替换空格，且忽视不可打印字符。相同的处理适用于传递给 -run 或 -bench 表示的正则表达式。\n一些例子：\n使用欧洲时区运行测试：\n$ go test -run=TestTime/\u0026quot;in Europe\u0026quot; --- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_Europe/Zuri (0.00s) time_test.go:85: could not load location  只运行时间在午后的测试：\n$ go test -run=Time/12:[0-9] -v === RUN TestTime === RUN TestTime/12:31_in_Europe/Zuri === RUN TestTime/12:31_in_America/New_York --- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_Europe/Zuri (0.00s) time_test.go:85: could not load location --- FAIL: TestTime/12:31_in_America/New_York (0.00s) time_test.go:89: got 07:31; want 7:31  可能有点奇怪，使用 -run=TestTime/NewYork 没有匹配任何测试。这是因为出现在位置名字的斜线被当做一个分割符。反之使用：\n$ go test -run=TestTime//New_York --- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_America/New_York (0.00s) time_test.go:88: got 07:31; want 7:31  注意传递给 -run 的字符串中的 //。时区名字 America/New_York 中的 / 被当做是来自子测试的一个分隔符处理。第一个正则表达式模式 (TestTime) 匹配顶层测试。第二个正则表达式(空字符串)匹配所有，这种情况匹配时间和位置的大洲部。第三部分正则表达式(New_york)匹配位置的城市部分。\n把名字中的斜线当做分隔符允许用户重构测试的层次结构，而不用修改名字。它也简化了避免规则。如果这暴露一个问题的话，用户应该避免名字中的斜线，比如使用下划线替代。\n一个唯一的序列号被增加到不唯一的测试名字末尾。因此如果子测试没有明显的名字结构，可以只传递一个空字符串给 Run，且子测试可以简单地通过序列号识别。\n设置和清理 子测试和自己准测试可用于管理公共的设置和清理代码：\nfunc TestFoo(t *testing.T) { // \u0026lt;setup code\u0026gt; t.Run(\u0026quot;A=1\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;A=2\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;B=1\u0026quot;, func(t *testing.T) { if !test(foo{B:1}) { t.Fail() } }) // \u0026lt;tear-down code\u0026gt; }  如果任一闭包的子测试运行，设置和清理代码会被允许且最多只运行一次。即使任何子测试调用 Skip、FAIL 或 Fatal 也适用。\n并行控制 子测试支持细粒度控制并行，为了理解如何用这种方式使用子测试，理解并行测试的语法是重要的。\n每个子测试和一个测试函数相关。如果一个测试的测试函数在其 testing.T 实例中调用 Parallel 方法，那么这个测试被称为并行测试。一个并行测试不会和一个顺序测试并发运行，且并行测试的执行被中止直到调用它的测试方法，即父测试返回。-parallel 标识定义了可以并行运行的并行测试的最大数目。\n一个测试会阻塞直到它的测试函数返回且它所有的子测试结束。这意味着顺序测试运行的并行测试会在任何其他一连串的顺序测试运行之前完成。\n这种行为对使用 Run 创建的测试和顶层测试是一样的。事实上，在底层，顶层测试被实现为一个隐藏的主测试的子测试。\n并行运行一组测试 上述语义支持并行运行一组测试，这组测试内部是并行的，但不与其他并行测试并行：\nfunc TestGroupedParallel(t *testing.T) { for _, tc := range testCases { tc := tc // capture range variable t.Run(tc.Name, func(t *testing.T) { t.Parallel() if got := foo(tc.in); got != tc.out { t.Errorf(\u0026quot;got %v; want %v\u0026quot;, got, tc.out) } ... }) } }  外部测试一直到所有通过 Run 启动的并行测试完成之后才会结束。因此，不会有其他并行测试可以和这些并行测试并行运行。\n注意我们需要捕获 range 变量以确保 tc 与正确的实例绑定。\n一组并行测试之后的清理 在上述例子中，我们在开始其他测试之前使用语义等待一组并行测试结束。相同的技术可用于在一组共享公共资源的并行测试之后清理：\nfunc TestTeardownParallel(t *testing.T) { // \u0026lt;setup code\u0026gt; // This Run will not return until its parallel subtests complete. t.Run(\u0026quot;group\u0026quot;, func(t *testing.T) { t.Run(\u0026quot;Test1\u0026quot;, parallelTest1) t.Run(\u0026quot;Test2\u0026quot;, parallelTest2) t.Run(\u0026quot;Test3\u0026quot;, parallelTest3) }) // \u0026lt;tear-down code\u0026gt; }  等待一组并行测试的行为和之前的例子是相同的。\n结论 Go1.7 对子测试和子基准测试的增加允许你用正常的方式编写结构化的测试和基准测试，可以优雅的融入现有的工具。一种思考方式是 testing 包之前的版本有 1 层结构：包级别的测试被组织为一个单独的测试和基准测试的集合。现在这种组织可以递归扩展到这些单独的测试和基准测试。事实上，在实现中，顶层测试和基准测试被作为一个隐藏的主测试和基准测试的子测试和基准测试：这种处理在每一层都是相同的。\n对于测试来说，定义这种结构的能力使能细粒度执行指定的测试用例、共享设置和清理，以及更好地控制测试并行。我们很高兴看到人们发现其他用途。享受它！\n相关文章  Go 可测试的示例函数 关于覆盖的故事  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"3600066dae28c14bcb8c32ad41511f95","permalink":"https://xueqing.github.io/translation/go-doc/blog/subtest/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/blog/subtest/","section":"translation","summary":"介绍 表驱动测试基础 表驱动的基准测试 使用子测试的表驱动测试 运行指定的测试或基准测试 设置和清理 并行控制 并行运行一组测试 一组并行测试之后的清理 结论","tags":["go-blog"],"title":"使用子测试和子基准测试","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":" 使用对应功能需要的库  apt-get install mpi-default-dev安装 mpi 库 apt-get install libicu-dev支持正则表达式的 UNICODE 字符集 apt-get install python-dev需要 python 的话 apt-get install libbz2-dev如果编译出现错误bzlib.h: No such file or directory  解压源代码安装包，切换到对应文件夹：./bootstrap.sh  生成 bjam，上述命令可以带有各种选项，具体可参考帮助文档：./bootstrap.sh --help --prefix参数，可以指定安装路径，如果不带--prefix参数的话（推荐），默认路径是/usr/local/include和/usr/local/lib，分别存放头文件和各种库。 当前目录下，生成两个文件 bjam 和 b2，这两个是一样的，所以接下来的步骤，可以用这两个中的任意一个来执行 using mpi如果需要 MPI 功能，需要在 /tools/build/v2/user-config.jam 文件的末尾添加  利用生成的 bjam 脚本编译源代码  ./b2 -a -sHAVE_ICU=1，-a参数，代表重新编译，-sHAVE_ICU=1代表支持 Unicode/ICU  编译完成后，进行安装，也就是将头文件和生成的库，放到指定的路径（\u0026ndash;prefix）下  ./b2 install   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8582b91ecc122e8df9a9fee099f8d258","permalink":"https://xueqing.github.io/blog/cplusplus/boost/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/boost/","section":"blog","summary":"使用对应功能需要的库 apt-get install mpi-default-dev安装 mpi 库 apt-get install libicu-dev支持正则表达式的 UNICODE 字符集 apt-get install python-dev需要 python","tags":["c++"],"title":"关于 boost 库","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  1 常量正确性(const correctness)  1.1 概述 1.2 const 和 * 1.3 const 和 \u0026amp; 1.4 成员函数  2 二重指针 3 修改 const 4 X-\u0026gt;const X 5 reference  1 常量正确性(const correctness) 1.1 概述  常量正确性：即使用关键字const避免常量对象被修改 函数接收一个参数，且在调用过程中不能修改参数，实现方式有三种\n f1/f2 中不能修改传入参数，否则会有编译警告 f3 值传递，只修改局部拷贝 f1/f2 中不能调用 g1/g2，否则会有编译警告\nvoid f1(const std::string\u0026amp; s); //pass by reference-to-const void f2(const std::string* sp); //pass by pointer-to-const void f3(std::string s); //pass by value void g1(std::string\u0026amp; s); //pass by reference-to-non-const void g2(std::string* sp); //pass by pointer-to-non-const   常量正确性：避免意外修改不希望修改的东西\n 一般来说，const 作用于离它最近的左侧的类型，否则，作用于离它最近的右侧的类型\n 规则：read it backwards，即倒着读\n 建议：X 放在修饰符的右边\n  1.2 const 和 *  const X * ptr：ptr is a pointer to an X that is const  ptr 是一个指针变量，指向一个 X 的对象，但不能通过指针修改 X 对象, *ptr 只读 不能通过 ptr 调用 X 非 const 的成员方法，否则会有编译警告      声明 解释 描述     const int const0=96; int is const const1 是整型常量，不可再赋值   X * ptr ptr is a pointer to an X X 对象实例的指针   const X * ptr ptr is a pointer to an X that is const ptr 是一个指针变量，指向一个 X 的对象，但不能通过指针修改 X 对象, *ptr 只读   X const * ptr 同上 同上   X const const * ptr 同上 同上   const X const * ptr 同上 同上   X * const ptr ptr is a const pointer to an X ptr 是一个常量指针，指向一个 X 的对象，不能给指针再赋值，但是可以通过指针修改 X 对象，ptr 只读   X const * const ptr ptr is a const pointer to a const X ptr 是一个常量指针，指向一个 X 的对象，但不能给指针再赋值，也不能通过指针修改 X 对象   const X * const ptr 同上 同上    const char *Function1() { return \u0026quot;Some text\u0026quot;; } Function1()[1]='a'; //error   常量指针指向变量：变量可修改，且未从内存移除 指向常量的指针变量：函数返回常量字符串数组，防止修改返回值错误  1.3 const 和 \u0026amp;  const X \u0026amp; obj：obj is a reference to an X that is const  obj 是一个 X 对象的引用，但不能通过 obj 修改 X 对象 不能通过 obj 调用 X 非 const 的成员方法，否则会有编译警告      声明 解释 描述     const X \u0026amp; obj obj is a reference to an X that is const obj 是一个 X 对象的引用，但不能通过 obj 修改 X 对象, obj 只读   X const \u0026amp; obj 同上 同上    1.4 成员函数  在成员函数后加const避免在内部修改成员变量\nclass MyClass{ int m_var; // modify m_var is not allowed void SomeMethod() const; // the var pointed to by returned pointer and returned pointer is not allowed to altered // the var pointed to by given pointer and given pointer is const // modify m_var is not allowed const int * const AnotherMethod(const int * const \u0026amp;) const; // the return value must not be reference to a member of MyClass std::string\u0026amp; BadMethod() const; // the return value can be reference to a member of MyClass const std::string\u0026amp; GoodMethod() const; }   2 二重指针    声明 解释 描述     int ** pp pp is a pointer to a pointer to an int -   int ** const pp pp is a const pointer to a pointer to an int -   int * const * pp pp is a pointer to a const pointer to an int -   int const ** pp pp is a pointer to a pointer to a const int -   int * const * const pp pp is a const pointer to a const pointer to an int     3 修改 const  一个对象或变量被声明成const，后续可以使用const_cast修改其为可变 将类的某些成员变量声明为mutable，可在const成员函数中修改它们  4 X-\u0026gt;const X  将X*转成const X*是安全的 将X**转成const X**会有编译警告，因为可能会不经 cast 操作修改一个const X对象\nclass MyClass { public: void Modify(); } int main() { const MyClass obj; MyClass * ptr; const MyClass ** pptr = \u0026amp;ptr; // compile error *pptr = \u0026amp;obj; // ptr points to obj ptr-\u0026gt;Modify(); // ptr modifies const obj return 0; }   5 reference  const correctness What is the difference between const int*, const int * const, and int const * The C++ \u0026lsquo;const\u0026rsquo; Declaration: Why \u0026amp; How  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"abcc5886bdeb2a8c00919c2f3cb6d42d","permalink":"https://xueqing.github.io/blog/cplusplus/const/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/const/","section":"blog","summary":"1 常量正确性(const correctness) 1.1 概述 1.2 const 和 * 1.3 const 和 \u0026amp; 1.4 成员函数 2 二重指针 3 修改 const 4 X-\u0026gt;const X 5 reference 1 常量正确性(const correctness) 1.1 概述 常量正确性：即使用关键","tags":["c++"],"title":"关于 const","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  前言 变量或函数的声明和定义 声明和定义全局变量的最好方式 关键点 1：可以声明多次但初始化一次 关键点 2：默认存储类是 extern 关键点 3：extern 变量或程序对整个程序可见 关键点 4：extern 作用于变量  只用于声明变量 全局变量自动初始化 不能局部地初始化 extern 变量 不能写全局的赋值语句 对类成员无效  常见错误  未定义的行为 外部定义 多重外部定义 头文件中变量的声明  参考  前言  extern 用于声明 C 语言中的外部变量和函数。这个修饰符用于所有数据类型，比如 int，float，double，array，pointer，structure，function 等 范围(scope)：不绑定到任何函数。作用域整个程序，是全局的 默认值(default value)：全局变量的默认初始化值是 0(或 null) 生命周期(lifetime)：直到整个程序执行结束 extern 告诉编译器变量或函数(非静态的)都可以在链接时找到。适用于在模块之间共享某些全局变量，但是不想把它们放在一个头文件，或者在一个头文件中定义它们  大部分编译器编译器会优化程序确保它们不会为 extern 对象保留内存，因为编译器知道定义它们的模块会保留内存   变量或函数的声明和定义  声明(declaration)：声明变量或函数存在程序的某个地方，但是不为它们分配内存。确定了变量或函数的类型  声明一个变量时，程序知道这个变量的类型；声明一个函数时，程序知道函数的参数、数据类型、参数顺序和函数返回类型 声明是编译器需要的用于接受对标识符的引用  定义(definition)：既包含声明的作用，也为变量或函数分配内存。可以认为定义是声明的一个超集 因此一个函数或变量可以声明多次，但是只能定义一次(即同一个函数或变量不能存在两个位置)  定义是对标识符的实例化/实现 定义时链接器需要的用于链接对这些实体的引用 单一定义原则(One Definition Rule)：编译单元不应该对任意变量、函数、类类型、枚举类型或模板有多余一个的定义   声明和定义全局变量的最好方式  声明和定义全局变量的清晰、可靠的方式是使用一个头文件，该头文件包含变量的 extern 声明  定义这些变量的源文件和引用这些变量的源文件包含此头文件 对于每一个程序，有且只有一个源文件定义这些变量 对于每一个程序，有且只有一个头文件声明这些变量 这个头文件时重要的，它使能在独立的翻译单元(TU，translation units，源文件)之间交叉检查，同时确保一致性  完整的程序可能还需要全局函数。C99 和 C11 要求函数在使用之前必须是已经声明或定义过的。使用一个头文件包含全局函数的 extern 声明。也可以不加 extern 尽量避免使用全局函数——可以使用全局变量  关键点 1：可以声明多次但初始化一次  一个特殊的 extern 变量或函数可以声明多次，但是只初始化一次。但是不可以声明一次，初始化多次\n#include \u0026lt;stdio.h\u0026gt; extern int i;//declaring variable i int i=25;//initializing variable i extern int i;//again declaring variable i int main() { extern int i;//again declaring variable i printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：25  #include \u0026lt;stdio.h\u0026gt; extern void sum(int,int);//by default it is extern function int main() { extern void sum(int,int);//by default it is extern function int a=5,b=10; sum(a,b); return 0; } void sum(int a, int b) { printf(\u0026quot;%d\\n\u0026quot;, a+b); }  #include \u0026lt;stdio.h\u0026gt; extern int i;//declaring variable i int i=25;//initializing variable i int main() { printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } int i=20;//again initializing variable i // 输出：编译错误(error: redefinition of ‘i’)   关键点 2：默认存储类是 extern  extern 是所有全局变量和函数的默认存储类(storage class)，即全局变量和函数默认对整个程序可见，不需要声明或定义 extern 函数。使用 extern 关键字是多余的 编译器会在全局函数的声明和定义前面自动加上 extern 在下面两个测试代码中，变量 i 都是 extern 变量\n// test1.c #include \u0026lt;stdio.h\u0026gt; int i;//definition of i: by default it is extern variable int main() { printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：0  // test2.c #include \u0026lt;stdio.h\u0026gt; extern int i;//extern variable int main() { printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：编译错误，未定义的引用(undefined reference to i)  // test3.c #include \u0026lt;stdio.h\u0026gt; void sum(int,int);//by default it is extern function int main() { int a=5,b=10; sum(a,b); return 0; } void sum(int a, int b) { printf(\u0026quot;%d\\n\u0026quot;, a+b); } // 输出：15   关键点 3：extern 变量或程序对整个程序可见  extern 关键字用于扩展变量或函数的可见性。如果全局声明一个 extern 变量或函数，那么它的可见性是整个程序，这个程序可能包含一个或多个文件。比如一个 C 程序，包含两个文件 one.c 和 two.c 下面程序的输出是 30\n//one.c #include \u0026lt;conio.h\u0026gt; int i=25;//by default extern variable int j=5;//by default extern variable //above two lines is initialization of variable i and j void main() { clrscr(); sum(); getch(); }  //two.c #include \u0026lt;stdio.h\u0026gt; extern int i;//declaration of variable i extern int j;//declaration of variable j //above tow lines will search the initialization statement of variable i and j either in two.c(if initialized variable id static and static) // or one.c(if initialized variable is extern) void sum() {//by default extern function int s; s = i + j; printf(\u0026quot;%d\\n\u0026quot;, s); }  一个 extern 变量或函数有外部(external)链接，一个外部链接的变量或函数对所有文件可见\n extern 作用于函数只是告诉编译链接是外部的；作用于变量只声明变量而不会定义(初始化或实例化)变量   关键点 4：extern 作用于变量 只用于声明变量  当对变量使用 extern 修饰符时，它只用于声明(比如不会为这些变量分配内存)。因此在上述 test2.c 中，编译器报错undefined symbol。如果要定义变量(比如为 extern 变量分配内存)，必须初始化变量 初始化 extern 变量即是定义 extern 变量\n#include \u0026lt;stdio.h\u0026gt; extern int i=10;//extern variable int main() { printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：10 // warning: ‘i’ initialized and declared ‘extern’ // 如果声明时也提供了初始化，那么会为变量分配内存，该变量认为是被定义过的  编译警告参考warning in extern declaration\n#include \u0026lt;stdio.h\u0026gt; extern int i;//extern variable int main() { return 0; } // 编译成功。只声明变量 i 但是未使用，不会报错  如果我们声明一个变量是 extern，那么编译器会搜索这个变量是否已经初始化。如果已经初始化为 extern 或 static 则成功。否则编译器会报错\n 修正：初始化为 static 仍然报错????\n#include \u0026lt;stdio.h\u0026gt; int main() { extern int i;//it will search the initialization of i printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } int i=20;//initialization of extern variable i // 输出：20  #include \u0026lt;stdio.h\u0026gt; int main() { extern int i;//it will search the initialization of i printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } static int i=20;//initialization of static variable i // 输出：编译错误(error: static declaration of ‘i’ follows non-static declaration)   全局变量自动初始化  如果全局变量不适用 extern 关键字，编译器会使用默认值自动初始化 extern 变量 extern 整数类型变量的默认初始化值是 0 或者 null\n#include \u0026lt;stdio.h\u0026gt; char c; int i; float f; char *str; int main() { printf(\u0026quot;%d %d %f %s\\n\u0026quot;, c, i, f, str); return 0; } // 输出：0 0 0.000000 (null)   不能局部地初始化 extern 变量  不能在任何代码块内部局部地初始化 extern 变量，不论是声明时初始化还是初始化和声明分开。我们只能全局地初始化 extern 变量\n#include \u0026lt;stdio.h\u0026gt; int main() { extern int i=10; printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：编译错误(error: ‘i’ has both ‘extern’ and initializer)  #include \u0026lt;stdio.h\u0026gt; int main() { extern int i;//declaration of extern variable i int i=10;//try to locally initialize extern variable i printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：编译错误(error: declaration of ‘i’ with no linkage follows extern declaration)  #include \u0026lt;stdio.h\u0026gt; extern int i;//declaration of extern variable i int main() { int i=10;//declare and define a local variable printf(\u0026quot;%d\\n\u0026quot;, i);//the i is local return 0; } // 输出：10  #include \u0026lt;stdio.h\u0026gt; int main() { extern int i;//declaration of extern variable i, its memory is not allocated i=10;//try to change the value of variable i to 10, but it doesn't exist printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：编译错误(两处错误：undefined reference to i)   不能写全局的赋值语句  在声明变量时给变量赋值叫做初始化(initialization) 不在变量声明时给变量赋值叫做赋值(assignment)\n#include \u0026lt;stdio.h\u0026gt; extern int i;//declaring variable i int i=25;//initializing variable i i=20; int main() { printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } // 输出：编译错误(error: redefinition of ‘i’)  #include \u0026lt;stdio.h\u0026gt; extern int i;//declaring variable i int main() { i=20;//assignment printf(\u0026quot;%d\\n\u0026quot;, i); return 0; } int i=25;//initialization // 输出：20   对类成员无效  extern \u0026quot;C\u0026quot; 被类成员忽略  常见错误 未定义的行为  Undefined behavior：使用了一个带外部链接的标识符，但是程序中不存在该标识符的外部定义，或者没有使用此标识符但是有多处定义此标识符  外部定义  External definitions：外部定义指一个外部声明，同事也是函数(除了内联函数)或对象的定义。如果一个表达式中使用了一个有外部链接的标识符(除了作为 sizeof或_Alignof运算符的操作数的一部分，这些运算符的结果是一个证书常数)，程序的其它地方应该有且仅有一个对此标识符的外部定义 因此，如果一个声明为外部链接的标识符未在表达式中被使用，不应该有它的外部定义  多重外部定义  Multiple external definitions：对于一个对象的标识符可能有多于一处的外部定义，这些定义可能有也可能没有显式使用 extern 关键字；如果这些定义不一致，或者多于一处有初始化，就会导致 undefined behavior  头文件中变量的声明  声明 int some_var;：如果一个头文件不使用 extern 定义一个变量，那么每个包含此头文件的文件都会尝试创建一个此变量的一个定义。但是 C 标准不确保这个一定会正常工作 声明 int some_var = 13;：如果头文件定义并初始化一个变量，那么在给定的程序中只有一个源文件可以使用这个头文件。因为头文件主要是用来共享信息的，创建一个只能使用一次的头文件不是好的做法 声明 static int some_var =3;：如果头文件定义一个静态变量(不论是否初始化)，那么每个源文件都会有此“全局”变量的一份私有拷贝。而且，如果这个变量是一个复杂的数组，那么会导致大量代码的拷贝  参考  extern keyword in c Understanding “extern” keyword in C How do I use extern to share variables between source files DECLARATIONS V.S. DEFINITIONS  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0299bdce16e27e401fd7efdec7218556","permalink":"https://xueqing.github.io/blog/cplusplus/extren_c/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/extren_c/","section":"blog","summary":"前言 变量或函数的声明和定义 声明和定义全局变量的最好方式 关键点 1：可以声明多次但初始化一次 关键点 2：默认存储类是 extern 关键点 3：extern 变量或","tags":["c++"],"title":"关键字 extern 在 C 语言的使用","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  描述 术语和定义  编译单元 单定义规则  内联声明  非成员函数 成员函数  不适合内联替换的用法 C/C++ static/extern + inline  C89/90 inline C99 inline C++ inline  GCC 编译选项 内联函数对安全性和速度的取舍 inline vs micro 问题  问题：C99 inline without static or extern  参考  描述  C++ 提出，C99 引入支持，C89 支持内联扩展 inline用于需要某个函数的定义对调用者可见的程序优化  可见性：函数需要有内部链接，或者外部链接且和调用者在同一个编译单元。此时，函数声明或定义中的inline只用于指示对这个函数的调用可被展开优化 当调用者和被调用的函数定义位于不同的编译单元时，inline支持包含调用者的编译单元也包含一个局部(内联)的函数的定义  inline用于声明一个内联函数，可使 GCC 直接更快地调用此函数  GCC 可以将内联函数代码展开插入到调用者代码内部，因此减少了函数调用(寄存器状态的修改保存)的负载 如果实参的值是常量，可在编译时计算简化，因此不是所有内联函数代码都会被包含  可使用-finline-functions选项指定 GCC 将所有“足够简单”的函数展开插入到调用者内部 inline用于多个编译单元调用某个函数，但是只想暴露该函数的定义在一个头文件 在关闭优化时，GCC 不会内联任何函数，必须在某处定义符号，inline声明定义的函数才是可见的  术语和定义 编译单元  What is a “translation unit” in C++ 编译单元(compilation/translation unit): C++ 编译的基础单元。包括一个单独的源文件，以及直接或间接包含的头文件的内容，减去条件预处理忽视的内容 一个编译单元可被编译成一个目标文件、库或可执行程序  单定义规则  What exactly is One Definition Rule in C++ 单定义规则(one-definition rule)：每个程序对于其使用的每个非内联函数或对象应该只包含一个定义。定义可以显式出现在该程序中，可在标准库或用户定义的库中查找，或者隐式定义。内联函数应在每个使用的编译单元中定义 每个编译单元对于所有的变量、函数、类的类型、枚举类型或模板不超过一个定义  内联声明 非成员函数  GCC 实现三种语法来声明内联函数  使用-finline-functions，同时指定参数-std=gnu89/fgnu89-inline，或所有内联函数声明处有gnu-inline属性 指定参数-std=c99/-std=gnu99，或者使用更新的 C 版本 编译 C++ 代码  使用inline关键字\nstatic inline int inc(int *a) { return (*a)++; }  如果在 ISO C90 程序的头文件中声明内联，使用__inline__\n 上述三种类型的内联行为再两种情况下是行为是类似的\n 用于static函数 第一次声明时未使用inline关键字，定义时使用inline关键字  除了速度，上述两种方式和不使用inline关键字行为相同\nextern int inc(int *a); inline int inc(int *a) { return (*a)++; }  当一个函数是static inline时，如果所有调用函数的地方展开插入了此函数的代码，而且函数的地址从未被使用，那么函数自己的汇编代码从未被引用。这种情况下，除非使用-fkeep-inline-functions，GCC 实际上不会为此函数生成汇编代码。如果有一处调用未展开插入代码，那么正常生成汇编代码；如果程序引用了该地址，函数必须正常编译，因为此处不能被内联\n 注意：除非是在一个.cpp文件使用，必须将内联函数定义放在一个头文件，然后从其他.cpp调用，否则会有链接错误unresolved external\n  成员函数  GCC 将定义在类内的成员函数视作内联函数(可没有inline)。可使用-fno-default-inline覆盖\nclass Fred { public: void f(int i, char c) { // ... } };  类似声明非成员函数：声明时不带inline，定义时使用inline，在类外部定义\n 建议使用此方式，以隐藏类的实现\nclass Foo { public: void method(); // Best practice: Don't put the inline keyword here // ... }; inline void Foo::method() // Best practice: Put the inline keyword here { // ... }   注意：必须将内联函数定义放在一个头文件，然后从其他.cpp调用，否则会有链接错误unresolved external\n  不适合内联替换的用法  函数定义包含下面用法的不适合内联替换  可变参数函数 使用alloca函数 使用计算的goto 使用非本地的goto 使用嵌入函数 使用setjmp 使用__builtin_longjmp/__builtin_return/__built_apply_args   C/C++ static/extern + inline C89/90 inline  inline：可能会被内联展开。总会生成非内联版本且对外部可见。只在一个编译单元定义，其他编译单元可见且视为非内联函数\n 每个编译单元只会拥有该函数的拷贝，每个拷贝只对编译单元内部可见，且拷贝之间不会有冲突。缺点包括两部分 大型工程中，可能包含很多相同函数的拷贝，导致目标代码增大 不太可能比较函数指针，因为不确定是哪份拷贝版本 C89 编译器支持内联扩展 MVC++：__forceinline GCC/Clang：在不优化时，除非指定always_inline属性，GCC 不会内联任何函数  __attribute__((always_inline)) __attribute__((__always_inline__))：可避免与用户定义的宏always_inline冲突  编译器在某些情况下不能内联替换，此时会有编译警告 建议使用下面的可移植代码\n#ifdef _MSC_VER #define forceinline __forceinline #elif defined(__GNUC__) #define forceinline inline __attribute__((__always_inline__)) #elif defined(__CLANG__) #if __has_attribute(__always_inline__) #define forceinline inline __attribute__((__always_inline__)) #else #define forceinline inline #endif #else #define forceinline inline #endif   extern inline：不会生成非内联版本对外部可见，但是可以调用(必须在其他编译单元定义，且调用的代码和内联代码相同)，one-definition的原则适用\n 原因：C89 中定义为extern的存储不会被保留，而不带extern的存储一定会保留；C99 的extern inline会生成非内联函数 类似宏。使用方式是将函数定义(同时指定inline和extern关键字)放在一个头文件中，把另一个定义的拷贝(不指定inline和extern关键字)放在一个库文件中。头文件的定义使得大部分函数调用都是内联展开的。如果存在其他编译单元的函数调用，引用这个库文件的唯一拷贝  static inline：不会生成外部可见的非内联版本，但是可能会生成一个局部可见的函数，one-definition的原则不适用\n  C99 inline  inline：类似 C89/90的extern inline，不会生成外部可见代码，但是可以调用(必须在其他编译单元定义，且调用的代码和内联代码相同)\n 在头文件(.h)中使用inline定义，在一个编译单元的源文件(.c)中使用extern和inline\n//.h inline double dabs(double x) {return x \u0026lt; 0.0 ? -x : x;} //.c extern inline double dabs(double x);   extern inline：类似 C89/90的inline，不会生成外部可见代码，至多一个编译单元可以使用此函数\n 定义为inline的函数要求：程序的其他地方有且只有一处需要声明该函数为extern inline或没有修饰符 如果有多处声明，链接器会报重复的符号错误 其他地方没有声明，链接器不会报错 建议：在头文件定义inline函数，为每个函数创建一个.c文件，包含该函数的extern inline声明以及对应的头文件：声明和包含头文件的语句先后无关  static inline：类似 C89/90，二者之间相同\n  C++ inline  inline：一处内联其他所有地方都会内联。编译器/链接器会排序该符号的多个实例  在头文件定义，对整个工程可见；且如果不能展开替换，只会生成一个外部符号 在所有地方有相同的定义，必须有inline关键字 类内定义的函数会自动添加inline修饰符  extern inline：没有此定义，支持的编译器行为类似 C89/90 static inline：没有此定义，支持的编译器行为类似 C89/90  GCC 编译选项  GCC 版本大于等于 4.2：使用 C89 的inline语法，即使显式指定了-std=c99 GCC 版本是 5：GCC 使用 gnu11 的语法，默认使用 C99 的inline语法  显式指定-std=gnu89：使用 C89 语法 指定-fgnu89-inline或在所有inline声明处增加gnu_inline属性：使用 C89 语法，只会影响内联 指定-std=c99或-std=c11或-std=gnu99(不带-fgnu89-inline)：确定使用 C99 语法  使用-winline：当标记为inline的函数不可替换时，编译警告  内联函数对安全性和速度的取舍  C 语言中，可以通过在结构体中放一个void*实现对结构体的封装，即结构体的使用者不知道void*指向的真正的数据，但可以通过调用函数将void*转成合适的隐藏类型。这个做法会破坏类型的安全性，也会包括对结构体其他字段的访问(如果允许直接访问结构体的域，需要知道如何解释void*的使用者就可以直接访问结构体，使得很难修改底层的数据结构) 包含内联函数的目标代码的大小和执行速度的影响是不可预测的  时间性能：以空间换时间 可使程序变快  减少函数调用的代价 可移除函数调用所需的指令：栈和寄存器的使用 不需要寄存器传递参数 在引用调用、地址调用或共享调用时，不需要引用和解引用 支持高级优化和调度  可使程序变慢：内联展开会增加代码大小，在内存页有限的情况下，可能增加内存页的置换和磁盘的读写 目标代码大小 可使程序变大：通常状况下展开代码类似于拷贝代码 可使程序变小：展开函数时，编译器可能会优化代码，移除不必要的代码 内存性能 系统抖动(内存页置换)  调用的内联函数和当前函数可能位于不同的页，内联展开可能使其位于同一个页，可避免系统抖动 可能增大二进制可执行文件大小，导致系统抖动  缓存未命中  内联通常改善了二进制代码内部引用的局部性，可减少使用缓存行来存储内部循环，使得 CPU 受限的应用运行更快 可能导致对多个缓存行的循环处理，导致缓存抖动  可能和运行速度无关：大部分系统不是 CPU 受限的，而是 I/O、数据库或网络受限的，即系统整个性能的瓶颈在于文件系统、数据库或网络。因此，除非 CPU 固定在 100%，内联函数不会使得程序运行更快   inline vs micro  展开时间不同  内联展开发生在编译时，不会修改源码(text) 宏展开发生在编译之前，生成不同的 text 再给编译器处理，会污染命名空间和代码，不利于调试  类型检查：C 语言中宏调用没有类型检查；内联函数会检查参数类型，必须正确执行类型转换 C 语言中，宏不能像函数一样调用return关键字，不能终止调用者 编译错误：宏内的编译错误很难理解，因为指向的是展开的代码，而不是源代码 递归：很多编译器可以内联递归函数，但是递归宏是不允许的  有的编译器可控制递归展开的深度  代码的可维护性：随着函数改进，函数的内联属性可能会变化，一个函数内联与否比宏的修改要简单 宏的其他问题  含if 含多个语句 含令牌黏贴  内联函数避免上述问题：内联函数检查每个参数一次，类似于调用普通函数，但是更快\n// A macro that returns the absolute value of i #define unsafe(i) ( (i) \u0026gt;= 0 ? (i) : -(i) ) // An inline function that returns the absolute value of i inline int safe(int i) { return i \u0026gt;= 0 ? i : -i; } int f(); void userCode(int x) { int ans; ans = unsafe(x++); // Error! x is incremented twice ans = unsafe(f()); // Danger! f() is called twice ans = safe(x++); // Correct! x is incremented once ans = safe(f()); // Correct! f() is called once }   问题  编译器不一定会内联程序员指定的函数  模板方法/函数不是总被内联展开  内联函数的代码暴露给调用者 传统的 C 编译系统会增加内联编译时间，因为会拷贝函数体到调用者 C99 的要求  如果在别处使用某内联函数，只能有一个extern声明。当关掉优化禁止内联时，如果没有会有链接错误 如果增加声明，放到一个库进行链接，使用链接时优化或static inline，可能导致不能到达的代码  C++中，普通函数只需要在一个模块中定义，但是需要在每个模块中定义使用的内联函数，否则不能编译某个单独的模块(依赖其他模块)。视编译器而定，可能会导致不能内联替换的模块的对象文件包含函数的拷贝 在嵌入式软件中，可能通过类似pragma编译指令将一些函数放到代码段。如果一个内存段的代码调用另一个内存段的代码，如果被调用函数内部有内联，那么可能会停到一个不应该的段。比如高性能的内存段代码空间有限，如果内部函数调用另一个高性能内存之外的函数，且被调用函数较大，内部有内联的话，可能会超出高性能内存的空间 C++ 编译时链接，因此如果修改了内联函数，必须重新编译使用此函数的所有代码  问题：C99 inline without static or extern  C, inline function and GCC [duplicate] Is “inline” without “static” or “extern” ever useful in C99 C99 inline function in .c file\n// main.cpp inline int foo() {return 10 + 3;} int main() {foo(); return 0;} // g++ -std=c99 -x c main.cpp // gcc -std=c99 -o a main.cpp  GCC 链接错误undefined reference to foo\n 问题：inline只是声明内联函数，不会生成实际的代码，但是extern和static用于告诉编译器将函数放在哪个对象文件，用于编译生成对应的代码(可能是拷贝)\n 解决方案：\n 增加extern inline int foo(); 增加static修饰符，告诉编译器有且只在这里，以便生成对应代码 或使用-O优化代码，编译器将标记为inline的代码内联展开，在这里会忽略这部分代码   参考  Inline function An Inline Function is As Fast As a Macro inline functions Myth and reality about inline in C99  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"346f102f8aea619cc99302db0867ca34","permalink":"https://xueqing.github.io/blog/cplusplus/inline/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/inline/","section":"blog","summary":"描述 术语和定义 编译单元 单定义规则 内联声明 非成员函数 成员函数 不适合内联替换的用法 C/C++ static/extern + inline C89/90 inline C99 inline C++ inline GCC 编译选项 内联函数对安全性和速度的取舍 inline vs","tags":["c++"],"title":"内联","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"常见的线程不安全函数和对应的 unix 下的线程安全函数\n 保持跨越多个调用状态的函数  rand，对应 rand_r strtok，对应 strtok_r  返回指向静态变量的指针的函数  asctime，对应 asctime_r ctime，对应 ctime_r gethostbyaddr，对应 gethostbyaddr_r gethostbyname，对应 gethostbyname_r inet_ntoa， localtime，对应 localtime_r gmtime，对应 gmtime_r  可重入性  可重入函数（reentrant function）：当被多个线程调用时，不会引入任何共享数据 可重入函数是线程安全函数的一个真子集 显式可重入（explicitly reentrant）：函数都是传值传递的（即没有指针），并且所有的数据引用都是本地的自动栈变量（即没有引用静态或全局变量） 隐式可重入（implicitly reentrant）：函数的一些参数是引用传递的（允许传递指针），传递的是非共享数据的指针   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"39bf5cb849b6fca7144989a4e16ce52b","permalink":"https://xueqing.github.io/blog/cplusplus/reentrant/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/reentrant/","section":"blog","summary":"常见的线程不安全函数和对应的 unix 下的线程安全函数 保持跨越多个调用状态的函数 rand，对应 rand_r strtok，对应 strtok_r 返回指向静态变量的指针的函数 as","tags":["c++"],"title":"可重入性","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"原文\n 软件的精髓在于设计  时间和空间的取舍、TCP/UDP 通信、同步异步、数据冗余 重要 多和客户讨论需求和未来可能的变化：避免边开发边加需求 调查实现的技术难点和细节 和其他人讨论并推敲架构和设计：选择成熟的框架？  TDD、快速原型和迭代可能会对软件和团队产生负面影响  TDD、快速原型和迭代更关注功能性需求 需要考虑性能问题、高可用性问题、系统维护性问题  重构是噩梦，应该越少越好 避免过度设计和纸上谈兵，设计不仅仅是太累和思考，还需要尝试  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"190b53229f7529b8d674b19a8ba5c8cf","permalink":"https://xueqing.github.io/blog/coolshell/%E5%A4%9A%E4%BA%9B%E6%97%B6%E9%97%B4%E8%83%BD%E5%B0%91%E5%86%99%E4%BA%9B%E4%BB%A3%E7%A0%81/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/coolshell/%E5%A4%9A%E4%BA%9B%E6%97%B6%E9%97%B4%E8%83%BD%E5%B0%91%E5%86%99%E4%BA%9B%E4%BB%A3%E7%A0%81/","section":"blog","summary":"原文 软件的精髓在于设计 时间和空间的取舍、TCP/UDP 通信、同步异步、数据冗余 重要 多和客户讨论需求和未来可能的变化：避免边开发边加需求 调查实","tags":["coolshell"],"title":"多些时间能少写些代码","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍 代码组织  概览 工作区 GOPATH 环境变量 导入路径 第一个程序 第一个库 包名  测试 远程包 下一步 获取帮助  参考 Golang 官网文档 学习。\n介绍 此文档演示一个简单的 Go 包的发展，并介绍 go 工具。go 工具是拉取、编译和安装 Go 包和目录的标准方式。\ngo 工具要求你按照指定方式组织你的代码。请仔细阅读此文档。它解释了使用 Go 安装组织和运行的最简单的方式。\n一个类似的解释可参考编写、编译、安装和测试 Go 代码。\n代码组织 概览  Go 开发人员通常保存他们所有的 Go 代码在一个单一的工作区。 一个工作区包含很多版本控制仓库(比如使用 Git 管理)。 每个仓库包含一个或多个包。 每个包由同一目录的一个或多个 Go 源文件组成。 包目录的路径确定了导入路径。  注意这个其他编程环境不同。其他编程环境的每个工程有一个单独的工作区，且工作区和版本控制仓库紧密相关。\n工作区 一个工作区是一个目录层次架构，在其根有两个目录：\n src 包含 Go 源文件，且 bin 包含可执行命令。  go 工具编译和安装二进制到 bin 目录。\nsrc 子目录通常包含多个版本控制仓库(比如 Git 或 Mercurial)，跟踪了一个或多个源包的发展。\n为了让你理解一个工作区实际上的组织，这里有一个例子：\nbin/ hello # command executable outyet # command executable src/ github.com/golang/example/ .git/ # Git repository metadata hello/ hello.go # command source outyet/ main.go # command source main_test.go # test source stringutil/ reverse.go # package source reverse_test.go # test source golang.org/x/image/ .git/ # Git repository metadata bmp/ reader.go # package source writer.go # package source ... (many more repositories and packages omitted) ...  上述树显示一个工作区有两个仓库(example 和 image)。example 仓库包含两个命令(hello 和 outyet)和一个库(stringutil)。image 仓库包含 bmp 包和其他的包。\n一个普通的工作区包含许多源仓库，这些仓库包含一些包和命令。大多数 Go 开发人员保存他们所有的 Go 源代码和依赖在一个单一的工作区。\n注意不应使用符号链接链接文件或目录到你的工作区。\n命令和库由不同的源包编译。我们之后会讨论区别。\nGOPATH 环境变量 GOPATH 环境变量指定你的工作区位置。默认是你的主目录下名字为 go 的目录，因此在 Unix 上是 $HOME/go，Plan9 上是 $home/go，Windows 上是 %USERPROFILE%\\go (通常是 C:\\Users\\YourName\\go)。\n如果你想要在不同的位置工作，你需要设置 GOPATH 到那个目录。(另外一个常用的设置是设置 GOPATH=$HOME)。注意 GOPATH 一定不能和你的 Go 安装路径相同。\n命令 go env GOPATH 打印当前实际的 GOPATH；如果该环境变量没有设置，它会打印默认的位置。\n方便起见，增加工作区的 bin 子目录到你的 PATH：\nexport PATH=$PATH:$(go env GOPATH)/bin  简洁起见，这个脚本在文档的其他部分使用 $GOPATH 而不是 $(go env GOPATH)。如果你还未设置 GOPATH，为了使得所写的脚本可运行，可以使用 $HOME/go 替换这些命令或者运行\nexport GOPATH=$(go env GOPATH)  要了解更多关于 GOPATH 环境变量，参考 go help gopath。\n要使用自定义的工作区位置，设置 GOPATH 环境变量。\n导入路径 导入路径是一个唯一的标识一个包的字符串。一个包的导入路径对应它在工作区或远程仓库内的位置(下面会解释)。\n标准库的包使用短的导入路径类似 “fmt” 和 “net/http”。对于你自己的包，你必须选择一个基础路径，该路径不太可能与将来增加的标准库或其他外部库冲突。\n如果你将代码保存在其他地方的源仓库，那么你应该使用该源码库的根作为你的基础路径。比如，如果你有一个 Github 账户位于 github.com/user，那么 github.com/user 应该是你的基础路径。\n注意在你可以编译代码之前，你不需要发布你的代码到一个远程仓库。这只是一个组织代码的好习惯以便某天你会发布它。实际上你可以选择任意的路径名字，只要它对于标准库和更大的 Go 生态系统是唯一的。\n我们将会使用 github.com/user 作为我们的基础路径。在你的工作区内新建一个目录来保存源码：\nmkdir -p $GOPATH/src/github.com/user  第一个程序 为了编译和运行一个简单的程序，首先选择一个包路径(我们将会使用 github.com/user/hello)，并且在你的工作区内创建一个对应的包目录：\nmkdir $GOPATH/src/github.com/user/hello  接下来，在目录内部创建一个名为 hello.go 的文件，包含下面的 Go 代码。\npackage main import \u0026quot;fmt\u0026quot; func main() { fmt.Println(\u0026quot;Hello, world.\u0026quot;) }  现在你可以使用 go 工具编译和安装这个程序：\ngo install github.com/user/hello  注意你可以在你的系统任何地方运行这个命令。go 工具通过在 GOPATH 指定的工作区内查找 github.com/user/hello 包找到源码。\n如果你从包目录运行 go install，你也可以忽视包路径：\ncd $GOPATH/src/github.com/user/hello go install  这个命令编译 hello 命令，生成可执行的二进制文件。它接着安装该二进制文件到工作区的 bin 目录，安装的文件名字是 hello(或者在 Windows 上是 hello.exe)。在我们的例子中，该文件将会是 $GOPATH/bin/hello，也就是 $HOME/go/bin/hello。\n发生错误时，go 工具只会打印输出。因此如果这些命令没有生成输出，那么这些命令已经被正确执行。\n你现在可以通过在命令行输入程序的完整路径来运行它：\n$ $GOPATH/bin/hello Hello, world.  或者，因为你已经添加 $GOPATH/bin 到你的 PATH，只需要输入二进制文件的名字：\n$ hello Hello, world.  如果你在使用一个源码控制系统，现在将是一个好的时机来初始化一个仓库，增加这些文件，并提交你的第一次修改。重申一次，这一步是可选的：你不必使用源码控制来写 Go 代码。\ncd $GOPATH/src/github.com/user/hello git init git add hello.go git commit -m \u0026quot;initial commit\u0026quot;  推送代码到远程仓库留作读者的一个练习。\n第一个库 让我们编写一个库，并在 hello 程序使用它。\n重申一次，第一步是选择一个包路径(我们将会使用 github.com/user/stringutil)并创建一个包目录：\nmkdir $GOPATH/src/github.com/user/stringutil  接下来，在该目录创建一个名为 reverse.go 的文件，包含下面的内容。\n// Package stringutil contains utility functions for working with strings. package stringutil // Reverse returns its argument string reversed rune-wise left to right. func Reverse(s string) string { r := []rune(s) for i, j := 0, len(r)-1; i \u0026lt; len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r) }  现在，使用 go build 编译测试这个包：\ngo build github.com/user/stringutil  或者，如果你正在包的源目录，只需要：\ngo build  这不会生成一个输出文件。反之，它将编译的包保存在本地的编译缓存。\n在确认编译 stringutil 包之后，修改你原始的 hello.go(在 $GOPATH/src/github.com/user/hello)，使用下面的内容：\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;github.com/user/stringutil\u0026quot; ) func main() { fmt.Println(stringutil.Reverse(\u0026quot;!oG ,olleH\u0026quot;)) }  安装 hello 程序：\ngo install github.com/user/hello  运行这个程序的新版本，你应该看到一个新的、翻转的消息：\n$ hello Hello, Go!  上述步骤之后，你的工作区应该看起来是下面的结构：\nbin/ hello # command executable src/ github.com/user/ hello/ hello.go # command source stringutil/ reverse.go # package source  包名 Go 源文件的第一个语句必须是\npackage name  其中，name 是用于导入包的默认名字。(包内的所有文件必须使用这个名字。)\nGo 的管理是包名是导入路径的最后一个元素：按照 “crypto/rot13” 导入的包名应该命名为 rot13。\n可执行的命令必须总使用 package main。\n不需要包名在链接所有包成一个单一的二进制文件时是唯一的，只要它的导入路径(完整的文件名)是唯一的。\n查看实效 Go 编程了解更多关于 Go 的命名惯例。\n测试 Go 有一个轻量级的测试框架，由 go test 命令和 testing 包组成。\n你可以通过新建一个以 _test.go 结尾的文件编写测试，文件包含名字为 TestXXX，签名为 func (t *testing.T) 的函数。测试框架运行每个像这样的函数；如果函数调用一个失败函数，如 t.Error 或 t.Fail，认为该测试失败。\n向 stringutil 包增加一个测试，新建文件 $GOPATH/src/github.com/user/stringutil/reverse_test.go，包含下面的代码\npackage stringutil import \u0026quot;testing\u0026quot; func TestReverse(t *testing.T) { cases := []struct { in, want string }{ {\u0026quot;Hello, world\u0026quot;, \u0026quot;dlrow ,olleH\u0026quot;}, {\u0026quot;Hello, 世界\u0026quot;, \u0026quot;界世 ,olleH\u0026quot;}, {\u0026quot;\u0026quot;, \u0026quot;\u0026quot;}, } for _, c := range cases { got := Reverse(c.in) if got != c.want { t.Errorf(\u0026quot;Reverse(%q) == %q, want %q\u0026quot;, c.in, got, c.want) } } }  然后使用 go test 运行测试：\n$ go test github.com/user/stringutil ok github.com/user/stringutil 0.165s  和平时一样，如果你在包目录运行 go 工具，可以忽视包路径\n$ go test ok github.com/user/stringutil 0.165s  运行 go help test 并查看 testing 包文档 获取更多信息。\n远程包 导入路径可以描述如何使用版本控制系统(如 Git 或 Mercurial)获取包源码。go 工具使用这个属性从远程仓库自动拉取代码。比如，文档中描述的例子也保存在 Github 托管的 Git 仓库。如果你在包的导入路径包含这个仓库的 URL，go get 会自动拉取、编译和运行它：\ngo get github.com/golang/example/hello $GOPATH/bin/hello # 输出 Hello, Go examples!  如果指定的包没有出现在工作区，go get 会放置在 GOPATH 指定的第一个工作区。(如果包以及存在，go get 会跳过远程拉取，行为类似于 go install。)\n在执行上述 go get 命令只会，工作区目录树应该看起来是下面的结构：\nbin/ hello # command executable src/ github.com/golang/example/ .git/ # Git repository metadata hello/ hello.go # command source stringutil/ reverse.go # package source reverse_test.go # test source github.com/user/ hello/ hello.go # command source stringutil/ reverse.go # package source reverse_test.go # test source  Github 托管的 hello 命令依赖相同仓库的 stringutil 包。hello.go 文件中的导入使用相同的导入路径惯例，因此 go get 命令也可以定位和安装依赖依赖包。\nimport \u0026quot;github.com/golang/example/stringutil\u0026quot;  此惯例是使得你的 Go 包被其他人可用的最简单的方式。Go 维基 和 go 官方文档 提供了外部 Go 过程的列表。\n要获取更多关于借助 go 工具使用远程仓库的信息，查看远程导入路径。\n下一步 订阅 golang 宣传 邮件列表，接受发行新的稳定版本 Go 的通知。\n查看实效 Go 编程了解更多关于编写清楚、惯用的 Go 代码的建议。\n访问 Go 语言之旅 学习语言规则。\n访问官方文档查看关于 Go 语言及其库和工具的全面深入的文章。\n获取帮助 需要实时帮助，询问有帮助的 gopher ，它位于 FreeNode IRC 服务的 #go-nuts。\n关于 Go 语言讨论的官方邮件列表在 Go Nuts 群组。\n使用 Go issue 跟踪报告错误。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"4a6169ea0d0c803071b8305d8d7d4164","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/code/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/code/","section":"translation","summary":"介绍 代码组织 概览 工作区 GOPATH 环境变量 导入路径 第一个程序 第一个库 包名 测试 远程包 下一步 获取帮助 参考 Golang 官网文档 学习。 介绍 此文档演示一个简单的 Go 包的发展","tags":["golang-doc"],"title":"如何编写 Go 代码","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  内容  参考 Go 维基官网——学习测试学习。\n原网页由 Evgeny Vereshchagin 在 2019/1/29 编辑。第 4 次修订。\n内容 这个页面链接到关于 Go 测试的资源。\n阅读如何编写 Go 代码，尤其是测试 学习测试包 阅读为什么 Go 没有断言 阅读我最喜欢的测试辅助函数在哪里 观看测试技巧 阅读表驱动测试 阅读使用子测试项目和子基准测试  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fb46ad8ebcb68fe6f32ce4dac309cabe","permalink":"https://xueqing.github.io/translation/go-doc/wiki/learn_testing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/learn_testing/","section":"translation","summary":"内容 参考 Go 维基官网——学习测试学习。 原网页由 Evgeny Vereshchagin 在 2019/1/29 编辑。第 4 次修订。 内容 这个页面链接到关于 Go 测试的资源。 阅读如何编写 Go 代码，尤其是测试 学习","tags":["go-doc-wiki"],"title":"学习测试","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍  例子  格式化 注释 名字  包名 getter 接口名 驼峰  分号 控制结构  if 重新声明和重新赋值  函数  多返回值 命名结果参数 defer  数据  使用 new 分配 构造函数和复合字面量 使用 make 分配 数组 切片 二维切片 映射 打印 追加  初始化  常数   参考 Golang 官网文档——Effective Go 学习。\n介绍 Go 是一门新语言。虽然它从现有语言借鉴了想法，但是它有独特的属性使得实效的 Go 程序和使用其他语言编写的程序特点不同。直接将一个 C++ 或 Java 程序翻译成 Go 不太可能生成令人满意的结果——Java 程序是用 Java 写的，而不是 Go。另一方面，从 Go 的角度思考一个问题可能产生一个成功的但是完全不同的程序。换句话说，要写好 Go，理解它的特性和惯用语是很重要的。而且，了解用 Go 编程已有的惯例，比如命名、格式化、程序结构等等也很重要，以便你编写的程序容易被其他 Go 开发人员理解。\n此文档给出关于编写清晰、惯用的 Go 代码的建议。它增补了语言规范、Go 语言之旅以及如何编写 Go 代码，所有这些你应该先阅读。\n例子 Go 包源码用于作为和核心库，也作为如何使用语言的例子。此外，很多包包含可工作的、自包含的可执行例子，你可以直接从 golang.org 网站运行，比如这个网站(如果需要，点击单词 “Example” 打开它)。如果你对于如何处理一个问题或一些东西是如何实现的有疑问，这个库中的文档、代码和例子可以给出答案、思想和背景。\n格式化 格式化问题是最有争议却最不重要的。人们可以选择不同的格式风格，但是如果每个人遵循相同的风格，那么人们不需要且可以花费更少的时间在这个问题上是更好的。问题是如何在没有一个长长的风格规范指南的情况下实现这个想法。\n对于 Go，我们使用了一种特别的方法且交由机器注意大多数格式化问题。gofmt 程序(也可以通过 go fmt 使用，它作用于包级别而不是源文件级别)读入一个 Go 程序并且以标准的风格缩进、垂直对齐、保持或者需要的话重新格式化注释，然后发出源文件。如果你想要知道如何处理一些新的格式场景，运行 gofmt；如果答案看起来不正确，重新组织你的程序(或提出一个 gofmt 的错误)，不要绕过这个问题。\n作为一个例子，不必花时间对结构体的域做注释对齐。gofmt 将会为你做这些。给出一个声明\ntype T struct { name string // 对象的名字 value int // 对象的值 }  gofmt 会列对齐：\ntype T struct { name string // 对象的名字 value int // 对象的值 }  标准库中所有的 Go 代码都已经使用 gofmt 格式化过。\n还有一些格式化细节。非常简洁：\n缩进 我们使用 tab 键缩进，且 gofmt 默认使用 tab 键。只在必要的时候使用空格。 行长度 Go 没有行长度限制。不要担心溢出穿孔卡片。如果感觉一行太长，包裹它并使用额外的 tab 键缩进 括号 Go 比 C 和 Java 需要更少的括号：控制结构 (if/for/switch) 的语法没有括号。同时，操作符优先级层次更短更清晰。 因此不像其他语言， `x\u0026lt;\u0026lt;8 + y\u0026lt;\u0026lt;16` 就是空格暗示的含义。  注释 Go 提供 C-风格的块注释 /**/ 和 C++-风格的行注释 //。行注释是常态；块注释大多出现在包注释，但是在一个表达式内部或禁用大段代码是有用的。\ngodoc 程序，也是 web 服务器，处理 Go 源文件以提取关于包内容的文档。在顶层声明之前出现的注释，中间没有新行，和声明一起提取作为该元素的解释文本。这些注释的本性和风格决定了 godoc 生成的文档的质量。\n每个包应该有一个包注释，即 package 语句之前的一个块注释。对于多文件的包，包注释只需要出现在一个文件，且每个文件都可以看到。包注释应该介绍包并提供和包有关的信息作为一个整体。它会先出现在 godoc 页面，并且应该设置后面的详细文档。\n/* 包 regexp 实现了正则表达式的一个简单库。 接收正则表达式的语法是: 正则表达式: 连接 { '|' 连接 } 连接: { 闭包 } 闭包: 项 [ '*' | '+' | '?' ] 项: '^' '$' '.' 字符 '[' [ '^' ] 字符范围 ']' '(' 正则表达式 ')' */ package regexp  如果是一个简单包，包注释可以是简洁的。\n// 包 path 实现了功能代码，用于操作斜线分隔的文件名路径。  注释不需要额外的格式比如一行星号。生成的输出可能不能显式为固定宽度的字体，因此不要依赖空格对齐——godoc 像 gofmt 一样，会注意对齐问题。注释是无解释的普通文本，因此 HTML 和其他的注解，比如 _this_，会逐字重复，不应该使用。godoc 会做的一个调整是按固定宽度的字体显示缩进文本，适用于代码片段。fmt 包对包注释的使用恰到好处。\n视上下文而定，godoc 甚至可能不会重新格式化注释，因此确保他们直接看起来是格式好的：使用正确的拼写、标点符号和句子结构，折叠长行等等。\n在包内部，任何紧紧出现在顶层声明之前的注释作为该声明的一个文档注释。程序中每个导出的(大写开头的)名字应该有一个文档注释。\n文档注释最好是完整的句子，允许不同的自动化显示。第一个句子应该是一个总结句，以声明的名字开头。\n// Compile 解析一个正则表达式，且成功时返回一个可用于匹配文本的 Regexp 对象。 func Compile(str string) (*Regexp, error) {  如果每个文档注释以描述的元素名字开头，你可以使用 go 工具的 doc 子命令并通过 grep 运行输出。设想你不能急的 “Compile” 名字但是正在查找正则表达式的解析函数，因此你运行命令：\ngo doc -all regexp | grep -i parse  如果包内所有的文档注释以“这个函数……”开头，grep 不会帮助你记得那个名字。但是因为包的每个文档注释以名字开始，你会看到类似下面的内容，这会回忆起你正在寻找的单词。\n$ go doc -all regexp | grep -i parse Compile parses a regular expression and returns, if successful, a Regexp MustCompile is like Compile but panics if the expression cannot be parsed. parsed. It simplifies safe initialization of global variables holding  Go 的声明语法允许分组声明。一个单一的文档注释可以介绍一组相关的常量或变量。因为显示了整个声明，这样的注释通常是敷衍了事的。\n// 解析表达式失败时返回的错误代码。 var ( ErrInternal = errors.New(\u0026quot;regexp: internal error\u0026quot;) ErrUnmatchedLpar = errors.New(\u0026quot;regexp: unmatched '('\u0026quot;) ErrUnmatchedRpar = errors.New(\u0026quot;regexp: unmatched ')'\u0026quot;) ... )  分组也可以指示元素之间的关系，比如被一个所保护的变量集合的事实。\nvar ( countLock sync.Mutex inputCount uint32 outputCount uint32 errorCount uint32 )  名字 Go 中的名字和其他语言中的一样重要。它们甚至有语义影响：一个名字在包外的可见性取决于它的第一个字母是否是大写。因此值得花费一些时间讨论 Go 编程中的命名惯例。\n包名 当导入一个包时，包名成为这些内容的一个访问器。在 import \u0026quot;bytes\u0026quot; 之后，导入包可以讨论 bytes.buffer。每个使用该包的人可以使用相同的名字来引用包内容是有帮助的，这意味着包名应该是好的：短、简明、引起共鸣的。按照惯例，包使用小写的、单一单词的名字；不应该需要使用下划线或驼峰。Err 就是简洁的，因为每个人使用你的包都会输入那个名字。并且不予担心与先前的冲突。包名只是导入的默认名字；它不需要在所有源码范围内唯一，并且在极少冲突的情况下，导入包可选择一个不同的名字在局部使用。无论如何，混淆是稀少的，因为这个导入的文件名只决定正在使用的包。\n另外一个惯例是包名是源路径的基础名；在 src/encoding/base64 中的包作为 “encoding/base64” 导入，但名字是 base64，而不是 encoding_base64 或者 encodingBase64。\n包的导入者将会使用包名来引用它的内容，因此包中导出的名字可使用这个事实来避免停顿。(不要使用 import . 符号，这可以简化必须在被测试包之外的测试，但应该被避免。)比如， bufio 包中的带缓冲的 reader 类型叫做 Reader，而不是 BufReader，因为使用者看到的是 bufio.Reader，这是一个更加清晰简洁的名字。此外，因为导入的实体总是用包名处理，bufio.Reader 和 io.Reader 不会冲突。类似的，生成 ring.Ring 实例的函数——这是 Go 中构造函数的定义——通常会使用 NewRing 调用，但是因为 Ring 是这个包导出的唯一类型，且这个包叫做 ring，这个函数只用 New 调用，这个包的使用者看到的是 ring.New。使用包结构来帮助你选择好名字。\n另外一个简单的例子是 once.Do；once.Do(setup) 读着不错，并且不会被写做 once.DoOrWaitUntilDone(setup) 而有改善。长名字不会自动使得东西更易读。一个有用的文档注释通常比一个特别长的名字更有价值。\ngetter Go 不提供对 getter 和 setter 的自动支持。自己提供 getter 和 setter 是没有问题的，且通常这样做事合适的。但是将 Get 放在 getter 名字中既不是惯例也非必要的。如果你有一个域叫 owner(小写的，不导出)，它的 getter 方法应叫做 Owner(大写，导出的)，而不是 GetOwner。使用大写名字导出可以区分域名和方法名。如果有必要，一个 setter 方法可能叫做 SetOwner。两个名字实际上也是易读的：\nowner := obj.Owner() if owner != user { obj.SetOwner(user) }  接口名 按照惯例，一个方法的接口用方法名和一个 -er 后缀或类似的修改器命名，用以构造一个代理名词：Reader，Writer，Formatter，CloseNotifier 等。\n有许多类似的名字，且尊重这些名字及其捕获的函数名是富有成效的，Read，Write，Close，Flush，String 等等有规范的签名和含义。为了避免混淆，除非方法具有相同的签名和含义，不要使用上述这些名字给方法命名。相反地，如果你的类型实现的方法与一个熟悉的类型的方法有相同的含义，使用这个相同的名字和签名；将你的字符串转换方法命名为 String 而不是 ToString。\n驼峰 最后，Go 的惯例是使用 MixedCaps 或 mixedCaps 而不是下划线来写多单词的名字。\n分号 类似 C，Go 规范的语法使用分号来终止一个语句，但是和 C 不同的是，这些分号不会出现在源文件。反之，词法分析器使用一个简单的规则在扫描时自动插入分号，因此输入文本可免除大部分分号。\n规则如下。如果新行之前的最后一个符号是一个标识符(包括像 int 和 float64 的单词)，一个基本字面量，比如一个数字、字符串常量，或者下面的一个符号\nbreak continue fallthrough return ++ -- ) }  词法分析器总是在这个符号之后插入一个分号。这可以概括为，“如果在一个可以结束一句话的符号之后有一个新行，插入一个分号”。\n紧挨着在一个右大括号之前出现的分号也可以忽略，因此一个类似下面的语句不需要分号：\ngo func() {for { dts \u0026lt;- \u0026lt;- src }} ()  习惯上，Go 程序只在类似于 for 循环子句中有分号，用于分隔初始化、条件和连续元素。如果你在一行中写多个语句，也需要分号来分隔语句。\n插入分号规则的一个结果是你不能将一个控制结构(if/for/switch/select)的左大括号放在下一行。如果你这样做，会在一个大括号之前插入分号，这会导致不想出现的影响。像这样编写代码：\nif i \u0026lt; f() { g() }  不要像这样：\nif i \u0026lt; f() // 错误! { // 错误! g() }  控制结构 Go 的控制结构和 C 的控制结构相关，但是很不相同。Go 没有 do 或 while 循环，只有一个稍微普遍的 for；switch 更加灵活；if 和 switch 接受一个可选的类似 for 中的初始化语句；break 和 continue 语句使用一个可选的标签来识别从哪里跳出或继续循环；Go 也有新的控制结构，包括 type switch 和多向通讯复用器 select。语法也有一点不同：Go 没有小括号，且控制结构体必须使用大括号分隔。\nif 在 Go 中，一个简单的 if 看起来像这样：\nif x \u0026gt; 0 { return y }  强制的大括号鼓励将一个简单的 if 语句分为多行。无论如何，这样编写是一个好的风格，尤其是当代码体包含一个控制语句，比如 return 或 break。\n因为 if 和 switch 接受一个初始化语句，常见的是用于设置一个局部变量：\nif err := file.Chmod(0664); err != nil { log.Print(err) return err }  在 Go 的库中，你会发现当一个 if 没有流入下一句——即代码体以 break、continue、goto 或 return 结束——会忽略不需要的 else。\nf, err := os.Open(name) if err != nil { return err } codeUsing(f)  这是一个常见情形的例子，即代码必须防止一系列错误条件。如果成功的控制流沿着页面向下，而错误出现的时候消除它们时，代码阅读体验更好。因为错误情况倾向于以 return 语句结束，生成的diamante不需要 else 语句。\nf, err := os.Open(name) if err != nil { return err } d, err := f.Stat() if err != nil { f.Close() return err } codeUsing(f, d)  重新声明和重新赋值 函数 多返回值 Go 其中一个非凡的特性时函数和方法可以返回多个值。这个性质可用于改善 C 程序中的一些笨拙的写法：in-band 错误返回类似 -1 的值表示错误码并修改通过地址传递的参数。\n在 C 语言，使用一个负的计数器标记一个写入错误，且错误码隐藏在一个不固定位置。在 Go 语言，Write 可以返回一个计数器和一个错误：“是的，你写了一部分但非全部的字节，因为你已经填满了设备”。os 包中作用于文件的 Write 方法签名：\nfunc (file *File) Write(b []byte) (n int, err error)  且如文档所说，当 n 不等于 b 时这个方法返回写入的字节数和一个非空的错误。这是常见的风格；查看错误处理部分获得更多例子。\n一个类似的方法不需要传递一个指针给返回值来模拟一个引用参数。下面是一个简单的函数，从一个字节切片的某个位置起捕获一个数字，返回该数字和下一个位置。\nfunc nextInt(b []byte, i int) (int, int) { for ; i \u0026lt; len(b) \u0026amp;\u0026amp; !isDigit(b[i]); i++ { } x := 0 for ; i \u0026lt; len(b) \u0026amp;\u0026amp; isDigit(b[i]); i++ { x = x*10 + int(b[i]) - '0' } return x, i }  你可以使用这个方法像下面这样来扫描一个输入切片 b 的数字：\nfor i := 0; i \u0026lt; len(b); { x, i = nextInt(b, i) fmt.Println(x) }  命名结果参数 Go 函数的返回或结果“参数”可以指定名字并作为普通变量使用，就像使用传入参数。当函数开始时，命名的参数被初始化对应类型的零值；如果函数执行一个不带参数的 return 语句，返回参数的当前值被作为返回值。\n名字不是必须的，但是名字可以使得代码更加简短清晰：名字即是文档。如果我们将 nextInt 的结果命名，很显然返回的 int 含义。\nfunc nextInt(b []byte, pos int) (value, nextPos int) {  因为命名的结果会被初始化且绑定在一个简单的 return，它们可以既简单又清晰。下面是 oi.ReadFull 使用命名结果良好的版本：\nfunc ReadFull(r Reader, buf []byte) (n int, err error) { for len(buf) \u0026gt; 0 \u0026amp;\u0026amp; err == nil { var nr int nr, err = r.Read(buf) n += nr buf = buf[nr:] } return }  defer Go 的 defer 语句安排执行 defer 的函数返回之前立即运行一个函数调用(即推迟的函数)。这是一个处理一些场景特别而高效的方式，比如无论函数使用哪条路径返回都必须释放的资源。经典的例子是解锁一个互斥锁或关闭一个文件。\n// Contents 将文件内容作为字符串返回。 func Contents(filename string) (string, error) { f, err := os.Open(filename) if err != nil { return \u0026quot;\u0026quot;, err } defer f.Close() // 函数结束时会运行 f.Close。 var result []byte buf := make([]byte, 100) for { n, err := f.Read(buf[0:]) result = append(result, buf[0:n]...) // 后面会讨论 append。 if err != nil { if err == io.EOF { break } return \u0026quot;\u0026quot;, err // 如果在这里返回，会关闭 f。 } } return string(result), nil // 如果在这里返回，会关闭 f。 }  推迟一个类似于 Close 的函数调用有两个优点。其一，它保证你永远不会忘记关闭一个文件，如果你之后编辑这个函数增加一个新的返回路径，这是很容易犯的一个错误。其二，它意味着关闭挨着打开操作，这比放在函数末尾更加清晰。\n推迟的函数参数(当函数是一个方法时还包括接收者)在执行 defer 时计算值，而不是执行调用时计算。除了避免担心在函数执行时修改变量值，这还意味着一个单一的推迟调用可以推迟多个函数执行。这里有一个丑陋的示例。\nfor i := 0; i \u0026lt; 5; i++ { defer fmt.Printf(\u0026quot;%d \u0026quot;, i) }  推迟的函数按照 LIFO (后进先出)的顺序执行，因此上述代码函数返回时，会打印“ 4 3 2 1 0”。一个更加合乎情理的例子是使用一个简单的方式来跟踪程序的函数执行。我们可以写一些像这样的简单的跟踪代码：\nfunc trace(s string) { fmt.Println(\u0026quot;entering:\u0026quot;, s) } func untrace(s string) { fmt.Println(\u0026quot;leaving:\u0026quot;, s) } // 像这样使用它们: func a() { trace(\u0026quot;a\u0026quot;) defer untrace(\u0026quot;a\u0026quot;) // 做一些事情.... }  我们可以利用延迟函数的参数在执行 defer 时计算这一事实做的更好。跟踪代码可以设置不跟踪代码的参数。下面的例子\nfunc trace(s string) string { fmt.Println(\u0026quot;entering:\u0026quot;, s) return s } func un(s string) { fmt.Println(\u0026quot;leaving:\u0026quot;, s) } func a() { defer un(trace(\u0026quot;a\u0026quot;)) fmt.Println(\u0026quot;in a\u0026quot;) } func b() { defer un(trace(\u0026quot;b\u0026quot;)) fmt.Println(\u0026quot;in b\u0026quot;) a() } func main() { b() }  打印\nentering: b in b entering: a in a leaving: a leaving: b  对于习惯块级别资源管理的其他语言的编程人员，defer 可能看起来怪异的，但是它最有趣且强大的应用正来自它不是块级别而是函数级别的事实。在 panic 和 recover 部分，我们会看到另一个可能使用 defer 的例子。\n数据 使用 new 分配 Go 有两种分配原语，即内置函数 new 和 make。它们做了不同的事情且适用于不同类型，这可能有点难以理解，但是规则很简单。我们首先讨论 new。它是一个分配内存的内置函数，但是和一些其他语言的同名函数不同，它不会初始化内存，它只是将内存置零。也就是说，new(T) 为类型 T 的新条目分配置零的存储，并返回存储地址(值为类型 T*)。在 Go 的术语中， 它返回一个指针指向一个新分配的类型 T 的零值。\n因为 new 返回的内存是置零的，当将你的数据结构设计为每个类型的零值都可以直接使用不需要进一步初始化，在安排的时候是很有用的。这意味着数据结构的使用者可以使用 new 创建一个对象并正常工作。比如，bytes.Buffer 的文档声明“ Buffer 的零值是一个就绪的空缓冲”。类似的，sync.Mutex 没有一个显式的构造函数或 Init 方法。反之，sync.Mutex 的零值被定义为一个未上锁的互斥锁。\n“零值是有用的”这一属性可以传递。考虑这个类型声明：\ntype SyncedBuffer struct { lock sync.Mutex buffer bytes.Buffer }  SyncedBuffer 类型的值也是分配或声明时就绪的。在下一个片段中，p 和 v 都可以正确工作而不用进一步安排。\np := new(SyncedBuffer) // *SyncedBuffer 类型 var v SyncedBuffer // SyncedBuffer 类型  构造函数和复合字面量 有时候零值不够好，且需要一个初始化构造函数，正如下面从 os 包衍生的一个例子：\nfunc NewFile(fd int, name string) *File { if fd \u0026lt; 0 { return nil } f := new(File) f.fd = fd f.name = name f.dirinfo = nil f.nepipe = 0 return f }  这里有很多模板式代码。我们可以使用一个“复合字面量”来简化代码。“复合字面量”是一个表达式，它在每次求值时创建一个新的实例。\nfunc NewFile(fd int, name string) *File { if fd \u0026lt; 0 { return nil } f := File{fd, name, nil, 0} return \u0026amp;f }  注意，和 C 不同，返回一个局部变量的地址是完全可以的；和变量相关的存储在函数返回时仍存在。事实上，使用复合字面量的地址在每次求值时分配一个新的实例，因此我们可以合并后面两行代码：\nreturn \u0026amp;File{fd, name, nil, 0}  复合字面量的域按顺序放置且必须都要出现。然而，通过显式给域打像 field:value 的标签，初始化列表可以按任何顺序出现，且缺失的域会分别使用对应的零值。因此我们可以写\nreturn \u0026amp;File{fd: fd, name: name}  作为一个限制性场景，如果一个复合字面量不包含任何域，它会为类型创建零值。表达式 new(File) 和 \u0026amp;File{} 是等价的。\n复合字面量也可用于创建数组、切片和映射，使用索引或合适的键给域打标签，在这些例子中，无论 Enone、Eio 和 Einval 的值是什么，只要它们是唯一的，初始化器都可以工作。\na := [...]string {Enone: \u0026quot;no error\u0026quot;, Eio: \u0026quot;Eio\u0026quot;, Einval: \u0026quot;invalid argument\u0026quot;} s := []string {Enone: \u0026quot;no error\u0026quot;, Eio: \u0026quot;Eio\u0026quot;, Einval: \u0026quot;invalid argument\u0026quot;} m := map[int]string{Enone: \u0026quot;no error\u0026quot;, Eio: \u0026quot;Eio\u0026quot;, Einval: \u0026quot;invalid argument\u0026quot;}  使用 make 分配 数组 切片 二维切片 映射 打印 追加 初始化 常数 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"6ccdeadec8efbe462465546d801c9aa7","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/effective_go/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/effective_go/","section":"translation","summary":"介绍 例子 格式化 注释 名字 包名 getter 接口名 驼峰 分号 控制结构 if 重新声明和重新赋值 函数 多返回值 命名结果参数 defer 数据 使用 new 分配 构造函数和复合字面量 使用 make 分配","tags":["golang-doc"],"title":"实效 Go 编程","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":" 显示反引号  用两个反引号`  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1215c4c56bd92aa6e4086d28c8ccaa22","permalink":"https://xueqing.github.io/blog/markdown/problem/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/markdown/problem/","section":"blog","summary":"显示反引号 用两个反引号`","tags":["md"],"title":"常见问题","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  起源 用法 设计  为什么 Go 没有断言  类型 值 编写代码 指针和分配 并发 函数和方法 控制流 包和测试 实现  我最喜欢的测试辅助函数在哪里  性能 从 C 的改变  参考 Go 官方文档——常见问题解答学习。\n起源 用法 设计 为什么 Go 没有断言 Go 不提供断言。他们无疑是方便的，但是我们已有的经验是开发人员依赖断言避免思考合适的错误处理和报告。合适的错误处理意味着服务在一个非严重的错误之后继续操作而不是崩溃。合适的错误处理意味着错误是直接的、扼要的，使开发人员免于解释大量的崩溃跟踪。当看到错误的开发人员不熟悉代码，错误的准确尤为重要。\n我们明白这是一个争论点。Go 语言和库有很多不同于现代实践的地方，只是因为我们感觉有时候值得尝试一个不同的方法。\n类型 值 编写代码 指针和分配 并发 函数和方法 控制流 包和测试 实现 我最喜欢的测试辅助函数在哪里 Go 的标准 testing 包使得易于编写单元测试，但是它缺少其他语言测试框架提供的一些特性，比如断言函数。此文档前面的部分解释了为什么 Go 没有断言，以及在测试中使用断言的相同论点。合适的错误处理意味着使得其他测试在一个测试失败时继续运行，以便调试错误的人员可以得到一个错误的完整信息。对于一个测试来说，比起报告 isPrime 对于 2 的答案是错误的并因此不再运行更多测试，报告 isPrime 对 2、3、5、7 (或 2、4、8、16) 给出错误的答案是更加有用的。触发测试错误的开发人员可能不熟悉失败的代码。在测试失败时，花费时间编写一个好的错误消息是值得的。\n相关的一点是测试框架趋向于发展成为他们自己的微语言，包括条件、控制和打印机制，但是 Go 已经有所有这些功能了；为什么要创建他们？我们更愿意用 Go 编写测试；它是一门学习更少的语言，而且这个方法保持测试是直截了当易于理解的。\n如果编写好的错误所需的额外代码数量看起来是重复的、巨大的，那么表驱动测试可能效果更好。表驱动是迭代遍历定义在一个数据结构(Go 对于数据结构字面量有极好的支持)的输入和输出列表。编写一个好的测试和错误信息的工作在测试拥挤很多时将会被分摊。标准的 Go 库有许多说明示例，比如 fmt 包的格式化测试。\n性能 从 C 的改变 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"6c26f520b3123c91136f2e28127cf273","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/faq/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/faq/","section":"translation","summary":"起源 用法 设计 为什么 Go 没有断言 类型 值 编写代码 指针和分配 并发 函数和方法 控制流 包和测试 实现 我最喜欢的测试辅助函数在哪里 性能 从 C 的改变 参考 Go 官方文档","tags":["golang-doc"],"title":"常见问题解答","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":" 原文\n几种典型的开发方式  软件开发中的“锁”  技术能力上的锁：需要不同的语言开发一个项目，每人只会一种语言 负责模块上的锁：不同的人负责不同的模块 时间锁、进度锁：掌握语言或模块负责的人不同，需要协作开发 沟通锁、利益锁：人员增多会增加沟通成本 解决方案 一个程序员应该可以掌握多个语言，能够负责多个模块甚至不同的职责  接力棒式软件开发  底层开发-上层开发-测试-运维。。。 解决方案 不同的团队有自己的框架（开发框架和服务框架），使得其他团队可以自己接入  保姆式软件开发  从产品到研发、测试和运维，每个团队没有较好的完成自己的工作，需要之后的团队来发现问题 产品的需求不完整，后期边开发边加需求 研发没有充分测试自己的代码，使得测试花更多时间来定位错误 测试没有充分测试产品，使得运维需要花更多时间重新部署服务 解决方案 招聘懂“需求”、注重“软件工程”、“软件质量”和“软件维护”的工程师 自己管理自己 支持性工作的人越少越好 服务化。我服务于代表让对方做起事来更容易  WatchDog 软件开发  为了解决某个系统的问题，要用一个新的系统去监控 解决方案 想好设计，多评估几个设计，简化流程  故障驱动式软件开发  以上线为目的，出问题再改，使得后期话更多时间定为错误、重构代码 解决方案 基础知识和理论知识的重要性，多使用成熟的方案 考虑清楚再写实现，做好设计  总结  软件工程师分工分得越细这个团队就越没效率，团队间的服务化是关键的关键 需要在一个环节上认真，这个环节越往前就越有效率，越往后就越没效率：需求收集-设计和编码-测试 “小而精的团队”+“条件和资源受限”是效率的根本，这样才会用最经济的手段做最有价值的事 软件架构上要松耦合，团队组织上要紧耦合 工程师文化是关键，重视过程就是重视结果   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7a5a55651067d108cabfe319524c6c3a","permalink":"https://xueqing.github.io/blog/coolshell/%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E7%9A%84%E6%95%88%E7%8E%87/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/coolshell/%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E7%9A%84%E6%95%88%E7%8E%87/","section":"blog","summary":"原文 几种典型的开发方式 软件开发中的“锁” 技术能力上的锁：需要不同的语言开发一个项目，每人只会一种语言 负责模块上的锁：不同的人负责不同的模块 时","tags":["coolshell"],"title":"开发团队的效率","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":"  为什么使用异常 C++ 使用异常  使用异常的反对观点 替代方案：通过判断或函数返回值检查错误 使用 try/catch/throw 而不是条件判断和返回错误码来改善软件质量 异常便于传递错误信息 异常使得代码更简洁 异常更易区分正常执行的代码 使用异常处理错误是值得的 构造函数可以抛异常 析构函数不抛异常 抛出什么异常 捕获什么异常 throw 再次抛异常 注解  参考  为什么使用异常  使用异常处理错误使得代码更简单、更干净，并且更不可能错过错误。使用 errno 和 if 语句使得错误处理和普通代码紧密缠绕，因此代码更加凌乱，也更难确保已经处理了所有的错误。 构造函数的工作是创建类的不变性(创建成员函数运行的环境)，这经常需要获取如内存、锁、文件、套接字等资源，即 RAII(Resource Acquisition Is Initialization)。 报告一个构造函数检查到的错误需要抛异常实现。  C++ 使用异常  C++ 中，异常用于指示内部不能处理的错误，比如构造函数内部获取资源失败。 不要使用异常作为函数的返回值。 C++ 使用异常来支持错误处理：  使用 throw 指示错误(函数不能处理错误，或者暴露错误的后置条件)。 在知道可以处理错误的时候使用 catch 指定错误处理行为(可以翻译成另一种类型并且重新抛出)。 不要使用 throw 指示调用函数的代码错误。而是使用 assert 或其他机制，或者发送进程给调试器，或者使得进程崩溃并收集崩溃日志以便程序员调试。 当发现对组件不变式的意外违反时，不要使用 throw，使用 throw 或其他机制来终止程序。抛出异常不能解决内存崩溃甚至会导致后续使用数据的错误。   使用异常的反对观点  异常是昂贵的：和没有错误处理相比，现代 C++ 实现已经将异常的负载降到 3% 左右。正常情况不抛异常，比使用返回值和检查代码运行更快。只有出现错误才会有负载。 JSF++ 禁止异常：JSF++ 是硬实时和严格安全性的应用(飞机控制系统)。我们必须保证响应时间，所以我们不能使用异常，甚至禁止使用释放分配的存储。 使用 new 调用构造函数抛异常会导致内存泄漏：这是旧编译器的 bug，现在早已经解决了。\nT *p= new T;//将被编译器转换给类似下面的代码 void allocate_and_construct() { // 第一步，分配原始内存，若失败则抛出bad_alloc异常 try { // 第二步，调用构造函数构造对象 new (p)T; // placement new: 只调用T的构造函数 } catch(...) { delete p; // 释放第一步分配的内存 throw; // 重抛异常，通知应用程序 } }   替代方案：通过判断或函数返回值检查错误 ofstream os(\u0026quot;myfile\u0026quot;);//需要打开一个文件 if(os.bad()) { /*打开失败需要处理错误*/ }   可以通过函数返回一个错误码或设置一个局部变量(如 errno)。  不使用全局变量：全局变量需要立即检查，因为其他函数可能会重置它；多线程也会有问题。 这就需要测试每个对象。当类由许多对象组成，尤其是这些子对象互相依赖时，会导致代码一团糟。  但是检查返回值要求智慧甚至不可能达到目的。比如下面的代码\n 对于 my_negate 函数，每一个 int 返回值都是正确的，但是当使用二进制补码表示的时候，是没有最大负数的，可参考C语言中INT_MIN的一些问题。这种情况下，就需要返回值对，分别表示错误码和运算结果。\ndouble d = my_sqrt(-1);//错误返回 -1 if(d == -1) { /*处理错误*/ } int x = my_negate(INT_MIN);//额。。。    使用 try/catch/throw 而不是条件判断和返回错误码来改善软件质量  条件语句更易犯错 延迟发布时间：白盒测试需要覆盖所有条件分支 增加开发花费：非必须的条件控制增加了发现 bug、解决 bug 和测试的复杂度 检测到错误的代码通常需要传递错误信息，这可能是多层函数调用，这种情况下每一层调用函数都需要添加判断代码和返回值；而异常可以更简洁、干净地传递错误信息到可以处理错误的调用者  异常便于传递错误信息  使用异常\nvoid f1() { try { // ... f2(); // ... } catch (some_exception\u0026amp; e) { // ...code that handles the error... } } void f2() { ...; f3(); ...; } // f3 到 f9 逐层调用，f9 调用 f10 void f10() { // ... if ( /*...some error condition...*/ ) throw some_exception(); // ... }  不使用异常\nint f1() { // ... int rc = f2(); if (rc == 0) { // ... } else { // ...code that handles the error... } } int f2() { // ... int rc = f3(); if (rc != 0) return rc; // ... return 0; } // f3 到 f9 都需要增加判断代码 int f10() { // ... if (...some error condition...) return some_nonzero_error_code; // ... return 0; }   异常使得代码更简洁 Number 类支持加减乘除 4 种基本运算，但是加会溢出，除会导致除 0 错误或向下溢出等等\n 使用异常\nvoid f(Number x, Number y) { try { // ... Number sum = x + y; Number diff = x - y; Number prod = x * y; Number quot = x / y; // ... } catch (Number::Overflow\u0026amp; exception) { // ...code that handles overflow... } catch (Number::Underflow\u0026amp; exception) { // ...code that handles underflow... } catch (Number::DivideByZero\u0026amp; exception) { // ...code that handles divide-by-zero... } }  不使用异常\nint f(Number x, Number y) { // ... Number::ReturnCode rc; Number sum = x.add(y, rc); if (rc == Number::Overflow) { // ...code that handles overflow... return -1; } else if (rc == Number::Underflow) { // ...code that handles underflow... return -1; } else if (rc == Number::DivideByZero) { // ...code that handles divide-by-zero... return -1; } Number diff = x.sub(y, rc); if (rc == Number::Overflow) { // ...code that handles overflow... return -1; } else if (rc == Number::Underflow) { // ...code that handles underflow... return -1; } else if (rc == Number::DivideByZero) { // ...code that handles divide-by-zero... return -1; } Number prod = x.mul(y, rc); if (rc == Number::Overflow) { // ...code that handles overflow... return -1; } else if (rc == Number::Underflow) { // ...code that handles underflow... return -1; } else if (rc == Number::DivideByZero) { // ...code that handles divide-by-zero... return -1; } Number quot = x.div(y, rc); if (rc == Number::Overflow) { // ...code that handles overflow... return -1; } else if (rc == Number::Underflow) { // ...code that handles underflow... return -1; } else if (rc == Number::DivideByZero) { // ...code that handles divide-by-zero... return -1; } // ... }   异常更易区分正常执行的代码  使用异常\nvoid f() // Using exceptions { try { GResult gg = g(); HResult hh = h(); IResult ii = i(); JResult jj = j(); // ... } catch (FooError\u0026amp; e) { // ...code that handles \u0026quot;foo\u0026quot; errors... } catch (BarError\u0026amp; e) { // ...code that handles \u0026quot;bar\u0026quot; errors... } }  不使用异常\nint f() // Using return-codes { int rc; // \u0026quot;rc\u0026quot; stands for \u0026quot;return code\u0026quot; GResult gg = g(rc); if (rc == FooError) { // ...code that handles \u0026quot;foo\u0026quot; errors... } else if (rc == BarError) { // ...code that handles \u0026quot;bar\u0026quot; errors... } else if (rc != Success) { return rc; } HResult hh = h(rc); if (rc == FooError) { // ...code that handles \u0026quot;foo\u0026quot; errors... } else if (rc == BarError) { // ...code that handles \u0026quot;bar\u0026quot; errors... } else if (rc != Success) { return rc; } IResult ii = i(rc); if (rc == FooError) { // ...code that handles \u0026quot;foo\u0026quot; errors... } else if (rc == BarError) { // ...code that handles \u0026quot;bar\u0026quot; errors... } else if (rc != Success) { return rc; } JResult jj = j(rc); if (rc == FooError) { // ...code that handles \u0026quot;foo\u0026quot; errors... } else if (rc == BarError) { // ...code that handles \u0026quot;bar\u0026quot; errors... } else if (rc != Success) { return rc; } // ... return Success; }   使用异常处理错误是值得的  使用异常处理错误需要付出  异常处理要求原则和严谨：需要学习； 异常处理不是万能药：如果团队是草率没有纪律的，那么使用异常和返回值都会有问题 异常处理不是通用的：应当知道什么条件应该使用返回值，什么条件使用异常 异常处理会鞭策学习新技术   构造函数可以抛异常  当不能正确初始化或构造一个对象时，应该在构造函数内部抛出异常  构造函数没有返回值，所以不能使用返回错误码的方式 最差的方式是使用一个内部状态码来判断是否构造成功，但是需要在每次调用构造函数的时候使用 if 检查状态码，或者在成员函数内部增加 if 检查  构造函数抛异常也不会有内存泄漏\n 构造函数抛异常时，对象的析构函数不会运行。因为对象的生命周期是构造函数成功完成或返回，抛异常表示构造失败，生命周期没有开始。因此需要将 undone 的东西保存在对象的数据成员 比如使用智能指针保存分配的成员对象，而不是保存到原始的 Fred* 数据成员\n// Fred.h #include \u0026lt;memory\u0026gt; class Fred { public: //typedef 简化了使用 Fred 对象的语法，可以使用Fred::Ptr 取代 std::unique_ptr\u0026lt;Fred\u0026gt; typedef std::unique_ptr\u0026lt;Fred\u0026gt; Ptr; // ... }; //调用者 cpp #include \u0026quot;Fred.h\u0026quot; void f(std::unique_ptr\u0026lt;Fred\u0026gt; p); // explicit but verbose void f(Fred::Ptr p); // simpler void g() { std::unique_ptr\u0026lt;Fred\u0026gt; p1( new Fred() ); // explicit but verbose Fred::Ptr p2( new Fred() ); // simpler // ... }    析构函数不抛异常  析构函数抛异常会导致异常点之后的代码不能指向，可能造成内存泄漏问题 可以在析构函数抛异常，但是该异常不能出析构函数，即需要在析构函数内部使用 catch 捕获异常。否则会破坏标准库和语言的规则。 处理方式是：  可以写信息到日志文件，终止进程。 提供一个普通函数执行可能抛异常的操作，给客户处理错误。  C++ 规则是异常的 “栈展开(stack unwinding)” 进程中调用的析构函数不能抛异常：  “stack unwinding”：当抛出一个异常时，栈是 “unwound” 的，因此在 throw 和 catch 之间的栈帧会被弹出。 在 “stack unwinding” 过程中，这些栈帧中的所有局部变量会被析构。如果其中一个析构函数抛出异常，C++ 运行时系统将进入 “no-win” 状态：两个异常只能处理一个，忽视任何一个都会丢失信息。 此时 C++ 会调用 terminate() 终止进程。即在发生异常的情况下调用析构函数抛出异常会导致程序崩溃。因此避免的方法就是永远不要在析构函数抛异常。   抛出什么异常  抛出对象。如果可以，写子类继承自 std::exception 类，可以提供更多关于异常的信息  捕获什么异常  可以的话，捕获异常的引用：拷贝可能会有不同的行为；指针则不确定是否需要删除指向异常的指针  throw 再次抛异常  可用于实现简单的 “stack-trace”，即堆栈跟踪，在程序重要函数内部增加 catch 语句\nclass MyException { public: // ... void addInfo(const std::string\u0026amp; info); // ... }; void f() { try { // ... } catch (MyException\u0026amp; e) { e.addInfo(\u0026quot;f() failed\u0026quot;); throw;//再次抛出当前异常 } }  也可用于 “exception dispatcher”，即异常分发\nvoid handleException() { try { throw; } catch (MyException\u0026amp; e) { // ...code to handle MyException... } catch (YourException\u0026amp; e) { // ...code to handle YourException... } } void f() { try { // ...something that might throw... } catch (...) { handleException(); } }   注解  不是所有编译器支持异常捕获(exception-try-block)，只有 GCC 和大多数新版本的 MSVC 支持。 初始化的异常不能被隐藏：构造函数内的异常处理部分必须抛出一个异常，或重新抛出捕获的异常。下面两个版本的代码是等价的\n// Version 1 struct A { Buf b_; A(int n) try : b_(n) { cout \u0026lt;\u0026lt; \u0026quot;A initialized\u0026quot; \u0026lt;\u0026lt; endl; } catch(BufError\u0026amp; ) { cout \u0026lt;\u0026lt; \u0026quot;BufError caught\u0026quot; \u0026lt;\u0026lt; endl; } }; // Version 2 struct A { Buf b_; A(int n) try : b_(n) { cout \u0026lt;\u0026lt; \u0026quot;A initialized\u0026quot; \u0026lt;\u0026lt; endl; } catch(BufError\u0026amp; be) { cout \u0026lt;\u0026lt; \u0026quot;BufError caught\u0026quot; \u0026lt;\u0026lt; endl; throw; } };   参考  Throwing Catch Throwing exceptions from constructors Exception in constructor exceptions Can a constructor throw an exception in Java? Can constructors throw exceptions in Java? C++构造函数、析构函数与抛出异常  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"6186c12fc339e7f81cbd63848c9935c1","permalink":"https://xueqing.github.io/blog/cplusplus/exception/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/exception/","section":"blog","summary":"为什么使用异常 C++ 使用异常 使用异常的反对观点 替代方案：通过判断或函数返回值检查错误 使用 try/catch/throw 而不是条件判断和返回错误码来改善软件质量 异常便于传递错","tags":["c++"],"title":"异常","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" 课程链接  Distributed Systems  教程链接  Code your own blockchain with golang  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7b7c11fb2269238dceefa89a9382773c","permalink":"https://xueqing.github.io/blog/course/interesting_links/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/course/interesting_links/","section":"blog","summary":"课程链接 Distributed Systems 教程链接 Code your own blockchain with golang","tags":["course"],"title":"感兴趣的链接","type":"blog"},{"authors":["kiki"],"categories":["blog"],"content":" 数组退化  类型和纬度丢失就是数组退化。通常发生在通过值或指针传递数组。这种情况下，数组发送的是它的首地址，因此数组的大小不是原始大小，而是首地址在内存中占用的大小。 下面的代码中，实际数组有 7 个 int 元素，因此大小是 28。但是调用时传递值和指针，数组退化成指针，打印的是 1 个指针的大小\n#include \u0026lt;iostream\u0026gt; using namespace std; void decayByPassVal(int *p) { cout \u0026lt;\u0026lt; \u0026quot;Modified size of array by passing by value: \u0026quot; \u0026lt;\u0026lt; sizeof(p) \u0026lt;\u0026lt; endl; } void decayByPassPointer(int (*p)[7]) { cout \u0026lt;\u0026lt; \u0026quot;Modified size of array by passing by pointer: \u0026quot; \u0026lt;\u0026lt; sizeof(p) \u0026lt;\u0026lt; endl; } int main() { int a[7] = {1, 2, 3, 4, 5, 6, 7,}; cout \u0026lt;\u0026lt; \u0026quot;Actual size of array is: \u0026quot; \u0026lt;\u0026lt; sizeof(a) \u0026lt;\u0026lt;endl; decayByPassVal(a); decayByPassPointer(\u0026amp;a); return 0; }   如何避免数组退化  典型的方法避免数组退化是传递数组的大小作为单独的参数，而不是使用 sizeof 另外一个方法避免数组退化是传递引用，这个可以避免数组转化为指针，因此避免了退化\n#include \u0026lt;iostream\u0026gt; using namespace std; void avoidByPassReference(int (\u0026amp;p)[7]) { cout \u0026lt;\u0026lt; \u0026quot;Modified size of array by passing by reference: \u0026quot; \u0026lt;\u0026lt; sizeof(p) \u0026lt;\u0026lt; endl; } int main() { int a[7] = {1, 2, 3, 4, 5, 6, 7,}; cout \u0026lt;\u0026lt; \u0026quot;Actual size of array is: \u0026quot; \u0026lt;\u0026lt; sizeof(a) \u0026lt;\u0026lt;endl; avoidByPassReference(a); return 0; }   参考  What is Array Decay in C++? How can it be prevented?  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"69c77ed2d4d0fd8add3adc75eafd2cba","permalink":"https://xueqing.github.io/blog/cplusplus/array_decay/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/array_decay/","section":"blog","summary":"数组退化 类型和纬度丢失就是数组退化。通常发生在通过值或指针传递数组。这种情况下，数组发送的是它的首地址，因此数组的大小不是原始大小，而是首地","tags":["c++"],"title":"数组退化问题","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 维基官网——文章 学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1a0a3865529165b0d9fc7db0cd18d82f","permalink":"https://xueqing.github.io/translation/go-doc/wiki/articles/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/articles/","section":"translation","summary":"参考 Go 维基官网——文章 学习。","tags":["go-doc-wiki"],"title":"文章","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"go test 命令预期查找对应测试包的 “*_test.go” 文件中的测试函数、基准测试函数和示例函数。\n测试函数命名为 TestXxx(Xxx 不以小写字母开始)，且应当有签名\nfunc TestXxx(t *testing.T) { ... }  一个基准测试函数命名为 BenchmarkXxx，且应该有签名\nfunc BenchmarkXxx(b *testing.B) { ... }  一个示例函数，类似于测试函数，但不使用 *testing.T 报告成功或失败，而是打印输出到 os.Stdout。如果函数内最后的注释以 “Output:” 开头，那么输出与注释精确比较(看下面的例子)。如果最后的注释以 “Unordered output:” 开始，那么输出和注释做比较，但是忽视行的顺序。一个不带这样的注释的示例被编译但是不执行。一个在 “Output:” 之后没有文本的示例会被编译、执行并预期不会生成输出。\nGodoc 显示 ExampleXxx 的消息体来演示函数、常量或变量 Xxx 的使用。一个接收类型是 T 或 *T 的方法 M 的示例函数命名为 ExampleT_M。对于一个给定的函数、常数或变量可能有多个示例，通过后缀 _xxx 区分，xxx 是一个不以大写字母开始的后缀。\n有一个示例函数的例子：\nfunc ExamplePrintln() { Println(\u0026quot;The output of\\nthis example.\u0026quot;) // Output: The output of // this example. }  另外一个忽视输出顺序的例子：\nfunc ExamplePerm() { for _, value := range Perm(4) { fmt.Println(value) } // Unordered output: 4 // 2 // 1 // 3 // 0 }  当文件包含一个单独的示例函数，及至少一个其他的函数、类型、变量或常数声明，且没有测试函数或者基准测试函数时，整个测试文件作为例子显示。\n查看 testing 包的文档查看更多信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"f69f54bc9b6afed287550cde8afa0417","permalink":"https://xueqing.github.io/translation/go-doc/command/test_func/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/test_func/","section":"translation","summary":"go test 命令预期查找对应测试包的 “*_test.go” 文件中的测试函数、基准测试函数和示例函数。 测试函数命名为 TestXxx(Xxx 不以小写字母开始)，且应当有签名","tags":["go-command"],"title":"测试函数","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"go test 命令使用只适用于 go test 的标识以及适用于生成二进制测试的标识。\n一些标识控制概要并且写适用于 go tool pprof 的执行概要；运行 go tool pprof -h 查看更多信息。pprof 的 \u0026ndash;alloc_space、\u0026ndash;alloc_objects 和 \u0026ndash;show_bytes 选项控制如何显示这些信息。\n下面的标识被 go test 命令识别，并且控制测试的执行：\n-bench regexp Run only those benchmarks matching a regular expression. By default, no benchmarks are run. To run all benchmarks, use '-bench .' or '-bench=.'. The regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a benchmark's identifier must match the corresponding element in the sequence, if any. Possible parents of matches are run with b.N=1 to identify sub-benchmarks. For example, given -bench=X/Y, top-level benchmarks matching X are run with b.N=1 to find any sub-benchmarks matching Y, which are then run in full. -benchtime t Run enough iterations of each benchmark to take t, specified as a time.Duration (for example, -benchtime 1h30s). The default is 1 second (1s). The special syntax Nx means to run the benchmark N times (for example, -benchtime 100x). -count n Run each test and benchmark n times (default 1). If -cpu is set, run n times for each GOMAXPROCS value. Examples are always run once. -cover Enable coverage analysis. Note that because coverage works by annotating the source code before compilation, compilation and test failures with coverage enabled may report line numbers that don't correspond to the original sources. -covermode set,count,atomic Set the mode for coverage analysis for the package[s] being tested. The default is \u0026quot;set\u0026quot; unless -race is enabled, in which case it is \u0026quot;atomic\u0026quot;. The values: set: bool: does this statement run? count: int: how many times does this statement run? atomic: int: count, but correct in multithreaded tests; significantly more expensive. Sets -cover. -coverpkg pattern1,pattern2,pattern3 Apply coverage analysis in each test to packages matching the patterns. The default is for each test to analyze only the package being tested. See 'go help packages' for a description of package patterns. Sets -cover. -cpu 1,2,4 Specify a list of GOMAXPROCS values for which the tests or benchmarks should be executed. The default is the current value of GOMAXPROCS. -failfast Do not start new tests after the first test failure. -list regexp List tests, benchmarks, or examples matching the regular expression. No tests, benchmarks or examples will be run. This will only list top-level tests. No subtest or subbenchmarks will be shown. -parallel n Allow parallel execution of test functions that call t.Parallel. The value of this flag is the maximum number of tests to run simultaneously; by default, it is set to the value of GOMAXPROCS. Note that -parallel only applies within a single test binary. The 'go test' command may run tests for different packages in parallel as well, according to the setting of the -p flag (see 'go help build'). -run regexp Run only those tests and examples matching the regular expression. For tests, the regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a test's identifier must match the corresponding element in the sequence, if any. Note that possible parents of matches are run too, so that -run=X/Y matches and runs and reports the result of all tests matching X, even those without sub-tests matching Y, because it must run them to look for those sub-tests. -short Tell long-running tests to shorten their run time. It is off by default but set during all.bash so that installing the Go tree can run a sanity check but not spend time running exhaustive tests. -timeout d If a test binary runs longer than duration d, panic. If d is 0, the timeout is disabled. The default is 10 minutes (10m). -v Verbose output: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds. -vet list Configure the invocation of \u0026quot;go vet\u0026quot; during \u0026quot;go test\u0026quot; to use the comma-separated list of vet checks. If list is empty, \u0026quot;go test\u0026quot; runs \u0026quot;go vet\u0026quot; with a curated list of checks believed to be always worth addressing. If list is \u0026quot;off\u0026quot;, \u0026quot;go test\u0026quot; does not run \u0026quot;go vet\u0026quot; at all.  下面的标识被 go test 命令识别，且可用于概述执行期间的测试：\n-benchmem Print memory allocation statistics for benchmarks. -blockprofile block.out Write a goroutine blocking profile to the specified file when all tests are complete. Writes test binary as -c would. -blockprofilerate n Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate with n. See 'go doc runtime.SetBlockProfileRate'. The profiler aims to sample, on average, one blocking event every n nanoseconds the program spends blocked. By default, if -test.blockprofile is set without this flag, all blocking events are recorded, equivalent to -test.blockprofilerate=1. -coverprofile cover.out Write a coverage profile to the file after all tests have passed. Sets -cover. -cpuprofile cpu.out Write a CPU profile to the specified file before exiting. Writes test binary as -c would. -memprofile mem.out Write an allocation profile to the file after all tests have passed. Writes test binary as -c would. -memprofilerate n Enable more precise (and expensive) memory allocation profiles by setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'. To profile all memory allocations, use -test.memprofilerate=1. -mutexprofile mutex.out Write a mutex contention profile to the specified file when all tests are complete. Writes test binary as -c would. -mutexprofilefraction n Sample 1 in n stack traces of goroutines holding a contended mutex. -outputdir directory Place output files from profiling in the specified directory, by default the directory in which \u0026quot;go test\u0026quot; is running. -trace trace.out Write an execution trace to the specified file before exiting.  所有这些标识也有一个可选的 “test.” 前缀被识别(如 -test.v)。但是当直接调用生成的二进制测试时(go test -c 生成)，这个前缀是强制的。\ngo test 命令在调用二进制测试之前，适当地重写或移除在可选的包列表之前或之后识别的标识。\n比如，命令 go test -v -myflag testdata -cpuprofile=prof.out -x 将会编译二进制测试然后运行 pkg.test -test.v -myflag testdata -test.cpuprofile=prof.out。(-x 标识被移除，因为它只适用于go 命令的执行，而不是go test)\n生成概述(除了用于覆盖)的测试标识也会将二进制测试留在 pkg.test 以便用于分析概述。\n当 go test 运行一个二进制测试时，它从对应包源码目录内部运行。视测试而定，可能需要在直接调用一个生成的二进制测试时也这样做。\n命令行的包列表，如果有的话，必须出现在所有 go test 命令不知道的标识之前。继续上面的例子，包列表需要出现在 -myflag 之前，但是可以出现在 -v 两侧。\n当 go test 在列表模式运行时，go test 缓存成功的包测试结果以避免不必要的重复运行测试。要禁用测试缓存，使用除了可缓存的标识以外的任意的测试标识或参数。惯用的显式禁用测试缓存的方法是使用 -count=1。\n要保持二进制测试的一个参数不被翻译成一个已知的标识或者包名，使用 -args (查看 got help test) 换地命令行的剩余部分给二进制测试，该部分不会被解释或修改。\n例如，命令 go test -v -args -x -v 会编译二进制测试然后运行 pkg.test -test.v -x -v。类似的，go test -args math 会编译二进制测试然后运行 pkg.test math。\n在第一个例子中，-x 和第二个 -v 被传递给二进制测试且未被修改，且对 go 命令本身没有影响。在第二个例子中，参数 math 被传递给二进制测试，而不是解释成包列表。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"c6f26e15ac3b6de09fdcfed406bdfe8c","permalink":"https://xueqing.github.io/translation/go-doc/command/test_flag/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/test_flag/","section":"translation","summary":"go test 命令使用只适用于 go test 的标识以及适用于生成二进制测试的标识。 一些标识控制概要并且写适用于 go tool pprof 的执行概要；运行 go tool pprof -h 查看更多信息。ppr","tags":["go-command"],"title":"测试标识","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  需要了解的知识 在 C++ 中调用 C 语言函数 在 C 中调用 C++ 语言函数  在 C 中调用 C++ 非成员函数 在 C 中调用 C++ 成员函数 在 C 中调用 C++ 重载函数 C++ 名称重整 C++ 链接器处理 C 符号 测试  在 C++ 中包含一个标准的 C 头文件 在 C++ 中包含一个非系统的 C 头文件 修改自己的 C 头文件以便 C++ 容易使用 include 语句包含 在 C++ 中调用非系统的 C 函数 f(int,char,float) 创建一个可被 C 调用的 C++ 函数 f(int,char,float) 链接器在 C/C++ 调用 C++/C 函数时报错的原因 传递一个 C++ 类的对象给/从 C 函数 C 函数是否可以直接访问 C++ 类对象的数据 使用 C++ 比 C 更觉得远离机器代码 参考  需要了解的知识  有一些关键点(即使一些编译器尝试不要求，检查编译器厂商的文件)  当编译 main() 时必须使用 C++ 编译器(比如为了静态初始化) C++ 编译器应该管理链接过程(这样才可以得到指定的库) C 和 C++ 编译器可能需要来自同一厂商，且具有兼容版本(这样才有相同的调用惯例)  除此之外，你需要阅读剩余的章节以找到 可被 C/C++ 调用的 C++/C 函数 有一个方式可以解决所有的问题：即使用 C++ 编译器编译所有的代码(即使是 C 风格的代码)  优点：可以解决结合 C 和 C++ 代码的问题，也更容易发现 C 代码的错误 缺点：需要更新 C 风格的代码，原因 但是更细代码的代价可能比结合二者的代价更小，同时可以清除 C 风格的代码   在 C++ 中调用 C 语言函数  在 C++ 中用 extern \u0026quot;C\u0026quot; 声明 C 函数，然后在 C/C++ 中调用\nextern \u0026quot;C\u0026quot; void f(int);//方式1 extern \u0026quot;C\u0026quot; {//方式2 int g(double); double h(); }; void cppode(int i, double d) { f(i); int ii = g(d); double dd = h(); //... };  //c code void f(int i) { //... } int g(double d) { //... } double h() { //... }   在 C 中调用 C++ 语言函数 在 C 中调用 C++ 非成员函数  在 C++ 中用 extern \u0026quot;C\u0026quot; 声明 C++ 函数，然后在 C/C++ 中调用\nextern \u0026quot;C\u0026quot; void f(int); void f(int i) { //... }  void f(int); void ccode(int i) { f(i); //... }   在 C 中调用 C++ 成员函数  如果需要在 C 中调用成员函数(包括虚函数)，需要提供一个简单的封装\nclass C { //... virtual double f(int); }; //封装函数 extern \u0026quot;C\u0026quot; double call_C_f(C* p, int i) { return p-\u0026gt;f(i); }  struct C { //... }; double call_C_f(struct C*, int); void ccode(struct C* p, int i) { double d = call_C_f(p, i); //... }   在 C 中调用 C++ 重载函数  如果需要在 C 中调用重载函数，必须为 C 语言提供不同名称的封装函数\nvoid f(int); void f(double) extern \u0026quot;C\u0026quot; void f_i(int); extern \u0026quot;C\u0026quot; void f_d(double);  void f_i(int); void f_d(double); void ccode(int i, double d) { f_i(i); f_d(d); //... }  这种方式适用于在 C 中调用 C++ 库，即使不能修改 C++ 的头文件\n  C++ 名称重整  C++ 支持函数重载。比如可以有多个函数名称相同，但参数不同。当生成目标代码时，C++ 编译器通过添加参数信息修改名称来区分不同的函数。这个添加额外信息到函数名的技术叫做名称重整(name mangling) C++ 标准没有对名称重整指定任何详细的技术，因此不同编译器可能添加不同信息到函数名\nint f(void) {return 1;} int f(int) {return 0;} void g(void) (int i=f(), j=f(0);)  上述代码可能被 C++ 编译器改成\nint __f_v(void) {return 1;} int __f_i(int) {return 0;} void __g_v(void) (int i=__f_v(), j=__f_i(0);)   C++ 链接器处理 C 符号  C 不支持函数重载，名称不会被重整。当把代码放到 extern \u0026quot;C\u0026quot; 块时，C++ 编译器确保函数名不会被重整，即编译器生成一个二进制文件，且没有修改函数名 extern \u0026quot;C\u0026quot; 在 C++ 调用 C 时：告诉 g++ 预期得到 gcc 生成的未重整的符号 extern \u0026quot;C\u0026quot; 在 C 调用 C++ 时：告诉 g++ 生成未重整的符号给 gcc 使用  测试  反编译一个 g++ 生成的二进制代码\nvoid f() {} void g(); extern \u0026quot;C\u0026quot; { void ef() {} void eg(); } void h() { g(); eg();}  使用 g++ 编译 g++ -c main.cpp\n 反编译符号表 readelf -s main.o\nSymbol table '.symtab' contains 13 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS cppcode.cpp 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 5: 0000000000000000 0 SECTION LOCAL DEFAULT 6 6: 0000000000000000 0 SECTION LOCAL DEFAULT 7 7: 0000000000000000 0 SECTION LOCAL DEFAULT 5 8: 0000000000000000 7 FUNC GLOBAL DEFAULT 1 _Z1fv 9: 0000000000000007 7 FUNC GLOBAL DEFAULT 1 ef 10: 000000000000000e 17 FUNC GLOBAL DEFAULT 1 _Z1hv 11: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND _Z1gv 12: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND eg  可以看到：ef 和 eg 在符号表存储的名字和代码中的名字相同；其他的名称被重整过\n 解开(unmangle)这些名字\nkiki@ubuntu:/tmp/test$ c++filt _Z1fv f() kiki@ubuntu:/tmp/test$ c++filt _Z1hv h() kiki@ubuntu:/tmp/test$ c++filt _Z1gv g()   在 C++ 中包含一个标准的 C 头文件  直接使用 #include 包含所需头文件，比如 #include \u0026lt;cstdio\u0026gt;\n#include \u0026lt;cstdio\u0026gt; int main() { printf(\u0026quot;Hello!\\n\u0026quot;);// or std::printf return 0; }  如果使用 C++ 编译器编译 C 代码，又不希望将类似 printf 改成 std::printf，可以在 C 代码中使用旧风格的头文件 stdio.h 替换新风格的头文件 cstdio\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026quot;Hello!\\n\u0026quot;); return 0; }   在 C++ 中包含一个非系统的 C 头文件  如果在 C++ 中包含一个非系统提供的 C 头文件，需要使用 extern \u0026quot;C\u0026quot; {/**/} 结构包裹 #include 语句，这个告诉 C++ 编译器此头文件声明的函数是 C 函数\nextern \u0026quot;C\u0026quot; { //get declaration for void sum(int, int) #include \u0026quot;my-c-code.h\u0026quot; } int main() { sum(1, 2); return 0; }   修改自己的 C 头文件以便 C++ 容易使用 include 语句包含  如果在 C++ 中包含一个非系统提供的 C 头文件，且 C 头文件可以修改，强烈建议在头文件添加 extern \u0026quot;C\u0026quot; {/**/} 语句使得 C++ 开发者更加容易使用 #include 包含此头文件到 C++ 代码 因为 C 编译器不理解 extern \u0026quot;C\u0026quot; {/**/} 结构，必须使用 #ifdef 包裹 extern \u0026quot;C\u0026quot; { 和 }，以便 C 编译器看不到这个结构\n//my-c-code.h //有且只有 C++ 编译器会定义 __cplusplus 符号 #ifdef __cplusplus extern \u0026quot;C\u0026quot; { #endif //c code #ifdef __cplusplus } #endif }  #include \u0026quot;my-c-code.h\u0026quot; int main() { sum(1, 2); return 0; }   在 C++ 中调用非系统的 C 函数 f(int,char,float)  如果需要调用一个 C 函数，但是不需要或者不想包含声明此函数的 C 头文件，可以在 C++ 代码中使用 extern \u0026quot;C\u0026quot; 语法声明这一个 C 函数。一般需要使用完整的函数原型\nextern \u0026quot;C\u0026quot; void f(int,char,float); int main() { int i=1; char c='c'; float ff=2; f(i, c, ff); return 0; }  多个 C 函数可以使用 extern \u0026quot;C\u0026quot; {/**/}\n  创建一个可被 C 调用的 C++ 函数 f(int,char,float)  C++ 编译器必须通过 extern \u0026quot;C\u0026quot; 知道 f(int,char,float) 会被 C 编译器调用\nextern \u0026quot;C\u0026quot; void f(int,char,float); //define f(int,char,float) in some c++ module void f(int i, char c, float ff) [ //... ]  extern \u0026quot;C\u0026quot; 告诉编译器发送给链接器的外部信息应该使用 C 的调用管理和名称重整(name-mangling)(比如前置一个下划线)。因为 C 不支持名称重载，你不能在 C 程序中同时调用多个重载的函数\n  链接器在 C/C++ 调用 C++/C 函数时报错的原因  如果 `extern \u0026ldquo;C\u0026rdquo; 语法不正确，会有一些链接错误而不是编译器错误。因为 C++ 编译器通常会重整(mangle) 函数名称(比如为了支持函数重载)而跟 C 编译器不同  传递一个 C++ 类的对象给/从 C 函数 // fred.h: this header can be read by c/c++ compilers #ifndef FRED_H #define FRED_H #ifdef __cplusplus class Fred { public: Fred(); void wilma(int); private: int a_; }; #else typedef struct Fred Fred; #endif #ifdef __cplusplus extern \u0026quot;C\u0026quot; { #endif #if defined(__STDC__) || defined(__cplusplus) extern void c_function(Fred*);///* ANSI C prototypes */ extern Fred* cplusplus_callback_function(Fred*); #else extern void c_function();///* K\u0026amp;R style */ extern Fred* cplusplus_callback_function(); #endif #ifdef __cplusplus } #endif #endif  // fred.cpp #include \u0026quot;fred.h\u0026quot; #include \u0026lt;stdio.h\u0026gt; Fred::Fred() : a_(0) { } void Fred::wilma(int a) { a_ = a; printf(\u0026quot;a=%d\\n\u0026quot;, a); } Fred* cplusplus_callback_function(Fred* fred) { fred-\u0026gt;wilma(123); return fred; }  // ccode.c #include \u0026quot;fred.h\u0026quot; void c_function(Fred* fred) { cplusplus_callback_function(fred); }  // cppcode.cpp #include \u0026quot;fred.h\u0026quot; int main() { Fred fred; c_function(\u0026amp;fred); return 0; }   编译命令 gcc fred.h fred.cpp ccode.c cppcode.cpp 或 gcc fred.h fred.cpp ccode.c cppcode.cpp，输出 a=123 和 C++ 代码不同，C 代码不能识别统一对象的两个指针，除非这两个指针完全是同一类型。比如，C++中容易检查指向同一对象的衍生类指针 dp 和基类指针 bp\n 判断 if(dp == bp)，C++ 编译器会自动转化两个指针到同一类型，这种情况下到基类指针，然后进行比较。这取决于 C++ 编译器的具体实现，有时候这种转化会改动一个指针值的比特位 技术层面上，大部分 C++ 编译器使用一个二进制对象格式以便多继承和/或虚继承的转换。但是 C++ 语言不会暴露对象格式，因此从原则上说，一个转化也会发生在非虚单继承 关键点是 C 编译器不知道如何做指针转换，所以从衍生类到基类指针的转换必须发生在 C++ 编译器编译的代码，而不是 C 编译器编译的代码 注意：当转换衍生类和基类指针到 void* 时必须要小心，因为这个不支持 C/C++ 编译器做适合的指针调整\nvoid f(Base* bp, Derived *dp) { if(bp ==dp) //valid to compare a Base* to Derived* { //... } void* xp = bp; void* yp = dp; if(x == y) //bad form! do not use this! { //... } }  如上所述，上述指针转换会发生在多继承和/或虚继承\n 使用 void* 指针的安全方式\nvoid f(Base* bp, Derived *dp) { void* xp = bp; // If conversion is needed, it will happen in the static_cast\u0026lt;\u0026gt; void* yp = static_cast\u0026lt;Base*\u0026gt;(dp); if(x == y)//valid to compare a Base* to Derived* { //.... } }    C 函数是否可以直接访问 C++ 类对象的数据  如果一个 C++ 类满足下面的条件，C 函数可以安全访问 C++ 对象的数据  没有虚函数(包括继承的虚函数) 所有数据的访问权限相同(private/protected/public) 不含带有虚函数的完全包含的子对象  如果 C++ 类由任何基类(或者其完全包含的子对象有基类)，对这些数据的访问都是不可移植的。因为语言不会暴露带有继承的类格式。但实际上，所以的 C++ 编译器的处理方式相同：基类对象在前面(多重继承时按照从左至右的顺序)，然后是成员对象 此外，如果该类(或任何基类)包含虚函数，几乎所有 C++ 编译器会在对象内放置一个 void*，或者是在第一个虚函数的位置，或者是在对象最开始的位置。这一点也不是语言要求的，但是每个语言都这样处理 如果类包含需基类，情况更加复杂且更难移植。一个通用的实现技术是在对象最后包含一个虚基类的对象(不管虚基类在继承中的层次结构)。对象的其他部分还是正常的顺序。每个衍生的类实际上有一个指向虚基类的指针？？？  使用 C++ 比 C 更觉得远离机器代码  作为面向对象(OO)的编程语言，C++ 支持模型化问题域，这支持在问题域的语言进行编程而不是使用解决方案域的语言编程 C 的一个很大优势是没有隐藏机制：看到的就是得到的。可以阅读一个 C 程序并看到每一个时钟周期。但 C++ 不支持。虽然 C++ 为编程者隐藏了一些机制，它也提供了一个抽象层和表达上的经济，以便降低维护成本且不会破坏运行时性能  参考  mixing c and cpp What is the effect of extern “C” in C++  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0b23284ef78ab3e312115359564a7640","permalink":"https://xueqing.github.io/blog/cplusplus/mix_c_and_cpp/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/blog/cplusplus/mix_c_and_cpp/","section":"blog","summary":"需要了解的知识 在 C++ 中调用 C 语言函数 在 C 中调用 C++ 语言函数 在 C 中调用 C++ 非成员函数 在 C 中调用 C++ 成员函数 在 C 中调用 C++ 重载函数 C++ 名称重整 C++ 链接器处理 C","tags":["c++"],"title":"结合 C 和 C++ 代码","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍 表驱动测试的例子 参考  参考 Go 维基官网——表驱动测试学习。\n原网页由 Martin Tournoij 在 2018/4/11 编辑。第 3 次修订。\n介绍 编写好的测试不是烦琐的，在很多情况下大量领域可以使用表驱动测试覆盖：每个表条目是一个包含输入和预期结果的测试用例，而且有时候包含一些额外的信息，比如测试名称，使得测试输出易于阅读。如果你曾经发现自己在编写测试时使用拷贝和粘贴，考虑是否重构为表驱动测试，或者把拷贝的代码放在一个辅助函数可能是一个更好的选择。\n给定一个测试用例表，真正的测试简单地迭代遍历所有表条目，且未每个条目执行必要的测试。测试代码只编写一次且被分摊到所有的表条目，因此精心编写一个带有好的错误消息的测试是有意义的。\n表驱动测试的例子 这里是一个来自 fmt 包测试代码的好例子：\nvar flagtests = []struct { in string out string }{ {\u0026quot;%a\u0026quot;, \u0026quot;[%a]\u0026quot;}, {\u0026quot;%-a\u0026quot;, \u0026quot;[%-a]\u0026quot;}, {\u0026quot;%+a\u0026quot;, \u0026quot;[%+a]\u0026quot;}, {\u0026quot;%#a\u0026quot;, \u0026quot;[%#a]\u0026quot;}, {\u0026quot;% a\u0026quot;, \u0026quot;[% a]\u0026quot;}, {\u0026quot;%0a\u0026quot;, \u0026quot;[%0a]\u0026quot;}, {\u0026quot;%1.2a\u0026quot;, \u0026quot;[%1.2a]\u0026quot;}, {\u0026quot;%-1.2a\u0026quot;, \u0026quot;[%-1.2a]\u0026quot;}, {\u0026quot;%+1.2a\u0026quot;, \u0026quot;[%+1.2a]\u0026quot;}, {\u0026quot;%-+1.2a\u0026quot;, \u0026quot;[%+-1.2a]\u0026quot;}, {\u0026quot;%-+1.2abc\u0026quot;, \u0026quot;[%+-1.2a]bc\u0026quot;}, {\u0026quot;%-1.2abc\u0026quot;, \u0026quot;[%-1.2a]bc\u0026quot;}, } func TestFlagParser(t *testing.T) { var flagprinter flagPrinter for _, tt := range flagtests { t.Run(tt.in, func(t *testing.T) { s := Sprintf(tt.in, \u0026amp;flagprinter) if s != tt.out { t.Errorf(\u0026quot;got %q, want %q\u0026quot;, s, tt.out) } }) } }  注意使用 t.Errorf 提供的详细的错误消息：提供了函数结果和预期结果；输入是子测试的名字。当测试失败时，哪个错误失败以及为什么失败是显然的，甚至不用阅读测试代码。\nt.Errorf 调用不是一个断言。即使打印一个错误日志，测试仍会继续。比如，当使用整数输入测试一些代码时，知道函数对所有输入失败，还是只对奇数失败，或者是对 2 的幂失败是有意义的。\n参考  如何编写 Go 代码——测试 常见问题解答——断言 常见问题解答——测试框架 testing 包  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"a1f96264fce369712603df16886fb318","permalink":"https://xueqing.github.io/translation/go-doc/wiki/table_driven_tests/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/table_driven_tests/","section":"translation","summary":"介绍 表驱动测试的例子 参考 参考 Go 维基官网——表驱动测试学习。 原网页由 Martin Tournoij 在 2018/4/11 编辑。第 3 次修订。 介绍 编写好的测试不是烦琐的，在很多情况下大量领域","tags":["go-doc-wiki"],"title":"表驱动测试","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  Unix 系统  Go 1.13 Bash Zsh fish  Windows  Go 1.13 (命令行) Windows 10 (图形用户界面) Windows 10 (命令行)   参考设置 GOPATH 维基学习。\n原网页由 Bryan C. Mills 在 2019/9/27 编辑。第 55 次修订。\nGOPATH 环境变量指定你的工作区的位置。如果没有设置 GOPATH，则认为 Unix 系统上是 $HOME/go 且 Windows 上是 %USERPROFILE%\\go。如果你想要使用自定义位置作为你的工作区，你可以设置 GOPATH 环境变量。此页解释如何在不同的平台上设置这个变量。\nUnix 系统 GOPATH 可以是你系统上的任一目录。在 Unix 系统上，我们将设置其为 $HOME/go (从 Go 1.8 其的默认值)。注意 GOPATH 一定不能和 Go 安装路径相同。另外一个常见的设置是设置 GOPATH=$HOME\nGo 1.13 go env -w GOPATH=$HOME/go\nBash 编辑 ~/.bash_profile，添加下面的行：\nexport GOPATH=$HOME/go  保存并退出编辑器。然后使 ~/.bash_profile 修改生效：\nsource ~/.bash_profile  Zsh 编辑 ~/.zshrc，添加下面的行：\nexport GOPATH=$HOME/go  保存并退出编辑器。然后使 ~/.zshrc 修改生效：\nsource ~/.zshrc  fish set -x -U GOPATH $HOME/go  -x 用于指定这个变量应被导出，且 -U 使其成为一个全局变量，对所有会话可用且是持久的。\nWindows 你的工作区可位于任何你喜欢的地方，但是我们在这个例子中使用 C:\\go-work。\n注意：GOPATH 一定不能和 Go 安装路径相同。\n 在 C:\\go-work 新建文件夹。 右击“开始”，并点击“控制面板”。选择“系统和安全”，然后点击“系统”。 从左边的菜单栏，选中“高级系统设置”。 点击底部的“环境变量”按钮。 从“用户变量”区域点击“新建”。 在“变量名”输入 GOPATH。 在“变量值”输入 C:\\go-work。 点击“确定”。  Go 1.13 (命令行)  打开一个命令提示符(Win+r 然后输入 cmd) 或者 powershell 窗口(Win+i)。 输入 go env -w GOPATH=c:\\go-work。  Windows 10 (图形用户界面) 有一个通过搜索编辑 环境变量 的快速方式：\n 左击“搜索”并输入 env 或 environment。 选择编辑账户的环境变量。 和上述步骤相同。  Windows 10 (命令行)  打开一个命令提示符(Win+r 然后输入 cmd) 或者 powershell 窗口(Win+i)。 输入 setx GOPATH %USERPROFILE%\\go。(这将会设置 GOPATH 为你的 [home folder]\\go，比如 C:\\Users\\yourusername\\go。) 关闭命令提示符或 powershell 窗口。(环境变量只对新的命令提示符或 powershell 窗口生效，当前窗口不生效。)  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"542d075e01a9ee8d5c182760bfa3138a","permalink":"https://xueqing.github.io/translation/go-doc/wiki/set_gopath/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/set_gopath/","section":"translation","summary":"Unix 系统 Go 1.13 Bash Zsh fish Windows Go 1.13 (命令行) Windows 10 (图形用户界面) Windows 10 (命令行) 参考设置 GOPATH 维基学习。 原网页由 Bryan C. Mills 在 2019/9/27 编辑。第 55 次修订。 GOPATH 环境变量指定你的","tags":["go-doc-wiki"],"title":"设置 GOPATH","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"一些导入路径也描述了如何使用版本控制系统获取包的源码。\n一些常见的代码托管网站有一些特殊的语法：\nBitbucket (Git, Mercurial) import \u0026quot;bitbucket.org/user/project\u0026quot; import \u0026quot;bitbucket.org/user/project/sub/directory\u0026quot; GitHub (Git) import \u0026quot;github.com/user/project\u0026quot; import \u0026quot;github.com/user/project/sub/directory\u0026quot; Launchpad (Bazaar) import \u0026quot;launchpad.net/project\u0026quot; import \u0026quot;launchpad.net/project/series\u0026quot; import \u0026quot;launchpad.net/project/series/sub/directory\u0026quot; import \u0026quot;launchpad.net/~user/project/branch\u0026quot; import \u0026quot;launchpad.net/~user/project/branch/sub/directory\u0026quot; IBM DevOps Services (Git) import \u0026quot;hub.jazz.net/git/user/project\u0026quot; import \u0026quot;hub.jazz.net/git/user/project/sub/directory\u0026quot;  对于托管在其他服务商的代码，导入路径或者具备版本控制类型，或者 go 工具可以通过 https/http 动态拉取导入路径，然后从 HTML 的 \u0026lt;meta\u0026gt; 标签代码位置。\n为了声明代码位置，具有形式 repository.vcs/path 的导入路径指定了给定的仓库(使用或不使用 .vcs 后缀，使用命名的版本控制系统)和该仓库内的路径。支持的版本控制系统是：\nBazaar .bzr Fossil .fossil Git .git Mercurial .hg Subversion .svn  比如，import \u0026quot;example.org/user/foo.hg\u0026quot; 表示根目录在 Mercurial 仓库的 example.org/user/foo 或 foo.hg，且 import \u0026quot;example.org/repo.git/foo/bar\u0026quot; 表示 Git 仓库的 foo/bar 目录在 example.org/repo 或 repo.git。\n当一个版本控制系统支持多个协议时，下载时轮流尝试每个协议。比如，一个 Git 下载尝试 https://，然后是 git+ssh://。\n默认的，下载受限于已知的安全协议(比如，https 和 ssh)。要覆盖 Git 下载的这个设置，可以设置 GIT_ALLOW_PROTOCOL 环境变量(查看 go help environment 获取更多信息)。\n如果导入路径不是已知的代码托管网站，且缺少版本控制限定符，go 工具尝试通过 https/http 查找 HTML \u0026lt;head\u0026gt; 的 \u0026lt;meta\u0026gt; 标签来拉取导入。\nmeta 标签有这样的形式 \u0026lt;meta name=\u0026quot;go-import\u0026quot; content=\u0026quot;import-prefix vcs repo-root\u0026quot;\u0026gt;。\nimport-prefix 是对应 repo-root 的导入路径。它必须是一个前缀，或者是借助 go get 拉取包的一个精确匹配。如果不是一个精确匹配，生成另外一个 http 请求来验证 meta 标签。\nmeta 标签应该尽早出现在文件中。特别地，它应该出现在任何原始的 JavaScript 或 CSS 之前，避免使 go 命令受限的解释器不能理解。\nvcs 是 bzr/fossil/git/hg/svn 中的一个。\nrepo-root 是版本控制系统的根，包含了一个体系，但是不包含 .vcs 限定符。\n比如，import \u0026quot;example.org/pkg/foo\u0026quot; 会导致下面的请求\nhttps://example.org/pkg/foo?go-get=1 (preferred) http://example.org/pkg/foo?go-get=1 (fallback, only with -insecure)  如果页面包含 meta 标签 \u0026lt;meta name=\u0026quot;go-import\u0026quot; content=\u0026quot;example.org git https://code.org/r/p/exproj\u0026quot;\u0026gt;，那么 go 工具会验证 https://example.org/pkg/foo?go-get=1 包含相同的 meta 标签，然后使用 git clone https://code.org/r/p/exproj 克隆源码到 GOPATH/src/example.org。\n当使用 GOPATH 时，下载的包被写到 GOPATH 环境变量列举的第一个目录。(查看 go help gopath-get 和 go help gopath。)\n当使用模块时，下载的包存储在模块缓存。(查看 go help module-get 和 go help goproxy。)\n当使用模块时，go-import meta 标签的额外的变量被识别且更倾向于通过这些列举的版本控制系统。比如，在 \u0026lt;meta name=\u0026quot;go-import\u0026quot; content=\u0026quot;example.org mod https://code.org/moduleproxy\u0026quot;\u0026gt; 中，该变量使用 “mod” 作为 vcs 内容的值。\n这个标签意味着使用以 example.org 开始的路径从 https://code.org/moduleproxy 可用的模块代理拉取模块。查看 go help goproxy 获取更多关于代理的信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7de00ef92eded468c631a45f7df81797","permalink":"https://xueqing.github.io/translation/go-doc/command/remote_import_path/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/remote_import_path/","section":"translation","summary":"一些导入路径也描述了如何使用版本控制系统获取包的源码。 一些常见的代码托管网站有一些特殊的语法： Bitbucket (Git, Mercurial) import \u0026quot;bitbucket.org/user/project\u0026quot; import \u0026quot;bitbucket.org/user/project/sub/directory\u0026quot; GitHub (Git) import \u0026quot;github.com/user/project\u0026quot; import \u0026quot;github.com/user/project/sub/directory\u0026quot; Launchpad (Bazaar) import \u0026quot;launchpad.net/project\u0026quot; import \u0026quot;launchpad.net/project/series\u0026quot; import \u0026quot;launchpad.net/project/series/sub/directory\u0026quot; import \u0026quot;launchpad.net/~user/project/branch\u0026quot;","tags":["go-command"],"title":"远程导入路径","type":"translation"}]