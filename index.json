[{"authors":["admin"],"categories":null,"content":"hi，欢迎来到我的主页。\n一枚毕业于计算机专业的程序媛。喜欢阅读、电影、音乐和运动。\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"zh","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://xueqing.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"hi，欢迎来到我的主页。 一枚毕业于计算机专业的程序媛。喜欢阅读、电影、音乐和运动。","tags":null,"title":"kiki","type":"authors"},{"authors":["kiki"],"categories":["translation"],"content":" 参考 Go 命令官网 学习。\n用法 Go 是一个用于管理 Go 源码的工具。\n用法：go \u0026lt;command\u0026gt; [arguments]\n命令有:\n   命令 描述     bug 开启一个缺陷报告   build 编译包及其依赖   clean 删除目标文件和缓存文件   doc 查看包或者符号的文档   env 打印 Go 环境变量信息   fix 更新包以使用新的 API   fmt gofmt(reformat) 包的源文件   generate 通过处理源生成 Go 文件   get 为当前模块添加依赖并且安装依赖   install 编译和安装包及其依赖   list 列举包或模块   mod 模块维护   run 编译和运行 Go 程序   test 测试包   tool 运行指定的 go 工具   version 打印 Go 版本   vet 打印包中可能的错误    使用 go help \u0026lt;command\u0026gt; 查看命令的更多信息。\n其他的帮助话题：\n   帮助 描述     buildmode 编译模式   c 在 Go 和 C 直接调用   cache 编译和测试缓存   environment 环境变量   filetype 文件类型   go.mod go.mod 文件   gopath GOPATH 环境变量   gopath-get 传统 GOPATH 的 go get   goproxy 模块 proxy 协议   importpath 模块路径语法   modules 模块，模块版本等   module-get 明白模块的 go get   module-auth 使用 go.sum 的模块认证   module-private 对于非公共模块的模块配置   packages 包列表和模式   testflag 测试标识   testfunc 测试函数    使用 go help \u0026lt;topic\u0026gt; 查看话题的更多信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"feac5dbbc6dcdb9768f0c6bf3e0d3ed8","permalink":"https://xueqing.github.io/translation/go-doc/command/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/readme/","section":"translation","summary":"参考 Go 命令官网 学习。 用法 Go 是一个用于管理 Go 源码的工具。 用法：go \u0026lt;command\u0026gt; [arguments] 命令有: 命令 描述 bug 开启一个缺陷报告 build 编译包及其依赖 clean 删除目标文件和缓存文","tags":["go-command"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  安装 Go 学习 Go 参考 文章 非英文文章  参考 Golang 官网文档 学习。\n安装 Go 学习 Go 参考 文章 代码漫步：Go 程序的指导之旅。 Go 的一级函数 生成任意文本：一个 Markov 链算法 通过共享内存 编写 Web 应用——构建一个简单的 web 应用。  工具 关于 Go 命令——为什么我们编写它？它是什么？它不是什么？如何使用它？ 使用 GDB 调试 Go 代码 数据竞争检测器——关于数据竞争检测器的手册 快速入门 Go 的汇编器——介绍了 Go 使用的汇编器  更多 查看维基的文章页面获取更多 Go 的文章   非英文文章 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9eb740e1016fe4df123b01d9fe361c80","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/readme/","section":"translation","summary":"安装 Go 学习 Go 参考 文章 非英文文章 参考 Golang 官网文档 学习。 安装 Go 学习 Go 参考 文章 代码漫步：Go 程序的指导之旅。 Go 的一级函数 生成任意文本：一个 Markov 链算法 通","tags":["golang-doc"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  标准库 其他包  子仓库 社区   参考 Golang 官网文档 学习。\n标准库    名字 概述     testing 支持对 Go 包的自动测试   ——iotest 实现了主要用于 testing 的 Reader 和 Writer   ——quick 实现了帮助黑盒测试的工具函数    其他包 子仓库 社区 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fb9ede3d85eb0a102bc87f6142d9de24","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/readme/","section":"translation","summary":"标准库 其他包 子仓库 社区 参考 Golang 官网文档 学习。 标准库 名字 概述 testing 支持对 Go 包的自动测试 ——iotest 实现了主要用于 testing 的 Reader 和 Writer ——quick 实现了帮","tags":["golang-pkg"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"关于 Go 语言之旅 的练习题\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fd33b8efbf7c5f1502956c6d192e2fe3","permalink":"https://xueqing.github.io/translation/go-doc/gotour/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/readme/","section":"translation","summary":"关于 Go 语言之旅 的练习题","tags":["go-tour"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  Go 之家 贡献 内容列表  Go 入门 用 Go 工作 更多关于 Go 的学习 Go 社区 使用 go 工具链 其他的 Go 编程维基 网上用 Go 的服务 生产环境的 Go 程序疑难解答 为 Go 项目做贡献 平台特定的信息 发布特定的信息 问题   参考 Go 维基官网 学习。\n原网页由 HunterQ 在 2019/4/12 编辑。第 99 次修订。\nGo 之家 欢迎来到 Go 维基，集中了关于 Go 编程语言的信息。Awesome Go 是另外一个给 Go 编程人员的丰富的资源，由 Go 社区管理。\n贡献  这个维基可被拥有 Github 账号的 Go 社区的任意成员编辑。 如果你想要新增一个页面，请首先在 Go issue 跟踪页面 打开一个 issue，以前缀 “wiki” 开头来提议新增的内容。清楚地说明为什么这个内容不适用任何现有的页面。 因为维基页面的重命名会破坏外部链接，请在重命名或删除任何维基页面之前打开一个 issue。  内容列表 Go 入门 Go 语言之旅是入门最好的地方。 实效 Go 编程将会帮助学习如何编写惯用的 Go 代码。 Go 标准库文档使你熟悉标准库。 使用 Go Playground 用于在你的浏览器测试 Go 程序。 仍然不确信？查看这份 Go 使用者清单以及他们的一些成功案例。我们也收集了一份长长的原因清单，关于你为什么应该尝试 Go。 了解更多已经从其他语言转到 Go 的公司。 这里是一些帮助你入门的链接。  用 Go 工作 准备好自己写一些 Go 代码了吗？这里是一些帮助你入门的链接。\n安装和设置你的环境 由此开始：官方安装文档 如果你更喜欢源码安装，先阅读此文档 从源码安装——其他关于源码安装的建议 Windows 用户？为 Windows 安装和配置 Go、Git和 Atom Mac 用户？如何开始-Go——安装 Go 和编译你的以第一个 web 服务的分步指南 安装遇到问题？安装疑难解答 确保你已经正确设置了 $GOPATH 环境变量 如果需要其他关于使用 $GOPATH 的建议，浏览这里 多个 GOROOT——更多高级信息关于在安装多个 go 以及 $GOROOT 变量的环境工作  Go 集成开发环境和编辑器——一些关于如何使用你最喜欢的编辑器开发 Go 的信息 为开发 Go 代码的工具——格式化、语言分析、代码检查、代码重构、代码导航和可视化 查找 Go 库和包 由此开始：Go 开源工程 查找 Go 包：go 文档官网 Go 开源包图的可视化  管理你的依赖——一个你可以用来管理第三方包 (vendoring) 的工具纵览 发布开源的 Go 包 准备好发布你的包了？由此开始 Go 检查清单——发布一个项目的完全指南 如何设计你的 Github 仓库 以便其他 Go 编程人员更容易使用 go get 命令 Go 包——一些使得 Go 包更易用的建议   更多关于 Go 的学习 当你对这门语言有一个概览之后，这里有一些资源供你使用学习更多关于 Go：\n学习 Go—— Go 入门到高级的资料集合 Go 新手开发人员的最佳实践——来自 Go 社区成员的见解 服务器编程——构建 web、移动端和 API 服务器 并发 错误处理 测试 移动端——安卓和 iOS  书籍——一份已经出版的(电子书，论文)关于 Go 的的书籍清单 博客——关于 Go 的博客 [播客]——描写 Go 特色的播客和故事  视频、谈话和演示 GopherVids 是一个关于 Go 的视频的搜索目录 GoTalks——来自 Go 会议和聚会的谈话集合 Screencasts  文章——帮助你学习 Go 的文章集合 培训——免费的、商业的、在线的 Go 课堂培训 大学课程——一个使用 Go 的 CS 编程和课程列表 非英语人士的资源  Go 社区 有一些地方，你可以找到在线的 Gophers。要了解成为 Go 社区一名成员意味着什么，阅读 Damian Gryski 在 2015 年 GolankUK 会议上的主题演讲或者观看 Andrew Gerrand 在 2015 年 GopherCon 上的闭幕演讲。\n Gophers 在线聚会场所：  Go 论坛——Go 社区的万能讨论论坛 Gophers Slack Channel——针对实时聊天(要求成员) Golang 新闻——关于 Go 编程的链接 r/golang——sub-reddit 在 Twitter 上，follow @golang 账户，并且   使用 go 工具链 其他的 Go 编程维基 网上用 Go 的服务 生产环境的 Go 程序疑难解答 为 Go 项目做贡献 平台特定的信息 发布特定的信息 问题 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"5653abcd37e2517d287a5b345e1ea437","permalink":"https://xueqing.github.io/translation/go-doc/wiki/readme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/readme/","section":"translation","summary":"Go 之家 贡献 内容列表 Go 入门 用 Go 工作 更多关于 Go 的学习 Go 社区 使用 go 工具链 其他的 Go 编程维基 网上用 Go 的服务 生产环境的 Go 程序疑难解答 为 Go 项目做贡献 平台特","tags":["go-doc-wiki"],"title":"前言","type":"translation"},{"authors":["kiki"],"categories":["blog"],"content":"  编辑器 基本技巧  标题 代码 粗斜体 换行 链接 列表 普通无序列表 普通有序列表 列表嵌套 表格 引用 普通引用 引用嵌套引用 引用嵌套列表 引用嵌套代码块 图片 分隔符  高级技巧  行内 HTML 元素 符号转义 公式 脚注  文档规范  编辑器  Mac  Mou  Windows  MarkdownPad MarkPad  Linux  ReText Vim+Vimwiki  在线编辑器  markable dillinger  浏览器插件  MaDe(chrome) 马克飞象  高级应用  Sublime Text 2 + MarkdownEditing / 教程   基本技巧 标题 Markdown 支持两种标题的语法，类 Setext 和类 atx 形式\n类 atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶(可以在行尾加上 #)\n# 一级标题 # ## 二级标题 ## ### 三级标题 ### #### 四级标题 ####  类 Setext 形式是用底线的形式，利用 = (最高阶标题)和 - (第二阶标题)(任何数量的 = 和 - 都可以有效果)\n一级标题 ============ 二级标题 ------------  代码  行内代码：用反引号标记行内代码，如  function_name() 包含反引号`的代码  代码段，通常编辑器根据代码片段适配合适的高亮方法\n 可以用[三个`]包裹一段代码，并指定一种语言\nint test() { return 0; }  也可以使用 4 空格或是 1 个制表符缩进，再贴上代码，实现相同的的效果\n  int test() { return 0; }\n 如果不需要代码高亮，可以用下面的语法禁用\nint test() { return 0; }    粗斜体 Markdown 使用星号和底线作为标记强调字词的符号\n斜体 斜体\n粗体 粗体\n粗斜体 粗斜体\n换行 另起一行，只需要在当前结尾加2个空格\n这样就会另起一行\n空出一行，即可新起一个段落\n行尾加斜线，\n也可实现换行\n链接  行内式链接  文字链接：方括号(链接名称)+圆括号(链接地址) 链接名称 google gmail 自动链接：Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，尖括号+(链接地址) https://translate.google.com/ https://mail.google.com/mail/u/0/  参考式链接：在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记，然后在文件的任意处为标记变量赋值(网址)  隐式链接标记：可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字 这个链接用 Google 作为网址变量 Google 这个链接用 yahoo 作为网址变量 Yahoo! 链接标记的内容定义的形式为： 方括号(前面可以选择性地加上至多三个空格来缩进)，里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址(链接网址也可以用尖括号包起来) 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着   列表 普通无序列表 - 无序列表，文本前使用[减号+空格] + 无序列表，文本前使用[加号+空格] * 无序列表，文本前使用[星号+空格]  普通有序列表  列表前使用[数字+英文句点+空格] 可以自动添加数字 数字不对显示的时候回自动调整 文档开始如果出现‘1986. blabla’要写成‘1986. blabla’  5) 列表前使用[数字+)+空格] 6) 可以自动添加数字 7) 数字不对显示的时候回自动调整 8) 文档开始如果出现‘1986. blabla’要写成‘1986. blabla’\n列表嵌套  列出所有元素：  无序列表元素 A  元素 A 的有序子列表  前面加 4 个空格或 1 个制表符  列表里的多段换行：\n前面必须加 4 个空格或 1 个制表符，\n这样换行，整体的格式不会乱 列表里引用：\n 前面空一行\n仍然需要在 \u0026gt; 前面加 4 个空格或 1 个制表符\n 列表里代码段：\n前面 4 个空格或 1 个制表符，之后按三个`代码语法\n或者直接空 8 个空格或 2 个制表符， 引入代码块   表格 默认：左对齐(col1)\n   col1 col2 col3     col1 col2 col3   col1,col1 col2,col2 col3,col3   col1,col1,col1 col2,col2,col2 col3,col3,col3    引用 普通引用  引用前使用[大于号+空格]\n换行可以不加\n空行和新起一行需要加上\n 引用嵌套引用  最外层引用 \u0026gt; 多一个[大于号+空格]嵌套一层引用 \u0026gt; \u0026gt; 可以嵌套很多层\n 引用嵌套列表   这是引用里嵌套的一个列表 还可以有子列表  子列表需要从[减号、加号、星号]之后延后 4 个空格或 1 个制表符开始    引用嵌套代码块  同样的，在前面加 4 个空格或 1 个制表符形成代码块   或者使用三个`形成代码块  图片  跟链接的方法区别在于前面加了个感叹号。行内式的图片语法 感叹号+方括号(图片名称)+圆括号(图片链接地址/图片相对路径)：\n  分隔符 在新起一行输入三个减号、星号、底线，即可实现分割线。当前后都有段落时，请空出一行。\n段落1\n段落2\n段落3\n高级技巧 行内 HTML 元素 目前只支持段内 HTML 元素效果，包括 kbd/b/i/em/sup/sub/br 等。现不建议使用 HTML 元素\n 键位显示： 使用 \u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Alt\u0026lt;/kbd\u0026gt;+\u0026lt;kbd\u0026gt;Del\u0026lt;/kbd\u0026gt; 重启电脑 代码块：使用 pre/code 标签 粗斜体：\u0026lt;b\u0026gt;粗体\u0026lt;/b\u0026gt;  符号转义 在符号前加反斜杠可以避免被转义。如：\n\\_不想这里的文本变斜体\\_ \\*\\*不想这里的文本被加粗\\*\\*  Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\\ 反斜线\n` 反引号\n* 星号\n_ 底线\n{} 花括号\n[] 方括号\n() 括弧\n# 井字号\n+ 加号\n- 减号\n. 英文句点\n! 惊叹号\n公式 当需要在编辑器中插入数学公式时，可以使用两个美元符包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n$$ x \\href{why-equal.html}{=} y^2 + 1 $$\n脚注 Markdown 官网1\n文档规范  标题用#，右边的#可不加 行内代码  三个反引号 制表符 code 标签  代码段  三个反引号 制表符 pre/code 标签    https://daringfireball.net/projects/markdown/ ^   ","date":1573374150,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1573374150,"objectID":"f746c3c3aeb1af12cde7195114aa8e1a","permalink":"https://xueqing.github.io/blog/markdown_%E8%A7%84%E8%8C%83/","publishdate":"2019-11-10T16:22:30+08:00","relpermalink":"/blog/markdown_%E8%A7%84%E8%8C%83/","section":"blog","summary":"编辑器 基本技巧 标题 代码 粗斜体 换行 链接 列表 普通无序列表 普通有序列表 列表嵌套 表格 引用 普通引用 引用嵌套引用 引用嵌套列表 引用嵌套代码块 图片 分隔符 高级","tags":["markdown"],"title":"Markdown 规范","type":"blog"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Equivalent Binary Trees 1. Implement the Walk function. 2. Test the Walk function. The function tree.New(k) constructs a randomly-structured (but always sorted) binary tree holding the values k, 2k, 3k, ..., 10k. Create a new channel ch and kick off the walker: go Walk(tree.New(1), ch) Then read and print 10 values from the channel. It should be the numbers 1, 2, 3, ..., 10. 3. Implement the Same function using Walk to determine whether t1 and t2 store the same values. 4. Test the Same function. Same(tree.New(1), tree.New(1)) should return true, and Same(tree.New(1), tree.New(2)) should return false. The documentation for Tree can be found here. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;golang.org/x/tour/tree\u0026quot; ) // Walk walks the tree t sending all values // from the tree to the channel ch. func Walk(t *tree.Tree, ch chan int) { if t.Left != nil { Walk(t.Left, ch) } ch \u0026lt;- t.Value if (t.Right) != nil { Walk(t.Right, ch) } } // Same determines whether the trees // t1 and t2 contain the same values. func Same(t1, t2 *tree.Tree) bool { ch1 := make(chan int) ch2 := make(chan int) go Walk(t1, ch1) go Walk(t2, ch2) for i := 1; i \u0026lt;= 10; i++ { v1, v2 := \u0026lt;-ch1, \u0026lt;-ch2 fmt.Println(\u0026quot;Walk two tree: \u0026quot;, v1, v2) if v1 != v2 { return false } } return true } func main() { ch := make(chan int) go Walk(tree.New(1), ch) for i := 1; i \u0026lt;= 10; i++ { v := \u0026lt;-ch fmt.Println(\u0026quot;Walk tree: \u0026quot;, v) if i != v { fmt.Println(\u0026quot;Test Walk failure\u0026quot;) return } } fmt.Println(\u0026quot;Test Walk success\u0026quot;) if Same(tree.New(1), tree.New(1)) \u0026amp;\u0026amp; !Same(tree.New(1), tree.New(2)) { fmt.Println(\u0026quot;Test Same success\u0026quot;) } else { fmt.Println(\u0026quot;Test Same failure\u0026quot;) } }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8f43c5f8e8deabd910d89681c886891d","permalink":"https://xueqing.github.io/translation/go-doc/gotour/equivalent_binary_trees/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/equivalent_binary_trees/","section":"translation","summary":"/* Exercise: Equivalent Binary Trees 1. Implement the Walk function. 2. Test the Walk function. The function tree.New(k) constructs a randomly-structured (but always sorted) binary tree holding the values k, 2k, 3k, ..., 10k. Create a new channel ch and kick off the walker: go Walk(tree.New(1), ch) Then read and print 10 values from the channel. It should be the numbers 1, 2, 3, ..., 10. 3. Implement the Same function using Walk to determine whether t1 and t2 store the same values.","tags":["go-tour"],"title":"Equivalent Binary Trees","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Errors Copy your Sqrt function from the earlier exercise and modify it to return an error value. Sqrt should return a non-nil error value when given a negative number, as it doesn't support complex numbers. Create a new type type ErrNegativeSqrt float64 and make it an error by giving it a func (e ErrNegativeSqrt) Error() string method such that ErrNegativeSqrt(-2).Error() returns \u0026quot;cannot Sqrt negative number: -2\u0026quot;. Note: A call to fmt.Sprint(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Sprint(float64(e)). Why? Change your Sqrt function to return an ErrNegativeSqrt value when given a negative number. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) type errNegativeSqrt float64 func (e errNegativeSqrt) Error() string { // 因为e变量是一个通过实现Error()的接口函数成为了error类型，那么在fmt.Sprint(e)时就会调用e.Error()来输出错误的字符串信息 return fmt.Sprint(\u0026quot;cannot Sqrt negative number: \u0026quot;, float64(e)) } func mySqrt(x float64) (float64, error) { if x \u0026lt; 0 { return -1, errNegativeSqrt(x) } z := x / 2 tmp := 0.0 for math.Abs(z-tmp) \u0026gt;= 0.000000000001 { tmp = z z -= (z*z - x) / (2 * z) } return z, nil } func main() { fmt.Println(mySqrt(2)) fmt.Println(mySqrt(-2)) }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"77be69173bb7bda00f50c1a51e0b8e74","permalink":"https://xueqing.github.io/translation/go-doc/gotour/errors/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/errors/","section":"translation","summary":"/* Exercise: Errors Copy your Sqrt function from the earlier exercise and modify it to return an error value. Sqrt should return a non-nil error value when given a negative number, as it doesn't support complex numbers. Create a new type type ErrNegativeSqrt float64 and make it an error by giving it a func (e ErrNegativeSqrt) Error() string method such that ErrNegativeSqrt(-2).Error() returns \u0026quot;cannot Sqrt negative number: -2\u0026quot;. Note: A","tags":["go-tour"],"title":"Errors","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Fibonacci closure Let's have some fun with functions. Implement a fibonacci function that returns a function (a closure) that returns successive fibonacci numbers (0, 1, 1, 2, 3, 5, ...). */ package main import \u0026quot;fmt\u0026quot; func fibonacci() func() int { before, val := 0, 1 return func() int { ret := before before, val = val, before + val return ret } } func main() { f := fibonacci() for i := 0; i \u0026lt; 10; i++ { fmt.Println(f()) } }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"aa1301ea7b9439d45b4d128b4e586d81","permalink":"https://xueqing.github.io/translation/go-doc/gotour/fibonacci_closure/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/fibonacci_closure/","section":"translation","summary":"/* Exercise: Fibonacci closure Let's have some fun with functions. Implement a fibonacci function that returns a function (a closure) that returns successive fibonacci numbers (0, 1, 1, 2, 3, 5, ...). */ package main import \u0026quot;fmt\u0026quot; func fibonacci() func() int { before, val := 0, 1 return func() int { ret := before before, val = val, before + val return ret } } func main() { f := fibonacci() for i := 0; i \u0026lt; 10; i++ { fmt.","tags":["go-tour"],"title":"Fibonacci closure","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;fmt\u0026quot;\n概述 fmt 包用类似于 C 的 printf 和 scanf 的函数实现了格式化的 I/O。格式 “verbs” 衍生自 C 但是更简单。\n打印 verbs 包括：\n通用的：\n%v 默认格式的值 当打印结构体时，增加标识 (%+v) 会增加域名。 %#v 值的一个 Go 语法显示 %T 值类型的一个 Go 语法显示 %% 一个字面百分比符号；不消费任何值  布尔型：\n%t 单词是 true 还是 false  整型：\n%b base 2 %c the character represented by the corresponding Unicode code point %d base 10 %o base 8 %O base 8 with 0o prefix %q a single-quoted character literal safely escaped with Go syntax. %x base 16, with lower-case letters for a-f %X base 16, with upper-case letters for A-F %U Unicode format: U+1234; same as \u0026quot;U+%04X\u0026quot;  索引 参考\n例子 参考\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"563de0170ea7052e8e644e1de3ccc892","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/fmt/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/fmt/","section":"translation","summary":"参考 Golang 官网文档 学习。 导入语句：import \u0026quot;fmt\u0026quot; 概述 fmt 包用类似于 C 的 printf 和 scanf 的函数实现了格式化的 I/O。格式 “verbs” 衍生自 C 但是更简单。 打印","tags":["golang-pkg"],"title":"fmt 包","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"用法：go bug\n命令打开默认浏览器，并开启一个新的缺陷报告。报告包含有用的系统信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"cf29a495a2a90e9d36a5e931e8badb51","permalink":"https://xueqing.github.io/translation/go-doc/command/bug/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/bug/","section":"translation","summary":"用法：go bug 命令打开默认浏览器，并开启一个新的缺陷报告。报告包含有用的系统信息。","tags":["go-command"],"title":"go bug","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 源码文件 编译多个 Go 源码文件 go build 的参数 依赖包 构建标签  命令  go build [-o output] [-i] [build flags] [packages] go build 命令用于编译我们指定的源码文件或代码包以及它们的依赖包 如果在执行 go build 命令时不后跟任何代码包，那么命令将试图编译当前目录所对应的代码包 编译码包 cnet/ctcp  在 GOPATH/src/cnet/ctcp 执行 go build 在 GOPATH/src/cnet/ 执行 go build ctcp 在任意目录下执行 go build cnet/ctcp  go build 会忽略目录下以 “_” 或 “.” 开头的 go 文件 -o 强制将生成的可执行文件或目标文件写到指定的输出文件或文件夹。如果指定的输出是存在的文件夹，生成的可执行文件会写到文件夹 -i 安装依赖包  源码文件  Go 语言的源码文件有三大类，即：命令源码文件、库源码文件和测试源码文件  命令源码文件：总是作为可执行的程序的入口 库源码文件：一般用于集中放置各种待被使用的程序实体（全局常量、全局变量、接口、结构体、函数等等） 测试源码文件：主要用于对前两种源码文件中的程序实体的功能和性能进行测试。另外也可以用于展现命令源码文件和库源码文件中程序的使用方法  如果是库源码文件，执行 go build 之后，不会产生任何文件。如果需要在 $GOPATH/pkg 下生成相应的文件，那就得执行 go install 如果是命令源码文件(main 包)，执行 go build 之后，它就会调用链接器在当前目录下生成一个可执行文件，可执行程序的名字取自包的导入路径的最后一段。如果需要在 $GOPATH/bin 下生成相应的文件，需要执行 go install，或者使用 go build -o 可执行文件  编译多个 Go 源码文件  go build 默认会编译当前目录下的所有 go 文件  构建所有需要的包及其依赖，然后丢弃除了可执行程序之外的所有编译的代码  可以同时编译多个 Go 源码文件，在 go build 后跟要编译的文件名，用空格分隔  限制：作为参数的多个 Go 源码文件必须在同一个目录中  go build 命令在编译只包含库源码文件的代码包（或者同时编译多个代码包）时，只会做检查性的编译，而不会输出任何结果文件 go build 命令既不能编译包含多个命令源码文件的代码包，也不能同时编译多个命令源码文件。因为，如果把多个命令源码文件作为一个整体看待，那么每个文件中的 main 函数就属于重名函数，在编译时会抛出重复定义错误 如果编译的多个属于 main 包的源码文件中没有 main 函数的声明，那么就会使编译器立即报出“未定义 main 函数声明”的错误并中止编译 总结：同时编译多个 main 包的源码文件时，要保证其中有且仅有一个 main 函数声明，否则编译是无法成功的 如果有多个声明为属于 main 包的源码文件，且其中只有一个文件声明了 main 函数的话，那么是可以使用 go build 命令同时编译它们的。在这种情况下，不包含 main 函数声明的那几个源码文件会被视为库源码文件。如此编译之后的可执行文件的名称来自指定的编译目标中最左边的那个源码文件的主文件名相同  go build 的参数  下面的编译标志被 build/clean/get/install/list/run/test 共享     标志 描述     -a 强行重新构建包，即使它们已经是最新的了，但是对标准包不适用   -n 打印将要执行的命令，但是不执行   -p n 指定执行命令的并行程序数量。默认等于可用的 CPU 逻辑数。在 darwin/arm (iPhone 和 iPad) 平台，默认是1   -race 开启竞态条件检测。仅在 linux/amd64、freebsd/amd64、darwin/amd64和windows/amd64 平台支持   -v 打印被编译的包名   -work 打印临时工作目录名称，且如果存在不会在执行命令后删除。默认结束命令时会删除该目录   -x 打印命令。注意它与 -n 标记的区别     其他参数  -mod 控制对 go.mod 的更新和使用 -mod=readonly 不能隐式自动更新 go.mod。当需要修改 go.mod 时会失败。用于检查 go.mod 不需要任何更新，比如在持续集成和测试系统  这个参数对 go get 不生效，即命令仍然可以更新 go.mod 文件  -mod=vendor: 使用模块的顶层的 vendor 目录来编译以满足依赖(不使用通常的网络源码和本地缓存)   依赖包  go build 命令在执行时，编译程序会先查找目标代码包的所有依赖包，以及这些依赖包的依赖包，直至找到最深层的依赖包为止。在此过程中，如果发现有循环依赖的情况，编译程序就会输出错误信息并立即退出。此过程完成之后，所有的依赖关系也就形成了一棵含有重复元素的依赖树。对于依赖树中的一个节点（代码包）来说，它的直接分支节点（前者的依赖包），是按照代码包导入路径的字典序从左到右排列的。最左边的分支节点会最先被编译。编译程序会依此设定每个代码包的编译优先级 执行 go build 命令的计算机如果拥有多个逻辑 CPU 核心，那么编译代码包的顺序可能会存在一些不确定性。但是，它一定会满足这样的约束条件：依赖代码包 -\u0026gt; 当前代码包 -\u0026gt; 触发代码包 在执行 go build 命令时加入标记 -p 1，那么就可以保证代码包编译顺序严格按照预先设定好的优先级进行  构建标签  构建标签：go build 只会在构建指定规格的目标文件的时候才进行编译，叫做构建标签的特殊注释，提供更细力度的控制。 注释需要加在包的声明之前，这是文档注释。如 // +build linux darwin // +build ignore 指出任何时候都不要编译这个文件  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"b49eb959654be04848757ecbc4cffd9f","permalink":"https://xueqing.github.io/translation/go-doc/command/build/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/build/","section":"translation","summary":"命令 源码文件 编译多个 Go 源码文件 go build 的参数 依赖包 构建标签 命令 go build [-o output] [-i] [build flags] [packages] go build 命令用于编译我们指定的源码文件或代码包以及它们的依赖包 如果在执","tags":["go-command"],"title":"go build","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 go clean 的参数  命令  go clean 命令会删除掉执行其它命令时产生的一些文件和目录，包括  有一些目录和文件是在编译 Go 或 C 源码文件时留在相应目录中的 目录 _obj/：旧的 object 目录，由 Makefiles 遗留 目录 _test/：旧的 test 目录，由 Makefiles 遗留 文件 _testmain.go：旧的 gotest 文件，由 Makefiles 遗留 文件 test.out：旧的 test 记录，由 Makefiles 遗留 文件 build.out：旧的 test 记录，由 Makefiles 遗留 文件 a.out 文件 DIR(.exe)： 由 go build 在当前代码包下生成的与包名同名或者与 Go 源码文件同名的可执行文件(Windows 带有 .exe 后缀) 文件 DIR.test(.exe)： 由 go test -c 在当前代码包下生成(Windows 带有 .test.exe 后缀) 文件 MAINFILE(.exe)： 由 go build MAINFILE.go 产生 文件 *.so：由 SWIG 遗留 执行 go clean 命令时带有标记 -i，则会同时删除安装当前代码包时所产生的结果文件。如果当前代码包中只包含库源码文件，则结果文件指的就是在工作区的 pkg 目录的相应目录下的归档文件。如果当前代码包中只包含一个命令源码文件，则结果文件指的就是在工作区的 bin 目录下的可执行文件。这些目录和文件是在执行 go build 命令时生成在临时目录中的。临时目录的名称以 go-build 为前缀 执行 go clean 命令时带有标记 -r，则还包括当前代码包的所有依赖包的上述目录和文件   go clean 的参数    参数 描述     -i 清除关联的安装的包和可运行文件   -n 打印执行命令期间所用到的其它命令，但是并不真正执行它们   -r 循环的清除在 import 中引入的包   -x 打印执行命令期间所用到的其它命令。注意它与 -n 标记的区别    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fbe7ca90289165e7ec5234eb4293e274","permalink":"https://xueqing.github.io/translation/go-doc/command/clean/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/clean/","section":"translation","summary":"命令 go clean 的参数 命令 go clean 命令会删除掉执行其它命令时产生的一些文件和目录，包括 有一些目录和文件是在编译 Go 或 C 源码文件时留在相应目录中的 目录 _ob","tags":["go-command"],"title":"go clean","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 Go 语言程序实体 go doc 的参数 godoc  命令行模式 Web 服务器模式   命令  go doc 命令可以打印附于 Go 语言程序实体上的文档。可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的 go doc 可以接受一个参数，指定包/包成员/方法：go doc http.Request  go doc 命令根据参数查找代码包或程序实体的顺序：Go 语言根目录（GOROOT 环境变量指定的目录）-\u0026gt; 工作区目录（GOPATH 环境变量包含的目录）。在内部遵循字典序 如果某个工作区目录中的代码包与标准库中的包重名了，那么它是无法被打印出来的。go doc 命令只会打印出第一个匹配的代码包或程序实体的文档  go doc 也可以接受两个参数：go doc net/http Request  这是一种更加精细的指定代码包或程序实体的方式 第一个参数的代码包名称必须是完整的导入路径 在给定两个参数时，go doc 会打印出所有匹配的文档，而不是像给定一个参数时那样只打印出第一个匹配的文档。这对于查找只有大小写不同的多个方法（如 New、new）的文档来说非常有用   Go 语言程序实体  Go 语言的程序实体，是指变量、常量、函数、结构体以及接口 程序实体的标识符即是代表它们的名称。标识符又分非限定标识符和限定标识符  限定标识符一般用于表示某个代码包中的程序实体或者某个结构体类型中的方法或字段 如：标准库代码包 io 中的名为 EOF 的变量用限定标识符表示即 io.EOF 如：如果有一个 sync.WaitGroup 类型的变量 wg 并且想调用它的 Add 方法，那么可以这样写 wg.Add()。其中，wg.Add 就是一个限定标识符，而后面的 () 则代表了调用操作。   go doc 的参数    参数 描述     -c 区分参数中字母的大小写。默认情况下，命令是大小写不敏感的   -cmd 打印出 main 包中的可导出的程序实体（其名称的首字母大写）的文档。默认情况下，这部分文档是不会被打印出来的   -u 打印出不可导出的程序实体（其名称的首字母小写）的文档。默认情况下，这部分文档是不会被打印出来的    godoc  在 Go1.2 版本之前还支持 go doc 命令，但是之后全部移到了 godoc 这个命令下，需要这样安装 go get golang.org/x/tools/cmd/godoc 在 Go1.5 版本中，go doc 是一个内置的标准命令 命令有两种模式可供选择  命令行模式  不加入 -http 标记：以命令行模式运行。在打印纯文本格式的文档到标准输出后，命令执行就结束了。如 godoc fmt Printf，godoc fmt Printf Println 加 -src 标记：不但可以在文档中查看可导出的程序实体的声明，还可以看到源码。如 godoc -src fmt Printf godoc 命令只能把代码包和程序实体的标识符拆成两个参数。也就是说，godoc 命令不支持前文所述的 go doc 命令的单参数用法 在实际的环境中，可能会遇到一个命令源码文件所产生的可执行文件与代码包重名的情况。比如，标准命令 go 和官方代码包 go。们要明确的告诉 godoc 命令要查看可执行文件 go 的文档，需要在名称前加入 cmd/ 前缀 godoc cmd/go 查看 HTML 格式的文档，就需要加入标记 -html，可以在其中找到一些相应源码的链接地址  Web 服务器模式  加上 -http 标记：以 Web 服务器模式运行。以 Web 页面的形式提供 Go 语言文档 godoc -http=:6060 标记 -http 的值 :6060 表示启动的 Web 服务器使用本机的 6060 端口。之后，可通过在浏览器中输入 http://localhost:6060 查看以网页方式展现的 Go 文档 这使得在不方便访问 Go 语言官方站点的情况下也可以查看 Go 语言文档。并且通过本机的 Go 文档 Web 服务，还可以查看所有本机工作区下的代码的文档 godoc -http=:9090 -index 使用 -index 标记开启搜索索引。这个索引会在服务器启动时创建并维护。如果不加入此标记，那么无论在 Web 页面还是命令行终端中都无法进行查询操作  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"5d15ae980d246c8da956f6b51261274c","permalink":"https://xueqing.github.io/translation/go-doc/command/doc/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/doc/","section":"translation","summary":"命令 Go 语言程序实体 go doc 的参数 godoc 命令行模式 Web 服务器模式 命令 go doc 命令可以打印附于 Go 语言程序实体上的文档。可以通过把程序实体的标识符作为该命令的参","tags":["go-command"],"title":"go doc","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 go env 命令可打印出的 Go 语言通用环境信息 go env 的参数  命令  go env 用于打印 Go 语言的环境信息：go env GOARCH 或 go env GOARCH GOCHAR go env -w 重写 Go 语言的环境信息：go env -w GOPRIVATE=\u0026quot;*.bmi\u0026quot;  go env 命令可打印出的 Go 语言通用环境信息 | 名称 | 描述 | | CGO_ENABLED | 指明 cgo 工具是否可用的标识 | | GOARCH | 程序构建环境的目标计算架构 | | GOBIN | 存放可执行文件的目录的绝对路径 | | GOCHAR | 程序构建环境的目标计算架构的单字符标识 | | GOEXE | 可执行文件的后缀 | | GOHOSTARCH | 程序运行环境的目标计算架构 | | GOOS | 程序构建环境的目标操作系统 | | GOHOSTOS | 程序运行环境的目标操作系统 | | GOPATH | 工作区目录的绝对路径 | | GORACE | 用于数据竞争检测的相关选项 | | GOROOT | Go 语言的安装目录的绝对路径 | | GOTOOLDIR | Go 工具目录的绝对路径 |\ngo env 的参数    参数 描述      ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7c571b11f19ff6f065f6b5b60ab05f29","permalink":"https://xueqing.github.io/translation/go-doc/command/env/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/env/","section":"translation","summary":"命令 go env 命令可打印出的 Go 语言通用环境信息 go env 的参数 命令 go env 用于打印 Go 语言的环境信息：go env GOARCH 或 go env GOARCH GOCHAR go env -w 重写 Go 语言的环境信息：go env -w GOPRIVATE=\u0026quot;*.bmi\u0026quot;","tags":["go-command"],"title":"go env","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0f33a5a04ae04088986de5e312bab4e6","permalink":"https://xueqing.github.io/translation/go-doc/command/fix/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/fix/","section":"translation","summary":"","tags":["go-command"],"title":"go fix","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 gofmt 的参数  命令  go 代码有标准的风格。go fmt file_name.go 命令可以格式化写好的代码文件 开发工具里面一般都带了保存时候自动格式化功能，这个功能其实在底层就是调用了 go fmt 使用 go fmt 命令，其实是调用了 gofmt，而且需要参数 -w，否则格式化结果不会写入文件。gofmt -w -l src 可以格式化整个项目  gofmt 的参数    参数 描述     -l 显示需要格式化的文件   -w 把改写后的内容直接写入到文件中，而不是作为结果打印到标准输出   -r 添加形如 “a[b:len(a)] -\u0026gt; a[b:]” 的重写规则，方便做批量替换   -s 简化文件中的代码   -d 显示格式化前后的 diff 而不是写入文件，默认是 false   -e 打印所有的语法错误到标准输出。如果不使用此标记，则只会打印不同行的前10个错误   -cpuprofile 支持调试模式，写入相应的 cpufile 到指定的文件    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"55f569685a53b991d636539cb4146dd1","permalink":"https://xueqing.github.io/translation/go-doc/command/fmt/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/fmt/","section":"translation","summary":"命令 gofmt 的参数 命令 go 代码有标准的风格。go fmt file_name.go 命令可以格式化写好的代码文件 开发工具里面一般都带了保存时候自动格式化功能，这个功能其实在底层就是","tags":["go-command"],"title":"go fmt","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令  命令  go generate 用于在编译前自动化生成某类代码 go generate 通过分析源码中特殊的注释，然后执行相应的命令。注意  此特殊注释必须在 .go 源码文件 每个源码文件可包含多个 generate 注释 显示运行 go generate 命令时，才会执行特殊注释后面的命令 命令串执行时，如果出错则终止后面的执行  //go:generate go tool yacc -o gopher.go -p parser gopher.y  //go:generate 没有空格，这是一个固定的格式，在扫描源码文件的时候是根据这个来判断的 使用 yacc 来生成代码：-o 指定输出文件名，-p 指定 package 名称 这是一个单独的命令。如果想让 go generate 来触发这个命令，那么就可以在当然目录的任意一个 xxx.go 文件里面的任意位置增加此注释   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"02b4a5facad4cc216e3416a177c389cf","permalink":"https://xueqing.github.io/translation/go-doc/command/generate/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/generate/","section":"translation","summary":"命令 命令 go generate 用于在编译前自动化生成某类代码 go generate 通过分析源码中特殊的注释，然后执行相应的命令。注意 此特殊注释必须在 .go 源码文件 每个源码文件可包含","tags":["go-command"],"title":"go generate","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 go get 命令支持的 VCS go get 的参数  命令  go get 命令用来动态获取远程代码包，从代码版本控制系统的远程仓库中检出/更新代码包并对其进行编译和安装 在内部实际上分成了两步操作：第一步是下载源码包第一个工作区的 src 目录下，第二步是执行 go install 目前支持的有 BitBucket、GitHub、Google Code 和 Launchpad。下载源码包的 go 工具会自动根据不同的域名调用不同的源码工具，对应关系如下  BitBucket (Mercurial Git) GitHub (Git) Google Code Project Hosting (Git, Mercurial, Subversion) Launchpad (Bazaar) 这些网站的项目包路径有一个共同标准：远程包路径格式是 网站域名/作者或机构/项目名  如 go get github.com/hyper-carrot/go_lib/logging go get 支持自定义域名的功能，具体参见 go help remote 除非要求强行更新代码包，否则 go get 命令不会进行重复下载  go get 命令支持的 VCS  代码版本控制系统（Version Control System，VCS） 这几个版本控制系统都有一个共同点，那就是会在检出的项目目录中存放一个元数据目录，名称为 “.” 前缀加其主命令名     名称 主命令 说明     Mercurial hg Mercurial 是一种轻量级分布式版本控制系统，采用 Python 语言实现，易于学习和使用，扩展性强   Git git Git 最开始是 Linux Torvalds 为了帮助管理 Linux 内核开发而开发的一个开源的分布式版本控制软件。但现在已被广泛使用。它是被用来进行有效、高速的各种规模项目的版本管理   Subversion svn Subversion 是一个版本控制系统，也是第一个将分支概念和功能纳入到版本控制模型的系统。但相对于 Git 和 Mercurial 而言，它只算是传统版本控制系统的一员   Bazaar bzr Bazaar 是一个开源的分布式版本控制系统。但相比而言，用它来作为 VCS 的项目并不多     对于不知名的网站，需要指出导入路径使用哪种版本控制协议 位置由诸如 googlesource.com 或 github.com 之类通用服务托管，包可以在其导入路径中使用自定义域名。其 HTML 网页下包含元数据重定向 go 工具到实际托管地址的服务仓库  go get 的参数  go get 命令可以接受所有可用于 go build 命令和 go install 命令的参数。这是因为 go get 命令的内部步骤中完全包含了编译和安装这两个动作 go get 命令还有一些特有的参数     参数 描述     -d 只下载不安装   -f 只有在包含 -u 参数时才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用   -fix 在获取源码之后先运行 fix，而后再进行编译和安装   -insecure 允许使用非安全的 scheme（如HTTP）去下载指定的代码包。如果代码仓库（如公司内部的Gitlab）没有 HTTPS 支持，可以添加此标记。请在确定安全的情况下使用它   -t 下载并安装指定的代码包中的测试源码文件中依赖的代码包   -u 强制使用网络更新已有代码包及其依赖包。默认情况该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包   -v 显示执行的命令    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"b3c470e075960698ecee92434bbaffab","permalink":"https://xueqing.github.io/translation/go-doc/command/get/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/get/","section":"translation","summary":"命令 go get 命令支持的 VCS go get 的参数 命令 go get 命令用来动态获取远程代码包，从代码版本控制系统的远程仓库中检出/更新代码包并对其进行编译和安装 在内部实","tags":["go-command"],"title":"go get","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  命令 安装代码包 安装命令源码文件 go install 的参数  命令  go install 用于编译并安装指定的代码包及它们的依赖包 这个命令在内部实际上分成了两步操作：第一步是生成结果文件(可执行文件或 .a 包)，第二步会把编译好的结果移到指定目录($GOPATH/bin 或 $GOPATH/pkg)  go install 命令只比 go build 命令多做了一件事，即安装编译后的结果文件到指定目录  go install 命令可以接受所有可用于 go build 命令的参数  安装代码包  go install 命令会把编译后的可执行文件保存在源码文件所在工作区的 bin 目录下，包保存在 pkg 目录 如果 go install 命令后跟的代码包中仅包含库源码文件，那么 go install 命令会把编译后的结果文件保存在源码文件所在工作区的 pkg 目录下。结果文件是对应的代码包归档文件（也叫静态链接库文件，名称以 .a 结尾）  go build 命令对仅包含库源码文件的代码包进行编译时，不会在当前工作区的 src 以及 pkg 目录下产生任何结果文件。结果文件会出于编译目的被生成在临时目录，但并不会使当前工作区目录产生任何变化。只会留下可执行文件。go build -i 可将包安装在独立于构建目标的地方  go install 命令时不后跟任何代码包参数，那么命令将试图编译当前目录所对应的代码包  安装命令源码文件 go install 的参数    参数 描述     -d 只下载不安装   -f 只有在包含 -u 参数时才有效，不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用   -fix 在获取源码之后先运行 fix，而后再进行编译和安装   -insecure 允许使用非安全的 scheme（如HTTP）去下载指定的代码包。如果代码仓库（如公司内部的Gitlab）没有 HTTPS 支持，可以添加此标记。请在确定安全的情况下使用它   -t 下载并安装指定的代码包中的测试源码文件中依赖的代码包   -u 强制使用网络更新已有代码包及其依赖包。默认情况该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包   -v 显示执行的命令    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"cdbb2fa885480d7f223a33aba8a08365","permalink":"https://xueqing.github.io/translation/go-doc/command/install/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/install/","section":"translation","summary":"命令 安装代码包 安装命令源码文件 go install 的参数 命令 go install 用于编译并安装指定的代码包及它们的依赖包 这个命令在内部实际上分成了两步操作：第一步是生成结果","tags":["go-command"],"title":"go install","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  用法 -f -m  用法  列举命名包，每行一个。不带参数时判断一个包是否存在工作空间，存在则输出包的导入路径 命令 go list [-f format] [-json] [-m] [list flags] [build flags] [packages]  常用的参数是 -f 和 -json，用于控制输出格式  go list cnet hash ... 通配符用于匹配包的导入路径中的任意子串  go list ... 枚举工作空间的所有包 go list ch3/... 指定子树中的所有包 go list ...xml.. 指定具体主题  go list 获取每个包的完整元数据，提供各种用于对用户或其他工具可访问的格式     标志 描述     -e 以容错模式加载和分析指定的代码包，这样讲不会打印错误信息   -json 把代码包的结构实体用 JSON 样式打印，所有值为对应类型的空值的字段会被忽略   -compiled -   -deps -   -export -   -find -   -test -   -m 列举模块而不是包。使用 -f 指定的是模块模板    -f  使用包模板语法指定可选格式。默认输出等价于 -f '{{ImportPath}}'。-f 的值需要满足 text/template 中定义的语法  {{.S}} 代表根结构体的 S 字段的值。go list 对应的跟结构体就是指定的代码包所对应的的结构体 go list -f {{.GoFiles}} cnet/ctcp go list -e -f {{.Error.Err}} cnet go list -e -f 'The package {{.ImportPath}} is {{if .Incomplete}}incomplete!{{else}}complete.{{end}}' cnet  模板结构如下\ntype Package struct { Dir string // directory containing package sources ImportPath string // import path of package in dir ImportComment string // path in import comment on package statement Name string // package name Doc string // package documentation string Target string // install path Shlib string // the shared library that contains this package (only set when -linkshared) Goroot bool // is this package in the Go root? Standard bool // is this package part of the standard Go library? Stale bool // would 'go install' do anything for this package? StaleReason string // explanation for Stale==true Root string // Go root or Go path dir containing this package ConflictDir string // this directory shadows Dir in $GOPATH BinaryOnly bool // binary-only package (no longer supported) ForTest string // package is only for use in named test Export string // file containing export data (when using -export) Module *Module // info about package's containing module, if any (can be nil) Match []string // command-line patterns matching this package DepOnly bool // package is only a dependency, not explicitly listed // Source files GoFiles []string // .go source files (excluding CgoFiles, TestGoFiles, XTestGoFiles) CgoFiles []string // .go source files that import \u0026quot;C\u0026quot; CompiledGoFiles []string // .go files presented to compiler (when using -compiled) IgnoredGoFiles []string // .go source files ignored due to build constraints CFiles []string // .c source files CXXFiles []string // .cc, .cxx and .cpp source files MFiles []string // .m source files HFiles []string // .h, .hh, .hpp and .hxx source files FFiles []string // .f, .F, .for and .f90 Fortran source files SFiles []string // .s source files SwigFiles []string // .swig files SwigCXXFiles []string // .swigcxx files SysoFiles []string // .syso object files to add to archive TestGoFiles []string // _test.go files in package XTestGoFiles []string // _test.go files outside package // Cgo directives CgoCFLAGS []string // cgo: flags for C compiler CgoCPPFLAGS []string // cgo: flags for C preprocessor CgoCXXFLAGS []string // cgo: flags for C++ compiler CgoFFLAGS []string // cgo: flags for Fortran compiler CgoLDFLAGS []string // cgo: flags for linker CgoPkgConfig []string // cgo: pkg-config names // Dependency information Imports []string // import paths used by this package ImportMap map[string]string // map from source import to ImportPath (identity entries omitted) Deps []string // all (recursively) imported dependencies TestImports []string // imports from TestGoFiles XTestImports []string // imports from XTestGoFiles // Error information Incomplete bool // this package or a dependency has an error Error *PackageError // error loading package DepsErrors []*PackageError // errors loading dependencies } type PackageError struct { ImportStack []string // shortest path from package named on command line to this one Pos string // position of error (if present, file:line:col) Err string // the error itself }  模板函数 join 调用 strings.Join\n go list -f '{{join .Deps \u0026quot; \u0026quot;}}' strconv 输出 strconv 包的依赖过渡关系记录，空格分隔 go list -f '{{.ImportPath}} -\u0026gt; {{join .Imports \u0026quot; \u0026quot;}}' compress/... 输出标准库的 compress 子树中每个包的直接导入记录  模板函数 context 返回构建上下文，定义如下\ntype Context struct { GOARCH string // target architecture GOOS string // target operating system GOROOT string // Go root GOPATH string // Go path CgoEnabled bool // whether cgo can be used UseAllFiles bool // use files regardless of +build lines, file names Compiler string // compiler to assume when computing target paths BuildTags []string // build constraints to match in +build lines ReleaseTags []string // releases the current release is compatible with InstallSuffix string // suffix to use in the name of the install dir }   -m  默认输出模块路径、版本信息，如果有替换，输出替换信息  如果有替换，即 Replace 不为 nil 时，下面的 Dir 设置的是 Replace.Dir  主模块是包含当前目录的模块。活动模块是主模块及其依赖模块。默认显示主模块  all 指定所有活动模块  和 -f 一起使用，指定模块模板 结构体 Module 有一个 String 方法，用于格式化输出行，因此默认输出等价于 -f {{.String}}\ntype Module struct { Path string // module path Version string // module version Versions []string // available module versions (with -versions) Replace *Module // replaced by this module Time *time.Time // time version was created Update *Module // available update, if any (with -u) Main bool // is this the main module? Indirect bool // is this module only an indirect dependency of main module? Dir string // directory holding files for this module, if any GoMod string // path to go.mod file for this module, if any GoVersion string // go version used in module Error *ModuleError // error loading module } type ModuleError struct { Err string // the error itself }  -u 增加了关于可以升级的信息：go list -m -u -json all\n -version 设置 Module.Version 域为模块已知的版本\n 模板函数 module 接收一个字符串参数(必须是一个模块路径或查询)，返回指定的模块对应的 Module 结构体\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"4d3af960cff930fed92677b8dd1d730a","permalink":"https://xueqing.github.io/translation/go-doc/command/list/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/list/","section":"translation","summary":"用法 -f -m 用法 列举命名包，每行一个。不带参数时判断一个包是否存在工作空间，存在则输出包的导入路径 命令 go list [-f format] [-json] [-m] [list flags] [build flags] [packages] 常用的参数是 -f 和 -j","tags":["go-command"],"title":"go list","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  用法 download edit graph init tidy vendor verify why  用法  用于操作模块。注意：所有的 go 命令支持模块 用法：go mod \u0026lt;command\u0026gt; [arguments]     命令 功能     download 下载模块到本地缓存   edit 使用工具或脚本更新 go.mod   graph 打印模块需求图   init 在当前目录初始化一个新模块   tidy 添加缺失模块，删除无用模块   vendor 创建依赖的 vendor 拷贝   verify 验证依赖拥有预期的内容   why 解释为什么需要一个包或者模块    download  用法： go mod download [-json] [modules] 不带模块参数时，默认下载主模块的所有依赖 其他 go 命令会自动下载所需模块，go mod download 主要用于预先填充本地缓存或用户计算 Go 模块代理 默认将错误发生给标准错误。-json 会打印 JSON 对象到标准输出，描述每个下载的模块(或失败)\ntype Module struct { Path string // module path Version string // module version Error string // error loading module Info string // absolute path to cached .info file GoMod string // absolute path to cached .mod file Zip string // absolute path to cached .zip file Dir string // absolute path to cached source root directory Sum string // checksum for path, version (as in go.sum) GoModSum string // checksum for go.mod (as in go.sum) Latest bool // would @latest resolve to this version? }   edit  用法：go mod edit [edit flags] [go.mod] 命令只会读写主模块 go.mod 文件，可在编辑参数指定另外需要编辑的文件 编辑标识包括\n -fmt: 只格式化文件。其他参数默认会格式化。只有在没有其他编辑参数时需要指定 -fmt -module: 修改模块路径(module 行) -require=path@version/-droprequire=path: -exclude=path@version/-dropexclude=path@version: -replace=old[@v]=new[@v]/-dropreplace=old[@v]: -go=version: -print: -json: 以 JSON 格式打印最终的 go.mod 而不是写到 go.mod。JSON 输出符合下面的 Go 类型 命令只会描述 go.mod 文件，间接引用的模块不会包含。需要查看编译所需的所有模块使用 go list -m -json all\ntype Module struct { Path string Version string } type GoMod struct { Module Module Go string Require []Require Exclude []Module Replace []Replace } type Require struct { Path string Version string Indirect bool } type Replace struct { Old Module New Module }   工具可以通过解析 go mod edit -json 的输出获取 go.mod 数据结构，然后通过 go mod edit 修改\n  graph  用法：go mod graph 功能：以文本格式打印模块需求图(使用 replaced 模块)。每一行输出包含模块及其一个依赖  init  用法：go mod init [module] 功能：在当前目录初始化并写一个新的 go.mod，实际上是以当前目录为根创建一个新模块。go.mod 一定不能已经存在。可能的话，命令会从导入注释或版本控制配置(git 等)猜测模块路径。要 覆盖猜测，可以提供模块路径参数  tidy  用法：go mod tidy [-v] 功能：确保 go.mod 和模块的源码匹配。拉取需要的缺失模块，删除无用模块。同时修改 go.sum -v 会输出删除模块信息到标准错误  vendor  用法：go mod vendor [-v] 功能：重置主模块的 vendor 目录一包含编译和测试主模块所有包所需的包。目录不包含 vendored 包的测试代码 -v 打印 vendored 模块和包的名称到标准错误  verify  用法：go mod verify 功能：检查当前模块的依赖在下载之后不曾被修改，该依赖存储在一个本地下载的源码缓存。如果所有模块未被修改，输出 all modules verified.。否则打印被修改的模块，并导致 go mod 以非 0 状态码返回  why  用法：go mod why [-m] [-vendor] packages... 功能：显示主模块到每个列举包的最短导入路径 -m 将参数视为一系列模块，并为模块的每个包找到一个路径  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"2febc55e5dc0e9aa93adf5a71107750e","permalink":"https://xueqing.github.io/translation/go-doc/command/mod/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/mod/","section":"translation","summary":"用法 download edit graph init tidy vendor verify why 用法 用于操作模块。注意：所有的 go 命令支持模块 用法：go mod \u0026lt;command\u0026gt; [arguments] 命令 功能 download 下载模块到本地缓存 edit 使用工具或脚本更新 go.mod graph 打印模块","tags":["go-command"],"title":"go mod","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":" 构建并运行程序  对于简单的程序，可以使用 go run program.go 直接构建并允许程序 go run 不会再运行目录生成任何文件，可执行文件被放在临时文件中执行，工作目录被设置为当前目录 go run 可以跟参数，第一个不是以 .go 结尾的参数会作为可执行程序的参数列表的开始  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"bd57bbe073bd71deb3a1bb32299cc649","permalink":"https://xueqing.github.io/translation/go-doc/command/run/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/run/","section":"translation","summary":"构建并运行程序 对于简单的程序，可以使用 go run program.go 直接构建并允许程序 go run 不会再运行目录生成任何文件，可执行文件被放在临时文件中执行，工作目录被设置","tags":["go-command"],"title":"go run","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"用法：go test [build/test flags] [packages] [build/test flags \u0026amp; test binary flags]\ngo test 自动测试通过导入路径命名的包。命令按下面的格式打印测试结果的概要：\nok archive/tar 0.011s FAIL archive/zip 0.022s ok compress/gzip 0.033s ...  之后是每个失败的包的详细输出。\ngo test 重新编译每个包以及所有名字匹配 “*_test.go” 的文件。这些额外的文件可以包含测试函数，基准测试函数和示例函数。查看 go help testfunc 获取更多信息。每个列举的包执行一个单独的二进制测试。忽视以 “_” (包括 “_test.go”) 或 “.” 开始的文件。\n声明了后缀为 “_test” 的包的测试文件会作为一个单独的包被编译，然后被主二进制测试链接和运行。\ngo tool 会忽视 “testdata” 命名的目录，使得可以包含测试所需的辅助数据。\n作为编译一个二进制测试的一部分，go test 在包及其测试源文件上运行 go vet 以识别显著的问题。如果 go vet 发现任何问题，go test 报告这些问题并且不再运行二进制测试。只使用了默认 go vet 检查的高可信度的子集。这些子集包括：atomic、bool、buildtags、nilfunc 和 printf。你可以通过 go doc cmd/vet 查看他们的文档以及其他的 vet 测试。使用 -vet=off 标识禁用 go vet 的运行。\n即使测试打印输出到它自己的标准错误，所有的测试输出和总结行会被打印到 go 命令的标准输出。(保留 go 命令的标准错误用于打印编译这些测试的错误。)\ngo test 运行包括两种模式：\n 叫做本地目录模式。当调用 go test 不带包参数时发生(如 go test 或 go test -v)。在这种模式，go test 在当前目录找到的包源文件和测试文件，然后运行生成的二进制测试。在这种模式，禁用缓存(后面会讨论)。包测试结束之后，go test 打印一个总结行显示测试状态(“ok” 或 “FAIL”)、包名和用时。 叫做包列表模式。当调用 go test 携带显式的包参数时发送(如 go test math、go test ./... 甚至 go test ..)。在这种模式，go test 编译和测试命令行列举的每个包。如果一个包测试通过，go test 只打印最后的 “ok” 总结行。如果一个包测试失败，go test 打印完整的测试输出。如果调用时携带 -bench 或 -v 标识，go test 也会为通过测试包打印完整的输出，以显示请求的基准测试结果或错误日志。当所有列举的包测试结束且打印了他们的输出之后，如果任何一个包测试失败，go test 打印一个最终的 “FAIL” 状态。  只有在包列表模式，go test 会缓存成功的包测试结果以避免不必要的重复运行测试。当一个测试的结果可从缓存中恢复时，go test 会再次显示之前的输出而不是再次运行二进制测试。这时，go test 打印 “(cached)” 取代总结行中的用时。\n缓存匹配的规则是 go 命令调用相同的二进制测试，且命令行标识完全来自受限的可缓存的测试标识集合，被定义为 -cpu、-list、-parallel、-run、-short 和 -v。如果允许一次 go test 包含任何这个集合之外的测试标识或非测试标识，结果都是不可缓存的。要禁用测试缓存，使用除了可缓存的标识以外的任意的测试标识或参数。惯用的显式禁用测试缓存的方法是使用 -count=1。打开在包的源根(通常是 $GOPATH)或者查询环境变量的测试只有在这些文件和环境变量不改变时才会与之后的运行匹配。一个缓存的测试结果被视为立刻执行，因此无论如何设置 -timeout，一个成功的包测试结果会被缓存且重用。\n除了编译标志，go test 专属的标识包括：\n args：传递命令行的剩余部分(-args 之后的所有)给二进制测试，不解释且不修改。因为这个标识使用了命令行的剩余部分，包列表(如果有)必须出现在这个标识之前。 -c：编译二进制测试为 pkg.test 但不要运行(pkg 是包导入路径的最后一个元素)。文件名可以使用 -o 标识修改。 -exec xprog：使用 xprog 运行二进制测试。这个行为和 go run 相同。查看 go run 获取更多信息。 -i：安装测试的依赖包。不要运行测试。 -json：将测试输出转化为 JSON 用于自动处理。查看 go doc test2json 获取编码信息。 -o file：编译二进制测试到指定名称的文件。测试仍然运行(除非指定 -c 或 -i)。  二进制测试也接收控制测试执行的标识；这些标识也可被 go test 访问。查看 go help testflag 获取更多信息。\n需要更多关于编译标识，查看 go help build。需要更多关于指定包的，查看 go help package。\n查看其他：go build、go vet\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e2d42fb61ceb1fcc90383fb94bf4a788","permalink":"https://xueqing.github.io/translation/go-doc/command/test_package/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/test_package/","section":"translation","summary":"用法：go test [build/test flags] [packages] [build/test flags \u0026amp; test binary flags] go test 自动测试通过导入路径命名的包。命令按下面的格式打印测试结果的概要： ok archive/tar 0.011s FAIL archive/zip 0.022s ok compress/gzip 0.033s ... 之后是每个失败的包的","tags":["go-command"],"title":"go test","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 博客——Go 可测试的示例函数学习。\n作者：Andrew Gerrand 日期：2015/5/7  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9715f7a498f82dee4786995d2fca9c70","permalink":"https://xueqing.github.io/translation/go-doc/blog/examples/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/blog/examples/","section":"translation","summary":"参考 Go 博客——Go 可测试的示例函数学习。 作者：Andrew Gerrand 日期：2015/5/7","tags":["go-blog"],"title":"Go 可测试的示例函数","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"当使用模块时，不再使用 GOPATH 来解决导入。但是，它仍被用于存储下载的源码(在 GOPATH/pkg/mod)和编译好的命令(在 GOPATH/bin)。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"69f52d251a5d0fb637cf0de1201c8fa5","permalink":"https://xueqing.github.io/translation/go-doc/command/gopath_and_module/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/gopath_and_module/","section":"translation","summary":"当使用模块时，不再使用 GOPATH 来解决导入。但是，它仍被用于存储下载的源码(在 GOPATH/pkg/mod)和编译好的命令(在 GOPATH/bin)","tags":["go-command"],"title":"GOPATH 和模块","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"Go 路径用于解决导入语句，它通过 go/build 包实现，并记录在 go/build 包。\nGOPATH 环境变量列举了寻找 Go 代码的位置。在 Unix 上，其值是一个冒号分隔的字符串。在 Windows 上，其值是一个分号分隔的字符串。在 Plan 9 上，其值是一个列表。\n如果环境变量未被设置，GOPATH 默认是用户主目录下的一个 “go” 子目录(Unix 下是 $HOME/go，Windows 下是 %USERPROFILE%\\go)，除非那个目录存在一个 Go 发行版本。运行 go env GOPATH 查看当前的 GOPATH。\n查看 SettingGOPATH 设置一个自定义的 GOPATH。\nGOPATH 下的每个目录必须有一个规定的结构：\n src 目录持有源码。src 下的目录确定了导入路径或可执行文件名字。 pkg 目录持有安装的包对象。在 Go 树中，每个目标操作系统和架构对有其自己的包的子目录(pkg/GOOS_ARCH). 如果 DIR 是GOPATH 下的一个目录，包的源码在 DIR/src/foo/bar，那么包可以导出为 “foo/bar”，且将其编译文件安装到 “DIR/pkg/GOOS_GOARCH/foo/bar.a”。 bin 目录持有编译的命令。每个命令命名为它的源码目录，但是只有最后一个元素，而不是整个路径。也就是说，一个命令的源码在 DIR/src/foo/quux，那么它被安装到 DIR/bin/quux。这个 “foo/” 前缀被除去以便你可以增加 DIR/bin 到你的 PATH 来获取安装的命令。如果设置了 GOBIN 环境变量，命令被安装到 GOBIN 命名的目录而不是 DIR/bin。GOBIN 必须是一个绝对路径。  这里是一个目录格式示例：\nGOPATH=/home/user/go /home/user/go/ src/ foo/ bar/ (包 bar 中的 go 代码) x.go quux/ (包 main 中的 go 代码) y.go bin/ quux (安装的命令) pkg/ linux_amd64/ foo/ bar.a (安装的包对象)  Go 搜索 GOPATH 列举的每个目录来查找源码，但是新包总是下载到列表中的第一个目录。\n查看如何编写 Go 代码的例子。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ae041917790b4f4539f9719057786175","permalink":"https://xueqing.github.io/translation/go-doc/command/gopath_env_var/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/gopath_env_var/","section":"translation","summary":"Go 路径用于解决导入语句，它通过 go/build 包实现，并记录在 go/build 包。 GOPATH 环境变量列举了寻找 Go 代码的位置。在 Unix 上，其值是一个冒号分隔的字符串。在 Windows 上，其值是一","tags":["go-command"],"title":"GOPATH 环境变量","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Images Remember the picture generator you wrote earlier? Let's write another one, but this time it will return an implementation of image.Image instead of a slice of data. Define your own Image type, implement the necessary methods, and call pic.ShowImage. Bounds should return a image.Rectangle, like image.Rect(0, 0, w, h). ColorModel should return color.RGBAModel. At should return a color; the value v in the last picture generator corresponds to color.RGBA{v, v, 255, 255} in this one. */ package main import ( \u0026quot;image\u0026quot; \u0026quot;image/color\u0026quot; \u0026quot;math\u0026quot; \u0026quot;golang.org/x/tour/pic\u0026quot; ) /* type Image interface { // ColorModel returns the Image's color model. ColorModel() color.Model // Bounds returns the domain for which At can return non-zero color. // The bounds do not necessarily contain the point (0, 0). Bounds() Rectangle // At returns the color of the pixel at (x, y). // At(Bounds().Min.X, Bounds().Min.Y) returns the upper-left pixel of the grid. // At(Bounds().Max.X-1, Bounds().Max.Y-1) returns the lower-right one. At(x, y int) color.Color } */ type myImage struct{} func (img myImage) ColorModel() color.Model { return color.NRGBAModel } func (img myImage) Bounds() image.Rectangle { return image.Rect(0, 0, 100, 100) } func (img myImage) At(x, y int) color.Color { val := float64(x ^ y) v := uint8(math.Abs(val)) return color.RGBA{v, v, 255, 255} } func main() { m := myImage{} pic.ShowImage(m) }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0fbedeec9b95bf2620a9075e37cfc5db","permalink":"https://xueqing.github.io/translation/go-doc/gotour/images/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/images/","section":"translation","summary":"/* Exercise: Images Remember the picture generator you wrote earlier? Let's write another one, but this time it will return an implementation of image.Image instead of a slice of data. Define your own Image type, implement the necessary methods, and call pic.ShowImage. Bounds should return a image.Rectangle, like image.Rect(0, 0, w, h). ColorModel should return color.RGBAModel. At should return a color; the value v in the last picture generator corresponds to color.","tags":["go-tour"],"title":"Images","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  概述 索引  参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;testing/iotest\u0026quot;\n概述 iotest 包实现了主要用于 testing 的 Reader 和 Writer。\n索引 参考\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"e1de4b2b5be747d2165e5a3ff7ea2bf6","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/iotest/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/iotest/","section":"translation","summary":"概述 索引 参考 Golang 官网文档 学习。 导入语句：import \u0026quot;testing/iotest\u0026quot; 概述 iotest 包实现了主要用于 testing 的 Reader 和 Writer。 索引 参考","tags":["golang-pkg"],"title":"iotest 包","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: Loops and Functions As a way to play with functions and loops, let\u0026rsquo;s implement a square root function: given a number x, we want to find the number z for which z² is most nearly x.\nComputers typically compute the square root of x using a loop. Starting with some guess z, we can adjust z based on how close z² is to x, producing a better guess:\nz -= (z*z - x) / (2*z) Repeating this adjustment makes the guess better and better until we reach an answer that is as close to the actual square root as can be.\nImplement this in the func Sqrt provided. A decent starting guess for z is 1, no matter what the input. To begin with, repeat the calculation 10 times and print each z along the way. See how close you get to the answer for various values of x (1, 2, 3, \u0026hellip;) and how quickly the guess improves.\nHint: To declare and initialize a floating point value, give it floating point syntax or use a conversion:\nz := 1.0 z := float64(1) Next, change the loop condition to stop once the value has stopped changing (or only changes by a very small amount). See if that\u0026rsquo;s more or fewer than 10 iterations. Try other initial guesses for z, like x, or x/2. How close are your function\u0026rsquo;s results to the math.Sqrt in the standard library?\n(Note: If you are interested in the details of the algorithm, the z² − x above is how far away z² is from where it needs to be (x), and the division by 2z is the derivative of z², to scale how much we adjust z by how quickly z² is changing. This general approach is called Newton\u0026rsquo;s method. It works well for many functions but especially well for square root.) */\npackage main\nimport ( \u0026ldquo;fmt\u0026rdquo; \u0026ldquo;math\u0026rdquo; )\nfunc mySqrt(x float64) float64 { // z := x / 2 z := x tmp := 0.0 for math.Abs(z-tmp) \u0026gt;= 0.000000000001 { tmp = z z -= (z*z - x) / (2 * z) fmt.Println(z) } return z }\nfunc main() { fmt.Println(mySqrt(2)) fmt.Println(math.Sqrt(2)) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"0f1e68fdc4f4002282f28d6379fda910","permalink":"https://xueqing.github.io/translation/go-doc/gotour/loops_and_functions/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/loops_and_functions/","section":"translation","summary":"```go /* Exercise: Loops and Functions As a way to play with functions and loops, let\u0026rsquo;s implement a square root function: given a number x, we want to find the number z for which z² is most nearly x.\nComputers typically compute the square root of x using a loop. Starting with some guess z, we can adjust z based on how close z² is to x, producing a better guess:","tags":["go-tour"],"title":"Loops and Functions","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: Maps Implement WordCount. It should return a map of the counts of each “word” in the string s. The wc.Test function runs a test suite against the provided function and prints success or failure.\nYou might find strings.Fields helpful. */\npackage main\nimport ( \u0026ldquo;strings\u0026rdquo;\n\u0026quot;golang.org/x/tour/wc\u0026quot;  )\nfunc wordCount(s string) map[string]int { m := make(map[string]int) var ss []string ss = strings.Fields(s) for i := 0; i \u0026lt; len(ss); i++ { m[ss[i]]++ }\nreturn m  }\nfunc main() { wc.Test(wordCount) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"df7f056b21e2097422b7591ec7fb9aaf","permalink":"https://xueqing.github.io/translation/go-doc/gotour/maps/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/maps/","section":"translation","summary":"```go /* Exercise: Maps Implement WordCount. It should return a map of the counts of each “word” in the string s. The wc.Test function runs a test suite against the provided function and prints success or failure.\nYou might find strings.Fields helpful. */\npackage main\nimport ( \u0026ldquo;strings\u0026rdquo;\n\u0026quot;golang.org/x/tour/wc\u0026quot;  )\nfunc wordCount(s string) map[string]int { m := make(map[string]int) var ss []string ss = strings.Fields(s) for i := 0; i \u0026lt; len(ss); i++ { m[ss[i]]++ }","tags":["go-tour"],"title":"Maps","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  概述 索引  参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;testing/quick\u0026quot;\n概述 quick 包实现了帮辅助黑盒测试的工具函数。\ntesting/quick 包被冻结，且不再接受新特性。\n索引 参考\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"083c90316707ced2ed6b4ab3d70dcff3","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/quick/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/quick/","section":"translation","summary":"概述 索引 参考 Golang 官网文档 学习。 导入语句：import \u0026quot;testing/quick\u0026quot; 概述 quick 包实现了帮辅助黑盒测试的工具函数。 testing/quick 包被冻结，且不再接受新特性。 索引 参考","tags":["golang-pkg"],"title":"quick 包","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: Readers Implement a Reader type that emits an infinite stream of the ASCII character \u0026lsquo;A\u0026rsquo;. */\npackage main\nimport \u0026ldquo;golang.org/x/tour/reader\u0026rdquo;\ntype myReader struct{}\nfunc (r myReader) Read(c []byte) (int, error) { i := 0 for ; i \u0026lt; len\u0026copy;; i++ { c[i] = \u0026lsquo;A\u0026rsquo; } for ; i \u0026lt; cap\u0026copy;; i++ { c = append(c, \u0026lsquo;A\u0026rsquo;) }\nreturn cap(c), nil  }\nfunc main() { reader.Validate(myReader{}) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"abf0cd1a172a86b8bb76a4459b3a9fcc","permalink":"https://xueqing.github.io/translation/go-doc/gotour/reader/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/reader/","section":"translation","summary":"```go /* Exercise: Readers Implement a Reader type that emits an infinite stream of the ASCII character \u0026lsquo;A\u0026rsquo;. */\npackage main\nimport \u0026ldquo;golang.org/x/tour/reader\u0026rdquo;\ntype myReader struct{}\nfunc (r myReader) Read(c []byte) (int, error) { i := 0 for ; i \u0026lt; len\u0026copy;; i++ { c[i] = \u0026lsquo;A\u0026rsquo; } for ; i \u0026lt; cap\u0026copy;; i++ { c = append(c, \u0026lsquo;A\u0026rsquo;) }\nreturn cap(c), nil  }\nfunc main() { reader.Validate(myReader{}) }","tags":["go-tour"],"title":"Readers","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"```go /* Exercise: rot13Reader A common pattern is an io.Reader that wraps another io.Reader, modifying the stream in some way.\nFor example, the gzip.NewReader function takes an io.Reader (a stream of compressed data) and returns a *gzip.Reader that also implements io.Reader (a stream of the decompressed data).\nImplement a rot13Reader that implements io.Reader and reads from an io.Reader, modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.\nThe rot13Reader type is provided for you. Make it an io.Reader by implementing its Read method. */\npackage main\nimport ( \u0026ldquo;io\u0026rdquo; \u0026ldquo;os\u0026rdquo; \u0026ldquo;strings\u0026rdquo; )\ntype rot13Reader struct { r io.Reader }\nfunc rot13(b byte) byte { if b \u0026gt;= \u0026lsquo;a\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026rsquo;m\u0026rsquo; { return b + 13 } if b \u0026gt;= \u0026lsquo;n\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026lsquo;z\u0026rsquo; { return b - \u0026lsquo;n\u0026rsquo; + \u0026lsquo;a\u0026rsquo; } if b \u0026gt;= \u0026lsquo;A\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026rsquo;M\u0026rsquo; { return b + 13 } if b \u0026gt;= \u0026lsquo;N\u0026rsquo; \u0026amp;\u0026amp; b \u0026lt;= \u0026lsquo;Z\u0026rsquo; { return b - \u0026lsquo;N\u0026rsquo; + \u0026lsquo;A\u0026rsquo; } return b }\nvar rot13Map = make(map[byte]byte)\nfunc initializeRot13Map() { s1 := \u0026ldquo;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026rdquo; s2 := \u0026ldquo;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm\u0026rdquo; for i := 0; i \u0026lt; len(s1); i++ { rot13Map[s1[i]] = s2[i] } }\nfunc rot13ByMap(b byte) byte { val, ok := rot13Map[b] if ok { return val } return b }\nfunc (rot rot13Reader) Read(c []byte) (int, error) { b := make([]byte, 8) n, err := rot.r.Read(b) initializeRot13Map() for i := 0; i \u0026lt; n; i++ { // b[i] = rot13(b[i]) b[i] = rot13ByMap(b[i]) } if err == io.EOF { return n, err } copy(c, b) return n, nil }\nfunc main() { s := strings.NewReader(\u0026ldquo;Lbh penpxrq gur pbqr!\u0026rdquo;) r := rot13Reader{s} io.Copy(os.Stdout, \u0026amp;r) }\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"9e3b955c5865480af365f8048bd70668","permalink":"https://xueqing.github.io/translation/go-doc/gotour/rot_reader/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/rot_reader/","section":"translation","summary":"```go /* Exercise: rot13Reader A common pattern is an io.Reader that wraps another io.Reader, modifying the stream in some way.\nFor example, the gzip.NewReader function takes an io.Reader (a stream of compressed data) and returns a *gzip.Reader that also implements io.Reader (a stream of the decompressed data).\nImplement a rot13Reader that implements io.Reader and reads from an io.Reader, modifying the stream by applying the rot13 substitution cipher to all alphabetical characters.","tags":["go-tour"],"title":"rot13Reader","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Slices Implement Pic. It should return a slice of length dy, each element of which is a slice of dx 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values. The choice of image is up to you. Interesting functions include (x+y)/2, x*y, and x^y. (You need to use a loop to allocate each []uint8 inside the [][]uint8.) (Use uint8(intValue) to convert between types.) */ package main import \u0026quot;golang.org/x/tour/pic\u0026quot; func myPic(dx, dy int) [][]uint8 { pic := make([][]uint8, dx) for i := 0; i \u0026lt; dx; i++ { pic[i] = make([]uint8, dy) } for i := 0; i \u0026lt; dx; i++ { for j := 0; j \u0026lt; dy; j++ { pic[i][j] = uint8((i ^ j)) } } return pic } func main() { pic.Show(myPic) }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"3b0e279c2e5225f6603e4d0a3b8affc4","permalink":"https://xueqing.github.io/translation/go-doc/gotour/slices/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/slices/","section":"translation","summary":"/* Exercise: Slices Implement Pic. It should return a slice of length dy, each element of which is a slice of dx 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values. The choice of image is up to you. Interesting functions include (x+y)/2, x*y, and x^y. (You need to use a loop to allocate each []uint8 inside the [][]uint8.","tags":["go-tour"],"title":"Slices","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Stringers Make the IPAddr type implement fmt.Stringer to print the address as a dotted quad. For instance, IPAddr{1, 2, 3, 4} should print as \u0026quot;1.2.3.4\u0026quot;. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;strconv\u0026quot; \u0026quot;strings\u0026quot; ) type iPAddr [4]byte func (ip iPAddr) String() string { arr := []string{\u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;} for i := 0; i \u0026lt; 4; i++ { arr[i\u0026lt;\u0026lt;1] = strconv.Itoa(int(ip[i])) } sip := strings.Join(arr, \u0026quot;\u0026quot;) return sip } func main() { hosts := map[string]iPAddr{ \u0026quot;loopback\u0026quot;: {127, 0, 0, 1}, \u0026quot;googleDNS\u0026quot;: {8, 8, 8, 8}, } for name, ip := range hosts { fmt.Printf(\u0026quot;%v: %v\\n\u0026quot;, name, ip) } }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8e3551f16161a6a08dbe0dda88b01799","permalink":"https://xueqing.github.io/translation/go-doc/gotour/stringer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/stringer/","section":"translation","summary":"/* Exercise: Stringers Make the IPAddr type implement fmt.Stringer to print the address as a dotted quad. For instance, IPAddr{1, 2, 3, 4} should print as \u0026quot;1.2.3.4\u0026quot;. */ package main import ( \u0026quot;fmt\u0026quot; \u0026quot;strconv\u0026quot; \u0026quot;strings\u0026quot; ) type iPAddr [4]byte func (ip iPAddr) String() string { arr := []string{\u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;, \u0026quot;.\u0026quot;, \u0026quot;0\u0026quot;} for i := 0; i \u0026lt; 4; i++ { arr[i\u0026lt;\u0026lt;1] = strconv.Itoa(int(ip[i])) } sip := strings.Join(arr, \u0026quot;\u0026quot;) return sip } func main() { hosts := map[string]iPAddr{ \u0026quot;loopback\u0026quot;: {127, 0, 0, 1}, \u0026quot;googleDNS\u0026quot;: {8, 8, 8, 8}, } for name, ip := range hosts { fmt.","tags":["go-tour"],"title":"Stringers","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  概述  基准测试 示例函数 跳过测试 子测试项目和子基准测试 Main  索引 例子 子目录  参考 Golang 官网文档 学习。\n导入语句：import \u0026quot;testing\u0026quot;\n概述 testing 包提供对 Go 包的自动测试。它适用于和 go test 命令协作，自动执行下面格式的函数\nfunc TestXxx(*testing.T)  其中，Xxx 不是小写字母开头。这个函数名用于识别测试代码。\n在这些函数中，使用 Error、Fail 或相关的方法来标记失败。\n要写一个新的测试集，新建一个文件以 _test.go 结尾，其中包含上述的 TestXxx 函数。将此文件放在将要测试的同一包中。正常的包编译不会包含此文件，但是运行 go test 命令时会包含。查看更多细节，运行 go help test 和 go help testflag。\n一个简单的功能测试函数看起来像这样：\nfunc TestAbs(t testing.T) { got := Abs(-1) if got != 1 { t.Errorf(\u0026quot;Abs(-1) = %d; want 1\u0026quot;, got) } }  基准测试 下面格式的函数被当做基准测试，并且当 go test 命令提供 -bench 标记时会执行此函数。基准测试是顺序执行的。\nfunc BenchmarkXxxx(*testing.B)  对 testing 标记的描述，查看 Testing flags。\n一个简单的基准测试函数看起来像这样：\nfunc BenchmarkHello(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { fmt.Sprintf(\u0026quot;hello\u0026quot;) } }  基准测试函数必须运行目标代码 b.N 次。在执行基准测试期间，会调整 b.N 直到基准测试函数持续时间足够长，认为是时间可靠的。输出 BenchmarkHello 10000000 282 ns/op 意味着这个循环以每次循环 282 纳秒的速度运行了 10000000 次。\n如果一个基准测试在运行之前需要一些耗时的设置，可重置定时器：\nfunc BenchmarkBigLen(b *testing.B) { big := NewBig() b.ResetTimer() for i := 0; i \u0026lt; b.N; i++ { big.Len() } }  如果一个基准测试需要并行测试性能，可以使用 RunParallel 辅助函数；这样的基准测试适用于和 go test -cpu 标识一起使用：\nfunc BenchmarkTemplateParallel(b *testing.B) { templ := template.Must(template.New(\u0026quot;test\u0026quot;).Parse(\u0026quot;Hello, {{.}}!\u0026quot;)) b.RunParallel(func(pb *testing.PB) { var buf bytes.Buffer for pb.Next() { buf.Reset() templ.Execute(\u0026amp;buf, \u0026quot;World\u0026quot;) } }) }  示例函数 testing 包也会运行和验证示例代码。示例函数可以包含一个总结性的行注释，以 “Output:” 开头，并且运行测试的是和这个函数的标准输出比较。(这个比较忽视开始和末尾的空格)。下面是一个示例代码的例子：\nfunc ExampleHello() { fmt.Println(\u0026quot;hello\u0026quot;) // Output: hello } func ExampleSalutations() { fmt.Println(\u0026quot;hello, and\u0026quot;) fmt.Println(\u0026quot;goodbye\u0026quot;) // Output: // hello, and // goodbye }  注释前缀 “Unordered output:” 类似于 “Output:”，但是匹配任意的行顺序：\nfunc ExamplePerm() { for _, value := range Perm(4) { fmt.Println(value) } // Unordered output: 4 // 2 // 1 // 3 // 0 }  没有输出注释的示例函数被编译但是不会被执行。\n声明包、函数 F、类型 T 和作用于类型 T 的方法 M 的示例函数的命名如下：\nfunc Example() { ... } func ExampleF() { ... } func ExampleT() { ... } func ExampleT_M() { ... }  可通过增加一个不同的后缀到函数名字后面以支持对于一个包/类型/函数/方法的多个示例函数。后缀必须以小写字母开始。\nfunc Example_suffix() { ... } func ExampleF_suffix() { ... } func ExampleT_suffix() { ... } func ExampleT_M_suffix() { ... }  当文件包含一个单独的示例函数，及至少一个其他的函数、类型、变量或常数声明，且没有功能测试函数或者基准测试函数时，整个测试文件作为例子显示。\n跳过测试 可在运行时调用 *T 或 *B 的 Skip 方法跳过功能测试或基准测试：\nfunc TestTimeConsuming(t *testing.T) { if testing.Short() { t.Skip(\u0026quot;skipping test in short mode.\u0026quot;) } // ... }  子测试项目和子基准测试 T 和 B 的 Run 方法允许定义子测试项目和子基准测试，而不需要为每个子测试项目和子基准测试定义另外的函数。这使能使用类似表驱动的基准测试和创建分级测试。它也提供了一种方式来共享共用的设置和终止代码：\nfunc TestFoo(t *testing.T) { // \u0026lt;setup code\u0026gt; t.Run(\u0026quot;A=1\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;A=2\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;B=1\u0026quot;, func(t *testing.T) { ... }) // \u0026lt;tear-down code\u0026gt; }  每个子测试项目和子基准测试有一个唯一的名字：结合顶层测试的名字以及传递给 Run 的名字的顺序，由斜线分隔，以及一个可选的尾随的序号以消除歧义。\n传递给 -run 和 -bench 命令行标识符的参数是一个不固定的正则表达式，匹配了测试的名字。参数是多个斜线分隔的元素时，比如子测试，参数是自身(斜线分隔)；表达式匹配每个名字元素。因为是不固定的，一个空的表达式匹配任意字符串。比如，使用 “matching” 表达 “谁的名字包含”：\ngo test -run '' # Run all tests. go test -run Foo # Run top-level tests matching \u0026quot;Foo\u0026quot;, such as \u0026quot;TestFooBar\u0026quot;. go test -run Foo/A= # For top-level tests matching \u0026quot;Foo\u0026quot;, run subtests matching \u0026quot;A=\u0026quot;. go test -run /A=1 # For all top-level tests, run subtests matching \u0026quot;A=1\u0026quot;.  子测试也可用于控制并行度。一个父测试只有在其子测试完成时才会完成。在这个例子中，所有测试去其他测试并行运行，且只与其他测试并行，而与可能定义的其他顶层测试无关。\nfunc TestGroupedParallel(t *testing.T) { for _, tc := range tests { tc := tc // capture range variable t.Run(tc.Name, func(t *testing.T) { t.Parallel() // ... }) } }  当程序超过 8192 个并行 goroutine 时，竞争检测器会杀掉程序，因此当运行并行测试且设置了 -race 标识时需要注意。\nRun 只有在并行子测试结束才会返回，为一组并行测试之后的资源清理提供了一种方式。\nfunc TestTeardownParallel(t *testing.T) { // This Run will not return until the parallel tests finish. t.Run(\u0026quot;group\u0026quot;, func(t *testing.T) { t.Run(\u0026quot;Test1\u0026quot;, parallelTest1) t.Run(\u0026quot;Test2\u0026quot;, parallelTest2) t.Run(\u0026quot;Test3\u0026quot;, parallelTest3) }) // \u0026lt;tear-down code\u0026gt; }  Main 测试程序有时需要在测试之前或之后做一些额外的设置和清理。并且，测试程序有时需要控制哪些代码运行在主线程。为了满足这些需求和其他的场景，一个测试文件可以包含一个函数：\nfunc TestMain(m *testing.M)  然后，生成的测试会调用 TestMain(m) 而不是直接运行测试。TestMain 在主的 goroutine 运行，且可以做调用 m.Run 前后所需的所有设置和清理。然后，它应该使用 m.Run 的结果调用 OS.Exit。当调用 TestMain 时，flag.Parse 还没有运行。如果 TestMain(包括这些测试包) 依赖命令行标识，应该显式调用 flag.Parse。\n一个简单的 TestMain 的实现：\nfunc TestMain(m *testing.M) { // call flag.Parse() here if TestMain uses flags os.Exit(m.Run()) }  索引 参考\n例子 参考\n子目录    名字 概述     iotest 实现了主要用于 testing 的 Reader 和 Writer   quick 实现了帮助黑盒测试的工具函数    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"2ba7d1a4b1fe66bc92ec62550ecdf5b4","permalink":"https://xueqing.github.io/translation/go-doc/golangpkg/testing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangpkg/testing/","section":"translation","summary":"概述 基准测试 示例函数 跳过测试 子测试项目和子基准测试 Main 索引 例子 子目录 参考 Golang 官网文档 学习。 导入语句：import \u0026quot;testing\u0026quot; 概述 testing 包提供对 Go 包的自动测试。","tags":["golang-pkg"],"title":"testing 包","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"/* Exercise: Web Crawler In this exercise you'll use Go's concurrency features to parallelize a web crawler. Modify the Crawl function to fetch URLs in parallel without fetching the same URL twice. Hint: you can keep a cache of the URLs that have been fetched on a map, but maps alone are not safe for concurrent use! */ package main import ( \u0026quot;fmt\u0026quot; ) type Fetcher interface { // Fetch returns the body of URL and // a slice of URLs found on that page. Fetch(url string) (body string, urls []string, err error) } // Crawl uses fetcher to recursively crawl // pages starting with url, to a maximum of depth. func Crawl(url string, depth int, fetcher Fetcher) { // TODO: Fetch URLs in parallel. // TODO: Don't fetch the same URL twice. // This implementation doesn't do either: if depth \u0026lt;= 0 { return } body, urls, err := fetcher.Fetch(url) if err != nil { fmt.Println(err) return } fmt.Printf(\u0026quot;found: %s %q\\n\u0026quot;, url, body) for _, u := range urls { Crawl(u, depth-1, fetcher) } return } func main() { Crawl(\u0026quot;https://golang.org/\u0026quot;, 4, fetcher) } // fakeFetcher is Fetcher that returns canned results. type fakeFetcher map[string]*fakeResult type fakeResult struct { body string urls []string } func (f fakeFetcher) Fetch(url string) (string, []string, error) { if res, ok := f[url]; ok { return res.body, res.urls, nil } return \u0026quot;\u0026quot;, nil, fmt.Errorf(\u0026quot;not found: %s\u0026quot;, url) } // fetcher is a populated fakeFetcher. var fetcher = fakeFetcher{ \u0026quot;https://golang.org/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;The Go Programming Language\u0026quot;, []string{ \u0026quot;https://golang.org/pkg/\u0026quot;, \u0026quot;https://golang.org/cmd/\u0026quot;, }, }, \u0026quot;https://golang.org/pkg/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;Packages\u0026quot;, []string{ \u0026quot;https://golang.org/\u0026quot;, \u0026quot;https://golang.org/cmd/\u0026quot;, \u0026quot;https://golang.org/pkg/fmt/\u0026quot;, \u0026quot;https://golang.org/pkg/os/\u0026quot;, }, }, \u0026quot;https://golang.org/pkg/fmt/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;Package fmt\u0026quot;, []string{ \u0026quot;https://golang.org/\u0026quot;, \u0026quot;https://golang.org/pkg/\u0026quot;, }, }, \u0026quot;https://golang.org/pkg/os/\u0026quot;: \u0026amp;fakeResult{ \u0026quot;Package os\u0026quot;, []string{ \u0026quot;https://golang.org/\u0026quot;, \u0026quot;https://golang.org/pkg/\u0026quot;, }, }, }  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"ade17c3f46c17c4552a0296296a21864","permalink":"https://xueqing.github.io/translation/go-doc/gotour/web_crawler/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/gotour/web_crawler/","section":"translation","summary":"/* Exercise: Web Crawler In this exercise you'll use Go's concurrency features to parallelize a web crawler. Modify the Crawl function to fetch URLs in parallel without fetching the same URL twice. Hint: you can keep a cache of the URLs that have been fetched on a map, but maps alone are not safe for concurrent use! */ package main import ( \u0026quot;fmt\u0026quot; ) type Fetcher interface { // Fetch returns the body of URL and // a slice of URLs found on that page.","tags":["go-tour"],"title":"Web Crawler","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 官方文档——使用 GDB 调试 Go 代码学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"98c4ea7a553f67e879c4c001f8958943","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/gdb/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/gdb/","section":"translation","summary":"参考 Go 官方文档——使用 GDB 调试 Go 代码学习。","tags":["golang-doc"],"title":"使用 GDB 调试 Go 代码","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍 表驱动测试基础 表驱动的基准测试 使用子测试的表驱动测试 运行指定的测试或基准测试 设置和清理 并行控制 并行运行一组测试 一组并行测试之后的清理 结论 相关文章  参考 Go 博客——使用子测试和子基准测试学习。\n作者：Marcel van Lohuizen 日期：2016/10/3  介绍 在 Go1.7，testing 包引入了一个 Run 方法，作用于 T 和 B 类型，允许创建子测试和子基准测试。子测试和子基准测试的引入使得支持更好的失败处理，从命令行对运行哪个测试的细粒度控制，并行控制，并且经常生成更简单和可维护的代码。\n表驱动测试基础 在深入细节之前，让我们先讨论用 Go 编写测试的常用方式。可以通过对一个测试用例切片的循环实现一系列相关的检查：\nfunc TestTime(t *testing.T) { testCases := []struct { gmt string loc string want string }{ {\u0026quot;12:31\u0026quot;, \u0026quot;Europe/Zuri\u0026quot;, \u0026quot;13:31\u0026quot;}, // incorrect location name {\u0026quot;12:31\u0026quot;, \u0026quot;America/New_York\u0026quot;, \u0026quot;7:31\u0026quot;}, // should be 07:31 {\u0026quot;08:08\u0026quot;, \u0026quot;Australia/Sydney\u0026quot;, \u0026quot;18:08\u0026quot;}, } for _, tc := range testCases { loc, err := time.LoadLocation(tc.loc) if err != nil { t.Fatalf(\u0026quot;could not load location %q\u0026quot;, tc.loc) } gmt, _ := time.Parse(\u0026quot;15:04\u0026quot;, tc.gmt) if got := gmt.In(loc).Format(\u0026quot;15:04\u0026quot;); got != tc.want { t.Errorf(\u0026quot;In(%s, %s) = %s; want %s\u0026quot;, tc.gmt, tc.loc, got, tc.want) } } }  这个方法常备表驱动测试提及。且相比为每个测试重复相同的代码，此方法减少了大量的重复代码，且使得增加测试用例更加直接。\n表驱动的基准测试 在 Go1.7 之前，不能为基准测试使用相同的表驱动方法。一个基准测试测试整个函数的性能，因此遍历基准测试只是将它们作为一个整体测试。\n一个常用的变通方案是定义单独的顶层基准测试，每个基准测试使用不同参数调用一个公共的函数。比如，在 1.7 之前，strconv 包地狱塔 AppendFloat 的基准测试看起来像这样：\nfunc benchmarkAppendFloat(b *testing.B, f float64, fmt byte, prec, bitSize int) { dst := make([]byte, 30) b.ResetTimer() // Overkill here, but for illustrative purposes. for i := 0; i \u0026lt; b.N; i++ { AppendFloat(dst[:0], f, fmt, prec, bitSize) } } func BenchmarkAppendFloatDecimal(b *testing.B) { benchmarkAppendFloat(b, 33909, 'g', -1, 64) } func BenchmarkAppendFloat(b *testing.B) { benchmarkAppendFloat(b, 339.7784, 'g', -1, 64) } func BenchmarkAppendFloatExp(b *testing.B) { benchmarkAppendFloat(b, -5.09e75, 'g', -1, 64) } func BenchmarkAppendFloatNegExp(b *testing.B) { benchmarkAppendFloat(b, -5.11e-95, 'g', -1, 64) } func BenchmarkAppendFloatBig(b *testing.B) { benchmarkAppendFloat(b, 123456789123456789123456789, 'g', -1, 64) } ...  Go1.7 可使用 Run 方法，相同的基准测试现在可以表示为一个顶层的基准测试：\nfunc BenchmarkAppendFloat(b *testing.B) { benchmarks := []struct{ name string float float64 fmt byte prec int bitSize int }{ {\u0026quot;Decimal\u0026quot;, 33909, 'g', -1, 64}, {\u0026quot;Float\u0026quot;, 339.7784, 'g', -1, 64}, {\u0026quot;Exp\u0026quot;, -5.09e75, 'g', -1, 64}, {\u0026quot;NegExp\u0026quot;, -5.11e-95, 'g', -1, 64}, {\u0026quot;Big\u0026quot;, 123456789123456789123456789, 'g', -1, 64}, ... } dst := make([]byte, 30) for _, bm := range benchmarks { b.Run(bm.name, func(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { AppendFloat(dst[:0], bm.float, bm.fmt, bm.prec, bm.bitSize) } }) } }  每次调用 Run 方法创建一个单独的基准测试。调用 Run 方法的闭包的基准测试函数只允许一次且不被测量。\n新代码行数更多，但是更易维护，更易读，且与测试常用的表驱动方法是一致的。此外，现在可以在运行时共享设置代码，同时不再需要重置计时器。\n使用子测试的表驱动测试 Go1.7 也引入了用于创建子测试的 Run 方法。这个测试是使用子测试对之前的例子重新的版本：\nfunc TestTime(t *testing.T) { testCases := []struct { gmt string loc string want string }{ {\u0026quot;12:31\u0026quot;, \u0026quot;Europe/Zuri\u0026quot;, \u0026quot;13:31\u0026quot;}, {\u0026quot;12:31\u0026quot;, \u0026quot;America/New_York\u0026quot;, \u0026quot;7:31\u0026quot;}, {\u0026quot;08:08\u0026quot;, \u0026quot;Australia/Sydney\u0026quot;, \u0026quot;18:08\u0026quot;}, } for _, tc := range testCases { t.Run(fmt.Sprintf(\u0026quot;%s in %s\u0026quot;, tc.gmt, tc.loc), func(t *testing.T) { loc, err := time.LoadLocation(tc.loc) if err != nil { t.Fatal(\u0026quot;could not load location\u0026quot;) } gmt, _ := time.Parse(\u0026quot;15:04\u0026quot;, tc.gmt) if got := gmt.In(loc).Format(\u0026quot;15:04\u0026quot;); got != tc.want { t.Errorf(\u0026quot;got %s; want %s\u0026quot;, got, tc.want) } }) } }  第一件要注意的事情是两个实现的输出不同。原本的实现打印：\n--- FAIL: TestTime (0.00s) time_test.go:62: could not load location \u0026quot;Europe/Zuri\u0026quot;  即使有两个错误，测试执行终止在对 Fatalf 的调用，且第二个测试永远不会运行。\n使用 Run 的实现打印两个错误：\n--- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_Europe/Zuri (0.00s) time_test.go:84: could not load location --- FAIL: TestTime/12:31_in_America/New_York (0.00s) time_test.go:88: got 07:31; want 7:31  Fatal 及其同属函数导致子测试被跳过，但是不会跳过父测试或后续的子测试。\n另外一件要注意的事情是新版本中的错误信息更短。因为子测试的名字唯一标识了一个子测试，因此不再需要在错误信息内部识别该测试。\n使用子测试或子基准测试还有其他的益处，下面的部分会阐明。\n运行指定的测试或基准测试 子测试和子基准测试可以在命令行使用 -run 或 -bench 标识选择。两个标识都接收一个斜线分隔的正则表达式列表，匹配了子测试或子基准测试的完整名字的对应部分。\n子测试或子基准测试的完整名字是一个斜线分隔的列表，包括自身的名字以及所有父测试的名字，从顶层测试开始。名字是顶层测试和基准测试对应的名字，且第一个参数必须是 Run。为了避免显示和解析问题，名字使用下划线替换空格，且忽视不可打印字符。相同的处理适用于传递给 -run 或 -bench 表示的正则表达式。\n一些例子：\n使用欧洲时区运行测试：\n$ go test -run=TestTime/\u0026quot;in Europe\u0026quot; --- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_Europe/Zuri (0.00s) time_test.go:85: could not load location  只运行时间在午后的测试：\n$ go test -run=Time/12:[0-9] -v === RUN TestTime === RUN TestTime/12:31_in_Europe/Zuri === RUN TestTime/12:31_in_America/New_York --- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_Europe/Zuri (0.00s) time_test.go:85: could not load location --- FAIL: TestTime/12:31_in_America/New_York (0.00s) time_test.go:89: got 07:31; want 7:31  可能有点奇怪，使用 -run=TestTime/NewYork 没有匹配任何测试。这是因为出现在位置名字的斜线被当做一个分割符。反之使用：\n$ go test -run=TestTime//New_York --- FAIL: TestTime (0.00s) --- FAIL: TestTime/12:31_in_America/New_York (0.00s) time_test.go:88: got 07:31; want 7:31  注意传递给 -run 的字符串中的 //。时区名字 America/New_York 中的 / 被当做是来自子测试的一个分隔符处理。第一个正则表达式模式 (TestTime) 匹配顶层测试。第二个正则表达式(空字符串)匹配所有，这种情况匹配时间和位置的大洲部。第三部分正则表达式(New_york)匹配位置的城市部分。\n把名字中的斜线当做分隔符允许用户重构测试的层次结构，而不用修改名字。它也简化了避免规则。如果这暴露一个问题的话，用户应该避免名字中的斜线，比如使用下划线替代。\n一个唯一的序列号被增加到不唯一的测试名字末尾。因此如果子测试没有明显的名字结构，可以只传递一个空字符串给 Run，且子测试可以简单地通过序列号识别。\n设置和清理 子测试和自己准测试可用于管理公共的设置和清理代码：\nfunc TestFoo(t *testing.T) { // \u0026lt;setup code\u0026gt; t.Run(\u0026quot;A=1\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;A=2\u0026quot;, func(t *testing.T) { ... }) t.Run(\u0026quot;B=1\u0026quot;, func(t *testing.T) { if !test(foo{B:1}) { t.Fail() } }) // \u0026lt;tear-down code\u0026gt; }  如果任一闭包的子测试运行，设置和清理代码会被允许且最多只运行一次。即使任何子测试调用 Skip、FAIL 或 Fatal 也适用。\n并行控制 子测试支持细粒度控制并行，为了理解如何用这种方式使用子测试，理解并行测试的语法是重要的。\n每个子测试和一个测试函数相关。如果一个测试的测试函数在其 testing.T 实例中调用 Parallel 方法，那么这个测试被称为并行测试。一个并行测试不会和一个顺序测试并发运行，且并行测试的执行被中止直到调用它的测试方法，即父测试返回。-parallel 标识定义了可以并行运行的并行测试的最大数目。\n一个测试会阻塞直到它的测试函数返回且它所有的子测试结束。这意味着顺序测试运行的并行测试会在任何其他一连串的顺序测试运行之前完成。\n这种行为对使用 Run 创建的测试和顶层测试是一样的。事实上，在底层，顶层测试被实现为一个隐藏的主测试的子测试。\n并行运行一组测试 上述语义支持并行运行一组测试，这组测试内部是并行的，但不与其他并行测试并行：\nfunc TestGroupedParallel(t *testing.T) { for _, tc := range testCases { tc := tc // capture range variable t.Run(tc.Name, func(t *testing.T) { t.Parallel() if got := foo(tc.in); got != tc.out { t.Errorf(\u0026quot;got %v; want %v\u0026quot;, got, tc.out) } ... }) } }  外部测试一直到所有通过 Run 启动的并行测试完成之后才会结束。因此，不会有其他并行测试可以和这些并行测试并行运行。\n注意我们需要捕获 range 变量以确保 tc 与正确的实例绑定。\n一组并行测试之后的清理 在上述例子中，我们在开始其他测试之前使用语义等待一组并行测试结束。相同的技术可用于在一组共享公共资源的并行测试之后清理：\nfunc TestTeardownParallel(t *testing.T) { // \u0026lt;setup code\u0026gt; // This Run will not return until its parallel subtests complete. t.Run(\u0026quot;group\u0026quot;, func(t *testing.T) { t.Run(\u0026quot;Test1\u0026quot;, parallelTest1) t.Run(\u0026quot;Test2\u0026quot;, parallelTest2) t.Run(\u0026quot;Test3\u0026quot;, parallelTest3) }) // \u0026lt;tear-down code\u0026gt; }  等待一组并行测试的行为和之前的例子是相同的。\n结论 Go1.7 对子测试和子基准测试的增加允许你用正常的方式编写结构化的测试和基准测试，可以优雅的融入现有的工具。一种思考方式是 testing 包之前的版本有 1 层结构：包级别的测试被组织为一个单独的测试和基准测试的集合。现在这种组织可以递归扩展到这些单独的测试和基准测试。事实上，在实现中，顶层测试和基准测试被作为一个隐藏的主测试和基准测试的子测试和基准测试：这种处理在每一层都是相同的。\n对于测试来说，定义这种结构的能力使能细粒度执行指定的测试用例、共享设置和清理，以及更好地控制测试并行。我们很高兴看到人们发现其他用途。享受它！\n相关文章  Go 可测试的示例函数 关于覆盖的故事  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"3600066dae28c14bcb8c32ad41511f95","permalink":"https://xueqing.github.io/translation/go-doc/blog/subtest/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/blog/subtest/","section":"translation","summary":"介绍 表驱动测试基础 表驱动的基准测试 使用子测试的表驱动测试 运行指定的测试或基准测试 设置和清理 并行控制 并行运行一组测试 一组并行测试之后的清理 结论","tags":["go-blog"],"title":"使用子测试和子基准测试","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 官方文档——关于 Go 命令 学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1af64eac3b38ada122a1e3fc6dddd120","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/articles/go_command/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/articles/go_command/","section":"translation","summary":"参考 Go 官方文档——关于 Go 命令 学习。","tags":["golang-doc"],"title":"关于 Go 命令","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 博客——关于覆盖的故事学习。\n作者：Rob Pike 日期：2013/10/2  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"3a1efa2721d1e3dbc704894b7dd78ed5","permalink":"https://xueqing.github.io/translation/go-doc/blog/cover/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/blog/cover/","section":"translation","summary":"参考 Go 博客——关于覆盖的故事学习。 作者：Rob Pike 日期：2013/10/2","tags":["go-blog"],"title":"关于覆盖的故事","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍 代码组织  概览 工作区 GOPATH 环境变量 导入路径 第一个程序 第一个库 包名  测试 远程包 下一步 获取帮助  参考 Golang 官网文档 学习。\n介绍 此文档演示一个简单的 Go 包的发展，并介绍 go 工具。go 工具是拉取、编译和安装 Go 包和目录的标准方式。\ngo 工具要求你按照指定方式组织你的代码。请仔细阅读此文档。它解释了使用 Go 安装组织和运行的最简单的方式。\n一个类似的解释可参考编写、编译、安装和测试 Go 代码。\n代码组织 概览  Go 开发人员通常保存他们所有的 Go 代码在一个单一的工作区。 一个工作区包含很多版本控制仓库(比如使用 Git 管理)。 每个仓库包含一个或多个包。 每个包由同一目录的一个或多个 Go 源文件组成。 包目录的路径确定了导入路径。  注意这个其他编程环境不同。其他编程环境的每个工程有一个单独的工作区，且工作区和版本控制仓库紧密相关。\n工作区 一个工作区是一个目录层次架构，在其根有两个目录：\n src 包含 Go 源文件，且 bin 包含可执行命令。  go 工具编译和安装二进制到 bin 目录。\nsrc 子目录通常包含多个版本控制仓库(比如 Git 或 Mercurial)，跟踪了一个或多个源包的发展。\n为了让你理解一个工作区实际上的组织，这里有一个例子：\nbin/ hello # command executable outyet # command executable src/ github.com/golang/example/ .git/ # Git repository metadata hello/ hello.go # command source outyet/ main.go # command source main_test.go # test source stringutil/ reverse.go # package source reverse_test.go # test source golang.org/x/image/ .git/ # Git repository metadata bmp/ reader.go # package source writer.go # package source ... (many more repositories and packages omitted) ...  上述树显示一个工作区有两个仓库(example 和 image)。example 仓库包含两个命令(hello 和 outyet)和一个库(stringutil)。image 仓库包含 bmp 包和其他的包。\n一个普通的工作区包含许多源仓库，这些仓库包含一些包和命令。大多数 Go 开发人员保存他们所有的 Go 源代码和依赖在一个单一的工作区。\n注意不应使用符号链接链接文件或目录到你的工作区。\n命令和库由不同的源包编译。我们之后会讨论区别。\nGOPATH 环境变量 GOPATH 环境变量指定你的工作区位置。默认是你的主目录下名字为 go 的目录，因此在 Unix 上是 $HOME/go，Plan9 上是 $home/go，Windows 上是 %USERPROFILE%\\go (通常是 C:\\Users\\YourName\\go)。\n如果你想要在不同的位置工作，你需要设置 GOPATH 到那个目录。(另外一个常用的设置是设置 GOPATH=$HOME)。注意 GOPATH 一定不能和你的 Go 安装路径相同。\n命令 go env GOPATH 打印当前实际的 GOPATH；如果该环境变量没有设置，它会打印默认的位置。\n方便起见，增加工作区的 bin 子目录到你的 PATH：\nexport PATH=$PATH:$(go env GOPATH)/bin  简洁起见，这个脚本在文档的其他部分使用 $GOPATH 而不是 $(go env GOPATH)。如果你还未设置 GOPATH，为了使得所写的脚本可运行，可以使用 $HOME/go 替换这些命令或者运行\nexport GOPATH=$(go env GOPATH)  要了解更多关于 GOPATH 环境变量，参考 go help gopath。\n要使用自定义的工作区位置，设置 GOPATH 环境变量。\n导入路径 导入路径是一个唯一的标识一个包的字符串。一个包的导入路径对应它在工作区或远程仓库内的位置(下面会解释)。\n标准库的包使用短的导入路径类似 “fmt” 和 “net/http”。对于你自己的包，你必须选择一个基础路径，该路径不太可能与将来增加的标准库或其他外部库冲突。\n如果你将代码保存在其他地方的源仓库，那么你应该使用该源码库的根作为你的基础路径。比如，如果你有一个 Github 账户位于 github.com/user，那么 github.com/user 应该是你的基础路径。\n注意在你可以编译代码之前，你不需要发布你的代码到一个远程仓库。这只是一个组织代码的好习惯以便某天你会发布它。实际上你可以选择任意的路径名字，只要它对于标准库和更大的 Go 生态系统是唯一的。\n我们将会使用 github.com/user 作为我们的基础路径。在你的工作区内新建一个目录来保存源码：\nmkdir -p $GOPATH/src/github.com/user  第一个程序 为了编译和运行一个简单的程序，首先选择一个包路径(我们将会使用 github.com/user/hello)，并且在你的工作区内创建一个对应的包目录：\nmkdir $GOPATH/src/github.com/user/hello  接下来，在目录内部创建一个名为 hello.go 的文件，包含下面的 Go 代码。\npackage main import \u0026quot;fmt\u0026quot; func main() { fmt.Println(\u0026quot;Hello, world.\u0026quot;) }  现在你可以使用 go 工具编译和安装这个程序：\ngo install github.com/user/hello  注意你可以在你的系统任何地方运行这个命令。go 工具通过在 GOPATH 指定的工作区内查找 github.com/user/hello 包找到源码。\n如果你从包目录运行 go install，你也可以忽视包路径：\ncd $GOPATH/src/github.com/user/hello go install  这个命令编译 hello 命令，生成可执行的二进制文件。它接着安装该二进制文件到工作区的 bin 目录，安装的文件名字是 hello(或者在 Windows 上是 hello.exe)。在我们的例子中，该文件将会是 $GOPATH/bin/hello，也就是 $HOME/go/bin/hello。\n发生错误时，go 工具只会打印输出。因此如果这些命令没有生成输出，那么这些命令已经被正确执行。\n你现在可以通过在命令行输入程序的完整路径来运行它：\n$ $GOPATH/bin/hello Hello, world.  或者，因为你已经添加 $GOPATH/bin 到你的 PATH，只需要输入二进制文件的名字：\n$ hello Hello, world.  如果你在使用一个源码控制系统，现在将是一个好的时机来初始化一个仓库，增加这些文件，并提交你的第一次修改。重申一次，这一步是可选的：你不必使用源码控制来写 Go 代码。\ncd $GOPATH/src/github.com/user/hello git init git add hello.go git commit -m \u0026quot;initial commit\u0026quot;  推送代码到远程仓库留作读者的一个练习。\n第一个库 让我们编写一个库，并在 hello 程序使用它。\n重申一次，第一步是选择一个包路径(我们将会使用 github.com/user/stringutil)并创建一个包目录：\nmkdir $GOPATH/src/github.com/user/stringutil  接下来，在该目录创建一个名为 reverse.go 的文件，包含下面的内容。\n// Package stringutil contains utility functions for working with strings. package stringutil // Reverse returns its argument string reversed rune-wise left to right. func Reverse(s string) string { r := []rune(s) for i, j := 0, len(r)-1; i \u0026lt; len(r)/2; i, j = i+1, j-1 { r[i], r[j] = r[j], r[i] } return string(r) }  现在，使用 go build 编译测试这个包：\ngo build github.com/user/stringutil  或者，如果你正在包的源目录，只需要：\ngo build  这不会生成一个输出文件。反之，它将编译的包保存在本地的编译缓存。\n在确认编译 stringutil 包之后，修改你原始的 hello.go(在 $GOPATH/src/github.com/user/hello)，使用下面的内容：\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;github.com/user/stringutil\u0026quot; ) func main() { fmt.Println(stringutil.Reverse(\u0026quot;!oG ,olleH\u0026quot;)) }  安装 hello 程序：\ngo install github.com/user/hello  运行这个程序的新版本，你应该看到一个新的、翻转的消息：\n$ hello Hello, Go!  上述步骤之后，你的工作区应该看起来是下面的结构：\nbin/ hello # command executable src/ github.com/user/ hello/ hello.go # command source stringutil/ reverse.go # package source  包名 Go 源文件的第一个语句必须是\npackage name  其中，name 是用于导入包的默认名字。(包内的所有文件必须使用这个名字。)\nGo 的管理是包名是导入路径的最后一个元素：按照 “crypto/rot13” 导入的包名应该命名为 rot13。\n可执行的命令必须总使用 package main。\n不需要包名在链接所有包成一个单一的二进制文件时是唯一的，只要它的导入路径(完整的文件名)是唯一的。\n查看实效 Go 编程了解更多关于 Go 的命名惯例。\n测试 Go 有一个轻量级的测试框架，由 go test 命令和 testing 包组成。\n你可以通过新建一个以 _test.go 结尾的文件编写测试，文件包含名字为 TestXXX，签名为 func (t *testing.T) 的函数。测试框架运行每个像这样的函数；如果函数调用一个失败函数，如 t.Error 或 t.Fail，认为该测试失败。\n向 stringutil 包增加一个测试，新建文件 $GOPATH/src/github.com/user/stringutil/reverse_test.go，包含下面的代码\npackage stringutil import \u0026quot;testing\u0026quot; func TestReverse(t *testing.T) { cases := []struct { in, want string }{ {\u0026quot;Hello, world\u0026quot;, \u0026quot;dlrow ,olleH\u0026quot;}, {\u0026quot;Hello, 世界\u0026quot;, \u0026quot;界世 ,olleH\u0026quot;}, {\u0026quot;\u0026quot;, \u0026quot;\u0026quot;}, } for _, c := range cases { got := Reverse(c.in) if got != c.want { t.Errorf(\u0026quot;Reverse(%q) == %q, want %q\u0026quot;, c.in, got, c.want) } } }  然后使用 go test 运行测试：\n$ go test github.com/user/stringutil ok github.com/user/stringutil 0.165s  和平时一样，如果你在包目录运行 go 工具，可以忽视包路径\n$ go test ok github.com/user/stringutil 0.165s  运行 go help test 并查看 testing 包文档 获取更多信息。\n远程包 导入路径可以描述如何使用版本控制系统(如 Git 或 Mercurial)获取包源码。go 工具使用这个属性从远程仓库自动拉取代码。比如，文档中描述的例子也保存在 Github 托管的 Git 仓库。如果你在包的导入路径包含这个仓库的 URL，go get 会自动拉取、编译和运行它：\ngo get github.com/golang/example/hello $GOPATH/bin/hello # 输出 Hello, Go examples!  如果指定的包没有出现在工作区，go get 会放置在 GOPATH 指定的第一个工作区。(如果包以及存在，go get 会跳过远程拉取，行为类似于 go install。)\n在执行上述 go get 命令只会，工作区目录树应该看起来是下面的结构：\nbin/ hello # command executable src/ github.com/golang/example/ .git/ # Git repository metadata hello/ hello.go # command source stringutil/ reverse.go # package source reverse_test.go # test source github.com/user/ hello/ hello.go # command source stringutil/ reverse.go # package source reverse_test.go # test source  Github 托管的 hello 命令依赖相同仓库的 stringutil 包。hello.go 文件中的导入使用相同的导入路径惯例，因此 go get 命令也可以定位和安装依赖依赖包。\nimport \u0026quot;github.com/golang/example/stringutil\u0026quot;  此惯例是使得你的 Go 包被其他人可用的最简单的方式。Go 维基 和 go 官方文档 提供了外部 Go 过程的列表。\n要获取更多关于借助 go 工具使用远程仓库的信息，查看远程导入路径。\n下一步 订阅 golang 宣传 邮件列表，接受发行新的稳定版本 Go 的通知。\n查看实效 Go 编程了解更多关于编写清楚、惯用的 Go 代码的建议。\n访问 Go 语言之旅 学习语言规则。\n访问官方文档查看关于 Go 语言及其库和工具的全面深入的文章。\n获取帮助 需要实时帮助，询问有帮助的 gopher ，它位于 FreeNode IRC 服务的 #go-nuts。\n关于 Go 语言讨论的官方邮件列表在 Go Nuts 群组。\n使用 Go issue 跟踪报告错误。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"4a6169ea0d0c803071b8305d8d7d4164","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/code/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/code/","section":"translation","summary":"介绍 代码组织 概览 工作区 GOPATH 环境变量 导入路径 第一个程序 第一个库 包名 测试 远程包 下一步 获取帮助 参考 Golang 官网文档 学习。 介绍 此文档演示一个简单的 Go 包的发展","tags":["golang-doc"],"title":"如何编写 Go 代码","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  内容  参考 Go 维基官网——学习测试学习。\n原网页由 Evgeny Vereshchagin 在 2019/1/29 编辑。第 4 次修订。\n内容 这个页面链接到关于 Go 测试的资源。\n阅读如何编写 Go 代码，尤其是测试 学习测试包 阅读为什么 Go 没有断言 阅读我最喜欢的测试辅助函数在哪里 观看测试技巧 阅读表驱动测试 阅读使用子测试项目和子基准测试  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"fb46ad8ebcb68fe6f32ce4dac309cabe","permalink":"https://xueqing.github.io/translation/go-doc/wiki/learn_testing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/learn_testing/","section":"translation","summary":"内容 参考 Go 维基官网——学习测试学习。 原网页由 Evgeny Vereshchagin 在 2019/1/29 编辑。第 4 次修订。 内容 这个页面链接到关于 Go 测试的资源。 阅读如何编写 Go 代码，尤其是测试 学习","tags":["go-doc-wiki"],"title":"学习测试","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍  例子  格式化 注释 名字  包名 getter 接口名 驼峰  分号 控制结构  if 重新声明和重新赋值  函数  多返回值 命名结果参数 defer  数据  使用 new 分配 构造函数和复合字面量 使用 make 分配 数组 切片 二维切片 映射 打印 追加  初始化  常数   参考 Golang 官网文档——Effective Go 学习。\n介绍 Go 是一门新语言。虽然它从现有语言借鉴了想法，但是它有独特的属性使得实效的 Go 程序和使用其他语言编写的程序特点不同。直接将一个 C++ 或 Java 程序翻译成 Go 不太可能生成令人满意的结果——Java 程序是用 Java 写的，而不是 Go。另一方面，从 Go 的角度思考一个问题可能产生一个成功的但是完全不同的程序。换句话说，要写好 Go，理解它的特性和惯用语是很重要的。而且，了解用 Go 编程已有的惯例，比如命名、格式化、程序结构等等也很重要，以便你编写的程序容易被其他 Go 开发人员理解。\n此文档给出关于编写清晰、惯用的 Go 代码的建议。它增补了语言规范、Go 语言之旅以及如何编写 Go 代码，所有这些你应该先阅读。\n例子 Go 包源码用于作为和核心库，也作为如何使用语言的例子。此外，很多包包含可工作的、自包含的可执行例子，你可以直接从 golang.org 网站运行，比如这个网站(如果需要，点击单词 “Example” 打开它)。如果你对于如何处理一个问题或一些东西是如何实现的有疑问，这个库中的文档、代码和例子可以给出答案、思想和背景。\n格式化 格式化问题是最有争议却最不重要的。人们可以选择不同的格式风格，但是如果每个人遵循相同的风格，那么人们不需要且可以花费更少的时间在这个问题上是更好的。问题是如何在没有一个长长的风格规范指南的情况下实现这个想法。\n对于 Go，我们使用了一种特别的方法且交由机器注意大多数格式化问题。gofmt 程序(也可以通过 go fmt 使用，它作用于包级别而不是源文件级别)读入一个 Go 程序并且以标准的风格缩进、垂直对齐、保持或者需要的话重新格式化注释，然后发出源文件。如果你想要知道如何处理一些新的格式场景，运行 gofmt；如果答案看起来不正确，重新组织你的程序(或提出一个 gofmt 的错误)，不要绕过这个问题。\n作为一个例子，不必花时间对结构体的域做注释对齐。gofmt 将会为你做这些。给出一个声明\ntype T struct { name string // 对象的名字 value int // 对象的值 }  gofmt 会列对齐：\ntype T struct { name string // 对象的名字 value int // 对象的值 }  标准库中所有的 Go 代码都已经使用 gofmt 格式化过。\n还有一些格式化细节。非常简洁：\n缩进 我们使用 tab 键缩进，且 gofmt 默认使用 tab 键。只在必要的时候使用空格。 行长度 Go 没有行长度限制。不要担心溢出穿孔卡片。如果感觉一行太长，包裹它并使用额外的 tab 键缩进 括号 Go 比 C 和 Java 需要更少的括号：控制结构 (if/for/switch) 的语法没有括号。同时，操作符优先级层次更短更清晰。 因此不像其他语言， `x\u0026lt;\u0026lt;8 + y\u0026lt;\u0026lt;16` 就是空格暗示的含义。  注释 Go 提供 C-风格的块注释 /**/ 和 C++-风格的行注释 //。行注释是常态；块注释大多出现在包注释，但是在一个表达式内部或禁用大段代码是有用的。\ngodoc 程序，也是 web 服务器，处理 Go 源文件以提取关于包内容的文档。在顶层声明之前出现的注释，中间没有新行，和声明一起提取作为该元素的解释文本。这些注释的本性和风格决定了 godoc 生成的文档的质量。\n每个包应该有一个包注释，即 package 语句之前的一个块注释。对于多文件的包，包注释只需要出现在一个文件，且每个文件都可以看到。包注释应该介绍包并提供和包有关的信息作为一个整体。它会先出现在 godoc 页面，并且应该设置后面的详细文档。\n/* 包 regexp 实现了正则表达式的一个简单库。 接收正则表达式的语法是: 正则表达式: 连接 { '|' 连接 } 连接: { 闭包 } 闭包: 项 [ '*' | '+' | '?' ] 项: '^' '$' '.' 字符 '[' [ '^' ] 字符范围 ']' '(' 正则表达式 ')' */ package regexp  如果是一个简单包，包注释可以是简洁的。\n// 包 path 实现了功能代码，用于操作斜线分隔的文件名路径。  注释不需要额外的格式比如一行星号。生成的输出可能不能显式为固定宽度的字体，因此不要依赖空格对齐——godoc 像 gofmt 一样，会注意对齐问题。注释是无解释的普通文本，因此 HTML 和其他的注解，比如 _this_，会逐字重复，不应该使用。godoc 会做的一个调整是按固定宽度的字体显示缩进文本，适用于代码片段。fmt 包对包注释的使用恰到好处。\n视上下文而定，godoc 甚至可能不会重新格式化注释，因此确保他们直接看起来是格式好的：使用正确的拼写、标点符号和句子结构，折叠长行等等。\n在包内部，任何紧紧出现在顶层声明之前的注释作为该声明的一个文档注释。程序中每个导出的(大写开头的)名字应该有一个文档注释。\n文档注释最好是完整的句子，允许不同的自动化显示。第一个句子应该是一个总结句，以声明的名字开头。\n// Compile 解析一个正则表达式，且成功时返回一个可用于匹配文本的 Regexp 对象。 func Compile(str string) (*Regexp, error) {  如果每个文档注释以描述的元素名字开头，你可以使用 go 工具的 doc 子命令并通过 grep 运行输出。设想你不能急的 “Compile” 名字但是正在查找正则表达式的解析函数，因此你运行命令：\ngo doc -all regexp | grep -i parse  如果包内所有的文档注释以“这个函数……”开头，grep 不会帮助你记得那个名字。但是因为包的每个文档注释以名字开始，你会看到类似下面的内容，这会回忆起你正在寻找的单词。\n$ go doc -all regexp | grep -i parse Compile parses a regular expression and returns, if successful, a Regexp MustCompile is like Compile but panics if the expression cannot be parsed. parsed. It simplifies safe initialization of global variables holding  Go 的声明语法允许分组声明。一个单一的文档注释可以介绍一组相关的常量或变量。因为显示了整个声明，这样的注释通常是敷衍了事的。\n// 解析表达式失败时返回的错误代码。 var ( ErrInternal = errors.New(\u0026quot;regexp: internal error\u0026quot;) ErrUnmatchedLpar = errors.New(\u0026quot;regexp: unmatched '('\u0026quot;) ErrUnmatchedRpar = errors.New(\u0026quot;regexp: unmatched ')'\u0026quot;) ... )  分组也可以指示元素之间的关系，比如被一个所保护的变量集合的事实。\nvar ( countLock sync.Mutex inputCount uint32 outputCount uint32 errorCount uint32 )  名字 Go 中的名字和其他语言中的一样重要。它们甚至有语义影响：一个名字在包外的可见性取决于它的第一个字母是否是大写。因此值得花费一些时间讨论 Go 编程中的命名惯例。\n包名 当导入一个包时，包名成为这些内容的一个访问器。在 import \u0026quot;bytes\u0026quot; 之后，导入包可以讨论 bytes.buffer。每个使用该包的人可以使用相同的名字来引用包内容是有帮助的，这意味着包名应该是好的：短、简明、引起共鸣的。按照惯例，包使用小写的、单一单词的名字；不应该需要使用下划线或驼峰。Err 就是简洁的，因为每个人使用你的包都会输入那个名字。并且不予担心与先前的冲突。包名只是导入的默认名字；它不需要在所有源码范围内唯一，并且在极少冲突的情况下，导入包可选择一个不同的名字在局部使用。无论如何，混淆是稀少的，因为这个导入的文件名只决定正在使用的包。\n另外一个惯例是包名是源路径的基础名；在 src/encoding/base64 中的包作为 “encoding/base64” 导入，但名字是 base64，而不是 encoding_base64 或者 encodingBase64。\n包的导入者将会使用包名来引用它的内容，因此包中导出的名字可使用这个事实来避免停顿。(不要使用 import . 符号，这可以简化必须在被测试包之外的测试，但应该被避免。)比如， bufio 包中的带缓冲的 reader 类型叫做 Reader，而不是 BufReader，因为使用者看到的是 bufio.Reader，这是一个更加清晰简洁的名字。此外，因为导入的实体总是用包名处理，bufio.Reader 和 io.Reader 不会冲突。类似的，生成 ring.Ring 实例的函数——这是 Go 中构造函数的定义——通常会使用 NewRing 调用，但是因为 Ring 是这个包导出的唯一类型，且这个包叫做 ring，这个函数只用 New 调用，这个包的使用者看到的是 ring.New。使用包结构来帮助你选择好名字。\n另外一个简单的例子是 once.Do；once.Do(setup) 读着不错，并且不会被写做 once.DoOrWaitUntilDone(setup) 而有改善。长名字不会自动使得东西更易读。一个有用的文档注释通常比一个特别长的名字更有价值。\ngetter Go 不提供对 getter 和 setter 的自动支持。自己提供 getter 和 setter 是没有问题的，且通常这样做事合适的。但是将 Get 放在 getter 名字中既不是惯例也非必要的。如果你有一个域叫 owner(小写的，不导出)，它的 getter 方法应叫做 Owner(大写，导出的)，而不是 GetOwner。使用大写名字导出可以区分域名和方法名。如果有必要，一个 setter 方法可能叫做 SetOwner。两个名字实际上也是易读的：\nowner := obj.Owner() if owner != user { obj.SetOwner(user) }  接口名 按照惯例，一个方法的接口用方法名和一个 -er 后缀或类似的修改器命名，用以构造一个代理名词：Reader，Writer，Formatter，CloseNotifier 等。\n有许多类似的名字，且尊重这些名字及其捕获的函数名是富有成效的，Read，Write，Close，Flush，String 等等有规范的签名和含义。为了避免混淆，除非方法具有相同的签名和含义，不要使用上述这些名字给方法命名。相反地，如果你的类型实现的方法与一个熟悉的类型的方法有相同的含义，使用这个相同的名字和签名；将你的字符串转换方法命名为 String 而不是 ToString。\n驼峰 最后，Go 的惯例是使用 MixedCaps 或 mixedCaps 而不是下划线来写多单词的名字。\n分号 类似 C，Go 规范的语法使用分号来终止一个语句，但是和 C 不同的是，这些分号不会出现在源文件。反之，词法分析器使用一个简单的规则在扫描时自动插入分号，因此输入文本可免除大部分分号。\n规则如下。如果新行之前的最后一个符号是一个标识符(包括像 int 和 float64 的单词)，一个基本字面量，比如一个数字、字符串常量，或者下面的一个符号\nbreak continue fallthrough return ++ -- ) }  词法分析器总是在这个符号之后插入一个分号。这可以概括为，“如果在一个可以结束一句话的符号之后有一个新行，插入一个分号”。\n紧挨着在一个右大括号之前出现的分号也可以忽略，因此一个类似下面的语句不需要分号：\ngo func() {for { dts \u0026lt;- \u0026lt;- src }} ()  习惯上，Go 程序只在类似于 for 循环子句中有分号，用于分隔初始化、条件和连续元素。如果你在一行中写多个语句，也需要分号来分隔语句。\n插入分号规则的一个结果是你不能将一个控制结构(if/for/switch/select)的左大括号放在下一行。如果你这样做，会在一个大括号之前插入分号，这会导致不想出现的影响。像这样编写代码：\nif i \u0026lt; f() { g() }  不要像这样：\nif i \u0026lt; f() // 错误! { // 错误! g() }  控制结构 Go 的控制结构和 C 的控制结构相关，但是很不相同。Go 没有 do 或 while 循环，只有一个稍微普遍的 for；switch 更加灵活；if 和 switch 接受一个可选的类似 for 中的初始化语句；break 和 continue 语句使用一个可选的标签来识别从哪里跳出或继续循环；Go 也有新的控制结构，包括 type switch 和多向通讯复用器 select。语法也有一点不同：Go 没有小括号，且控制结构体必须使用大括号分隔。\nif 在 Go 中，一个简单的 if 看起来像这样：\nif x \u0026gt; 0 { return y }  强制的大括号鼓励将一个简单的 if 语句分为多行。无论如何，这样编写是一个好的风格，尤其是当代码体包含一个控制语句，比如 return 或 break。\n因为 if 和 switch 接受一个初始化语句，常见的是用于设置一个局部变量：\nif err := file.Chmod(0664); err != nil { log.Print(err) return err }  在 Go 的库中，你会发现当一个 if 没有流入下一句——即代码体以 break、continue、goto 或 return 结束——会忽略不需要的 else。\nf, err := os.Open(name) if err != nil { return err } codeUsing(f)  这是一个常见情形的例子，即代码必须防止一系列错误条件。如果成功的控制流沿着页面向下，而错误出现的时候消除它们时，代码阅读体验更好。因为错误情况倾向于以 return 语句结束，生成的diamante不需要 else 语句。\nf, err := os.Open(name) if err != nil { return err } d, err := f.Stat() if err != nil { f.Close() return err } codeUsing(f, d)  重新声明和重新赋值 函数 多返回值 Go 其中一个非凡的特性时函数和方法可以返回多个值。这个性质可用于改善 C 程序中的一些笨拙的写法：in-band 错误返回类似 -1 的值表示错误码并修改通过地址传递的参数。\n在 C 语言，使用一个负的计数器标记一个写入错误，且错误码隐藏在一个不固定位置。在 Go 语言，Write 可以返回一个计数器和一个错误：“是的，你写了一部分但非全部的字节，因为你已经填满了设备”。os 包中作用于文件的 Write 方法签名：\nfunc (file *File) Write(b []byte) (n int, err error)  且如文档所说，当 n 不等于 b 时这个方法返回写入的字节数和一个非空的错误。这是常见的风格；查看错误处理部分获得更多例子。\n一个类似的方法不需要传递一个指针给返回值来模拟一个引用参数。下面是一个简单的函数，从一个字节切片的某个位置起捕获一个数字，返回该数字和下一个位置。\nfunc nextInt(b []byte, i int) (int, int) { for ; i \u0026lt; len(b) \u0026amp;\u0026amp; !isDigit(b[i]); i++ { } x := 0 for ; i \u0026lt; len(b) \u0026amp;\u0026amp; isDigit(b[i]); i++ { x = x*10 + int(b[i]) - '0' } return x, i }  你可以使用这个方法像下面这样来扫描一个输入切片 b 的数字：\nfor i := 0; i \u0026lt; len(b); { x, i = nextInt(b, i) fmt.Println(x) }  命名结果参数 Go 函数的返回或结果“参数”可以指定名字并作为普通变量使用，就像使用传入参数。当函数开始时，命名的参数被初始化对应类型的零值；如果函数执行一个不带参数的 return 语句，返回参数的当前值被作为返回值。\n名字不是必须的，但是名字可以使得代码更加简短清晰：名字即是文档。如果我们将 nextInt 的结果命名，很显然返回的 int 含义。\nfunc nextInt(b []byte, pos int) (value, nextPos int) {  因为命名的结果会被初始化且绑定在一个简单的 return，它们可以既简单又清晰。下面是 oi.ReadFull 使用命名结果良好的版本：\nfunc ReadFull(r Reader, buf []byte) (n int, err error) { for len(buf) \u0026gt; 0 \u0026amp;\u0026amp; err == nil { var nr int nr, err = r.Read(buf) n += nr buf = buf[nr:] } return }  defer Go 的 defer 语句安排执行 defer 的函数返回之前立即运行一个函数调用(即推迟的函数)。这是一个处理一些场景特别而高效的方式，比如无论函数使用哪条路径返回都必须释放的资源。经典的例子是解锁一个互斥锁或关闭一个文件。\n// Contents 将文件内容作为字符串返回。 func Contents(filename string) (string, error) { f, err := os.Open(filename) if err != nil { return \u0026quot;\u0026quot;, err } defer f.Close() // 函数结束时会运行 f.Close。 var result []byte buf := make([]byte, 100) for { n, err := f.Read(buf[0:]) result = append(result, buf[0:n]...) // 后面会讨论 append。 if err != nil { if err == io.EOF { break } return \u0026quot;\u0026quot;, err // 如果在这里返回，会关闭 f。 } } return string(result), nil // 如果在这里返回，会关闭 f。 }  推迟一个类似于 Close 的函数调用有两个优点。其一，它保证你永远不会忘记关闭一个文件，如果你之后编辑这个函数增加一个新的返回路径，这是很容易犯的一个错误。其二，它意味着关闭挨着打开操作，这比放在函数末尾更加清晰。\n推迟的函数参数(当函数是一个方法时还包括接收者)在执行 defer 时计算值，而不是执行调用时计算。除了避免担心在函数执行时修改变量值，这还意味着一个单一的推迟调用可以推迟多个函数执行。这里有一个丑陋的示例。\nfor i := 0; i \u0026lt; 5; i++ { defer fmt.Printf(\u0026quot;%d \u0026quot;, i) }  推迟的函数按照 LIFO (后进先出)的顺序执行，因此上述代码函数返回时，会打印“ 4 3 2 1 0”。一个更加合乎情理的例子是使用一个简单的方式来跟踪程序的函数执行。我们可以写一些像这样的简单的跟踪代码：\nfunc trace(s string) { fmt.Println(\u0026quot;entering:\u0026quot;, s) } func untrace(s string) { fmt.Println(\u0026quot;leaving:\u0026quot;, s) } // 像这样使用它们: func a() { trace(\u0026quot;a\u0026quot;) defer untrace(\u0026quot;a\u0026quot;) // 做一些事情.... }  我们可以利用延迟函数的参数在执行 defer 时计算这一事实做的更好。跟踪代码可以设置不跟踪代码的参数。下面的例子\nfunc trace(s string) string { fmt.Println(\u0026quot;entering:\u0026quot;, s) return s } func un(s string) { fmt.Println(\u0026quot;leaving:\u0026quot;, s) } func a() { defer un(trace(\u0026quot;a\u0026quot;)) fmt.Println(\u0026quot;in a\u0026quot;) } func b() { defer un(trace(\u0026quot;b\u0026quot;)) fmt.Println(\u0026quot;in b\u0026quot;) a() } func main() { b() }  打印\nentering: b in b entering: a in a leaving: a leaving: b  对于习惯块级别资源管理的其他语言的编程人员，defer 可能看起来怪异的，但是它最有趣且强大的应用正来自它不是块级别而是函数级别的事实。在 panic 和 recover 部分，我们会看到另一个可能使用 defer 的例子。\n数据 使用 new 分配 Go 有两种分配原语，即内置函数 new 和 make。它们做了不同的事情且适用于不同类型，这可能有点难以理解，但是规则很简单。我们首先讨论 new。它是一个分配内存的内置函数，但是和一些其他语言的同名函数不同，它不会初始化内存，它只是将内存置零。也就是说，new(T) 为类型 T 的新条目分配置零的存储，并返回存储地址(值为类型 T*)。在 Go 的术语中， 它返回一个指针指向一个新分配的类型 T 的零值。\n因为 new 返回的内存是置零的，当将你的数据结构设计为每个类型的零值都可以直接使用不需要进一步初始化，在安排的时候是很有用的。这意味着数据结构的使用者可以使用 new 创建一个对象并正常工作。比如，bytes.Buffer 的文档声明“ Buffer 的零值是一个就绪的空缓冲”。类似的，sync.Mutex 没有一个显式的构造函数或 Init 方法。反之，sync.Mutex 的零值被定义为一个未上锁的互斥锁。\n“零值是有用的”这一属性可以传递。考虑这个类型声明：\ntype SyncedBuffer struct { lock sync.Mutex buffer bytes.Buffer }  SyncedBuffer 类型的值也是分配或声明时就绪的。在下一个片段中，p 和 v 都可以正确工作而不用进一步安排。\np := new(SyncedBuffer) // *SyncedBuffer 类型 var v SyncedBuffer // SyncedBuffer 类型  构造函数和复合字面量 有时候零值不够好，且需要一个初始化构造函数，正如下面从 os 包衍生的一个例子：\nfunc NewFile(fd int, name string) *File { if fd \u0026lt; 0 { return nil } f := new(File) f.fd = fd f.name = name f.dirinfo = nil f.nepipe = 0 return f }  这里有很多模板式代码。我们可以使用一个“复合字面量”来简化代码。“复合字面量”是一个表达式，它在每次求值时创建一个新的实例。\nfunc NewFile(fd int, name string) *File { if fd \u0026lt; 0 { return nil } f := File{fd, name, nil, 0} return \u0026amp;f }  注意，和 C 不同，返回一个局部变量的地址是完全可以的；和变量相关的存储在函数返回时仍存在。事实上，使用复合字面量的地址在每次求值时分配一个新的实例，因此我们可以合并后面两行代码：\nreturn \u0026amp;File{fd, name, nil, 0}  复合字面量的域按顺序放置且必须都要出现。然而，通过显式给域打像 field:value 的标签，初始化列表可以按任何顺序出现，且缺失的域会分别使用对应的零值。因此我们可以写\nreturn \u0026amp;File{fd: fd, name: name}  作为一个限制性场景，如果一个复合字面量不包含任何域，它会为类型创建零值。表达式 new(File) 和 \u0026amp;File{} 是等价的。\n复合字面量也可用于创建数组、切片和映射，使用索引或合适的键给域打标签，在这些例子中，无论 Enone、Eio 和 Einval 的值是什么，只要它们是唯一的，初始化器都可以工作。\na := [...]string {Enone: \u0026quot;no error\u0026quot;, Eio: \u0026quot;Eio\u0026quot;, Einval: \u0026quot;invalid argument\u0026quot;} s := []string {Enone: \u0026quot;no error\u0026quot;, Eio: \u0026quot;Eio\u0026quot;, Einval: \u0026quot;invalid argument\u0026quot;} m := map[int]string{Enone: \u0026quot;no error\u0026quot;, Eio: \u0026quot;Eio\u0026quot;, Einval: \u0026quot;invalid argument\u0026quot;}  使用 make 分配 数组 切片 二维切片 映射 打印 追加 初始化 常数 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"6ccdeadec8efbe462465546d801c9aa7","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/effective_go/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/effective_go/","section":"translation","summary":"介绍 例子 格式化 注释 名字 包名 getter 接口名 驼峰 分号 控制结构 if 重新声明和重新赋值 函数 多返回值 命名结果参数 defer 数据 使用 new 分配 构造函数和复合字面量 使用 make 分配","tags":["golang-doc"],"title":"实效 Go 编程","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  起源 用法 设计  为什么 Go 没有断言  类型 值 编写代码 指针和分配 并发 函数和方法 控制流 包和测试 实现  我最喜欢的测试辅助函数在哪里  性能 从 C 的改变  参考 Go 官方文档——常见问题解答学习。\n起源 用法 设计 为什么 Go 没有断言 Go 不提供断言。他们无疑是方便的，但是我们已有的经验是开发人员依赖断言避免思考合适的错误处理和报告。合适的错误处理意味着服务在一个非严重的错误之后继续操作而不是崩溃。合适的错误处理意味着错误是直接的、扼要的，使开发人员免于解释大量的崩溃跟踪。当看到错误的开发人员不熟悉代码，错误的准确尤为重要。\n我们明白这是一个争论点。Go 语言和库有很多不同于现代实践的地方，只是因为我们感觉有时候值得尝试一个不同的方法。\n类型 值 编写代码 指针和分配 并发 函数和方法 控制流 包和测试 实现 我最喜欢的测试辅助函数在哪里 Go 的标准 testing 包使得易于编写单元测试，但是它缺少其他语言测试框架提供的一些特性，比如断言函数。此文档前面的部分解释了为什么 Go 没有断言，以及在测试中使用断言的相同论点。合适的错误处理意味着使得其他测试在一个测试失败时继续运行，以便调试错误的人员可以得到一个错误的完整信息。对于一个测试来说，比起报告 isPrime 对于 2 的答案是错误的并因此不再运行更多测试，报告 isPrime 对 2、3、5、7 (或 2、4、8、16) 给出错误的答案是更加有用的。触发测试错误的开发人员可能不熟悉失败的代码。在测试失败时，花费时间编写一个好的错误消息是值得的。\n相关的一点是测试框架趋向于发展成为他们自己的微语言，包括条件、控制和打印机制，但是 Go 已经有所有这些功能了；为什么要创建他们？我们更愿意用 Go 编写测试；它是一门学习更少的语言，而且这个方法保持测试是直截了当易于理解的。\n如果编写好的错误所需的额外代码数量看起来是重复的、巨大的，那么表驱动测试可能效果更好。表驱动是迭代遍历定义在一个数据结构(Go 对于数据结构字面量有极好的支持)的输入和输出列表。编写一个好的测试和错误信息的工作在测试拥挤很多时将会被分摊。标准的 Go 库有许多说明示例，比如 fmt 包的格式化测试。\n性能 从 C 的改变 ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"6c26f520b3123c91136f2e28127cf273","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/faq/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/faq/","section":"translation","summary":"起源 用法 设计 为什么 Go 没有断言 类型 值 编写代码 指针和分配 并发 函数和方法 控制流 包和测试 实现 我最喜欢的测试辅助函数在哪里 性能 从 C 的改变 参考 Go 官方文档","tags":["golang-doc"],"title":"常见问题解答","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 官方文档——快速入门 Go 的汇编器 学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"8caf9bd656fa25caf4429c4957c79e71","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/asm/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/asm/","section":"translation","summary":"参考 Go 官方文档——快速入门 Go 的汇编器 学习。","tags":["golang-doc"],"title":"快速入门 Go 的汇编器","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 官方文档——数据竞争检测器 学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7a528bd9596a57d646b46faba5301434","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/articles/race_detector/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/articles/race_detector/","section":"translation","summary":"参考 Go 官方文档——数据竞争检测器 学习。","tags":["golang-doc"],"title":"数据竞争检测器","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 维基官网——文章 学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1a0a3865529165b0d9fc7db0cd18d82f","permalink":"https://xueqing.github.io/translation/go-doc/wiki/articles/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/articles/","section":"translation","summary":"参考 Go 维基官网——文章 学习。","tags":["go-doc-wiki"],"title":"文章","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"[](https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol)\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"07709b1b8e0ba45b0851d48c3dec4a05","permalink":"https://xueqing.github.io/translation/go-doc/command/show_doc/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/show_doc/","section":"translation","summary":"[](https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol)","tags":["go-command"],"title":"显示包或符号的文档","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"go test 命令预期查找对应测试包的 “*_test.go” 文件中的测试函数、基准测试函数和示例函数。\n测试函数命名为 TestXxx(Xxx 不以小写字母开始)，且应当有签名\nfunc TestXxx(t *testing.T) { ... }  一个基准测试函数命名为 BenchmarkXxx，且应该有签名\nfunc BenchmarkXxx(b *testing.B) { ... }  一个示例函数，类似于测试函数，但不使用 *testing.T 报告成功或失败，而是打印输出到 os.Stdout。如果函数内最后的注释以 “Output:” 开头，那么输出与注释精确比较(看下面的例子)。如果最后的注释以 “Unordered output:” 开始，那么输出和注释做比较，但是忽视行的顺序。一个不带这样的注释的示例被编译但是不执行。一个在 “Output:” 之后没有文本的示例会被编译、执行并预期不会生成输出。\nGodoc 显示 ExampleXxx 的消息体来演示函数、常量或变量 Xxx 的使用。一个接收类型是 T 或 *T 的方法 M 的示例函数命名为 ExampleT_M。对于一个给定的函数、常数或变量可能有多个示例，通过后缀 _xxx 区分，xxx 是一个不以大写字母开始的后缀。\n有一个示例函数的例子：\nfunc ExamplePrintln() { Println(\u0026quot;The output of\\nthis example.\u0026quot;) // Output: The output of // this example. }  另外一个忽视输出顺序的例子：\nfunc ExamplePerm() { for _, value := range Perm(4) { fmt.Println(value) } // Unordered output: 4 // 2 // 1 // 3 // 0 }  当文件包含一个单独的示例函数，及至少一个其他的函数、类型、变量或常数声明，且没有测试函数或者基准测试函数时，整个测试文件作为例子显示。\n查看 testing 包的文档查看更多信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"f69f54bc9b6afed287550cde8afa0417","permalink":"https://xueqing.github.io/translation/go-doc/command/test_func/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/test_func/","section":"translation","summary":"go test 命令预期查找对应测试包的 “*_test.go” 文件中的测试函数、基准测试函数和示例函数。 测试函数命名为 TestXxx(Xxx 不以小写字母开始)，且应当有签名","tags":["go-command"],"title":"测试函数","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"go test 命令使用只适用于 go test 的标识以及适用于生成二进制测试的标识。\n一些标识控制概要并且写适用于 go tool pprof 的执行概要；运行 go tool pprof -h 查看更多信息。pprof 的 \u0026ndash;alloc_space、\u0026ndash;alloc_objects 和 \u0026ndash;show_bytes 选项控制如何显示这些信息。\n下面的标识被 go test 命令识别，并且控制测试的执行：\n-bench regexp Run only those benchmarks matching a regular expression. By default, no benchmarks are run. To run all benchmarks, use '-bench .' or '-bench=.'. The regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a benchmark's identifier must match the corresponding element in the sequence, if any. Possible parents of matches are run with b.N=1 to identify sub-benchmarks. For example, given -bench=X/Y, top-level benchmarks matching X are run with b.N=1 to find any sub-benchmarks matching Y, which are then run in full. -benchtime t Run enough iterations of each benchmark to take t, specified as a time.Duration (for example, -benchtime 1h30s). The default is 1 second (1s). The special syntax Nx means to run the benchmark N times (for example, -benchtime 100x). -count n Run each test and benchmark n times (default 1). If -cpu is set, run n times for each GOMAXPROCS value. Examples are always run once. -cover Enable coverage analysis. Note that because coverage works by annotating the source code before compilation, compilation and test failures with coverage enabled may report line numbers that don't correspond to the original sources. -covermode set,count,atomic Set the mode for coverage analysis for the package[s] being tested. The default is \u0026quot;set\u0026quot; unless -race is enabled, in which case it is \u0026quot;atomic\u0026quot;. The values: set: bool: does this statement run? count: int: how many times does this statement run? atomic: int: count, but correct in multithreaded tests; significantly more expensive. Sets -cover. -coverpkg pattern1,pattern2,pattern3 Apply coverage analysis in each test to packages matching the patterns. The default is for each test to analyze only the package being tested. See 'go help packages' for a description of package patterns. Sets -cover. -cpu 1,2,4 Specify a list of GOMAXPROCS values for which the tests or benchmarks should be executed. The default is the current value of GOMAXPROCS. -failfast Do not start new tests after the first test failure. -list regexp List tests, benchmarks, or examples matching the regular expression. No tests, benchmarks or examples will be run. This will only list top-level tests. No subtest or subbenchmarks will be shown. -parallel n Allow parallel execution of test functions that call t.Parallel. The value of this flag is the maximum number of tests to run simultaneously; by default, it is set to the value of GOMAXPROCS. Note that -parallel only applies within a single test binary. The 'go test' command may run tests for different packages in parallel as well, according to the setting of the -p flag (see 'go help build'). -run regexp Run only those tests and examples matching the regular expression. For tests, the regular expression is split by unbracketed slash (/) characters into a sequence of regular expressions, and each part of a test's identifier must match the corresponding element in the sequence, if any. Note that possible parents of matches are run too, so that -run=X/Y matches and runs and reports the result of all tests matching X, even those without sub-tests matching Y, because it must run them to look for those sub-tests. -short Tell long-running tests to shorten their run time. It is off by default but set during all.bash so that installing the Go tree can run a sanity check but not spend time running exhaustive tests. -timeout d If a test binary runs longer than duration d, panic. If d is 0, the timeout is disabled. The default is 10 minutes (10m). -v Verbose output: log all tests as they are run. Also print all text from Log and Logf calls even if the test succeeds. -vet list Configure the invocation of \u0026quot;go vet\u0026quot; during \u0026quot;go test\u0026quot; to use the comma-separated list of vet checks. If list is empty, \u0026quot;go test\u0026quot; runs \u0026quot;go vet\u0026quot; with a curated list of checks believed to be always worth addressing. If list is \u0026quot;off\u0026quot;, \u0026quot;go test\u0026quot; does not run \u0026quot;go vet\u0026quot; at all.  下面的标识被 go test 命令识别，且可用于概述执行期间的测试：\n-benchmem Print memory allocation statistics for benchmarks. -blockprofile block.out Write a goroutine blocking profile to the specified file when all tests are complete. Writes test binary as -c would. -blockprofilerate n Control the detail provided in goroutine blocking profiles by calling runtime.SetBlockProfileRate with n. See 'go doc runtime.SetBlockProfileRate'. The profiler aims to sample, on average, one blocking event every n nanoseconds the program spends blocked. By default, if -test.blockprofile is set without this flag, all blocking events are recorded, equivalent to -test.blockprofilerate=1. -coverprofile cover.out Write a coverage profile to the file after all tests have passed. Sets -cover. -cpuprofile cpu.out Write a CPU profile to the specified file before exiting. Writes test binary as -c would. -memprofile mem.out Write an allocation profile to the file after all tests have passed. Writes test binary as -c would. -memprofilerate n Enable more precise (and expensive) memory allocation profiles by setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'. To profile all memory allocations, use -test.memprofilerate=1. -mutexprofile mutex.out Write a mutex contention profile to the specified file when all tests are complete. Writes test binary as -c would. -mutexprofilefraction n Sample 1 in n stack traces of goroutines holding a contended mutex. -outputdir directory Place output files from profiling in the specified directory, by default the directory in which \u0026quot;go test\u0026quot; is running. -trace trace.out Write an execution trace to the specified file before exiting.  所有这些标识也有一个可选的 “test.” 前缀被识别(如 -test.v)。但是当直接调用生成的二进制测试时(go test -c 生成)，这个前缀是强制的。\ngo test 命令在调用二进制测试之前，适当地重写或移除在可选的包列表之前或之后识别的标识。\n比如，命令 go test -v -myflag testdata -cpuprofile=prof.out -x 将会编译二进制测试然后运行 pkg.test -test.v -myflag testdata -test.cpuprofile=prof.out。(-x 标识被移除，因为它只适用于go 命令的执行，而不是go test)\n生成概述(除了用于覆盖)的测试标识也会将二进制测试留在 pkg.test 以便用于分析概述。\n当 go test 运行一个二进制测试时，它从对应包源码目录内部运行。视测试而定，可能需要在直接调用一个生成的二进制测试时也这样做。\n命令行的包列表，如果有的话，必须出现在所有 go test 命令不知道的标识之前。继续上面的例子，包列表需要出现在 -myflag 之前，但是可以出现在 -v 两侧。\n当 go test 在列表模式运行时，go test 缓存成功的包测试结果以避免不必要的重复运行测试。要禁用测试缓存，使用除了可缓存的标识以外的任意的测试标识或参数。惯用的显式禁用测试缓存的方法是使用 -count=1。\n要保持二进制测试的一个参数不被翻译成一个已知的标识或者包名，使用 -args (查看 got help test) 换地命令行的剩余部分给二进制测试，该部分不会被解释或修改。\n例如，命令 go test -v -args -x -v 会编译二进制测试然后运行 pkg.test -test.v -x -v。类似的，go test -args math 会编译二进制测试然后运行 pkg.test math。\n在第一个例子中，-x 和第二个 -v 被传递给二进制测试且未被修改，且对 go 命令本身没有影响。在第二个例子中，参数 math 被传递给二进制测试，而不是解释成包列表。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"c6f26e15ac3b6de09fdcfed406bdfe8c","permalink":"https://xueqing.github.io/translation/go-doc/command/test_flag/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/test_flag/","section":"translation","summary":"go test 命令使用只适用于 go test 的标识以及适用于生成二进制测试的标识。 一些标识控制概要并且写适用于 go tool pprof 的执行概要；运行 go tool pprof -h 查看更多信息。ppr","tags":["go-command"],"title":"测试标识","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"参考 Go 官方文档——编写 Web 应用 学习。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"1e555587a1a425bb72744795a8cb5a0d","permalink":"https://xueqing.github.io/translation/go-doc/golangdoc/articles/wiki/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/golangdoc/articles/wiki/","section":"translation","summary":"参考 Go 官方文档——编写 Web 应用 学习。","tags":["golang-doc"],"title":"编写 Web 应用","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  介绍 表驱动测试的例子 参考  参考 Go 维基官网——表驱动测试学习。\n原网页由 Martin Tournoij 在 2018/4/11 编辑。第 3 次修订。\n介绍 编写好的测试不是烦琐的，在很多情况下大量领域可以使用表驱动测试覆盖：每个表条目是一个包含输入和预期结果的测试用例，而且有时候包含一些额外的信息，比如测试名称，使得测试输出易于阅读。如果你曾经发现自己在编写测试时使用拷贝和粘贴，考虑是否重构为表驱动测试，或者把拷贝的代码放在一个辅助函数可能是一个更好的选择。\n给定一个测试用例表，真正的测试简单地迭代遍历所有表条目，且未每个条目执行必要的测试。测试代码只编写一次且被分摊到所有的表条目，因此精心编写一个带有好的错误消息的测试是有意义的。\n表驱动测试的例子 这里是一个来自 fmt 包测试代码的好例子：\nvar flagtests = []struct { in string out string }{ {\u0026quot;%a\u0026quot;, \u0026quot;[%a]\u0026quot;}, {\u0026quot;%-a\u0026quot;, \u0026quot;[%-a]\u0026quot;}, {\u0026quot;%+a\u0026quot;, \u0026quot;[%+a]\u0026quot;}, {\u0026quot;%#a\u0026quot;, \u0026quot;[%#a]\u0026quot;}, {\u0026quot;% a\u0026quot;, \u0026quot;[% a]\u0026quot;}, {\u0026quot;%0a\u0026quot;, \u0026quot;[%0a]\u0026quot;}, {\u0026quot;%1.2a\u0026quot;, \u0026quot;[%1.2a]\u0026quot;}, {\u0026quot;%-1.2a\u0026quot;, \u0026quot;[%-1.2a]\u0026quot;}, {\u0026quot;%+1.2a\u0026quot;, \u0026quot;[%+1.2a]\u0026quot;}, {\u0026quot;%-+1.2a\u0026quot;, \u0026quot;[%+-1.2a]\u0026quot;}, {\u0026quot;%-+1.2abc\u0026quot;, \u0026quot;[%+-1.2a]bc\u0026quot;}, {\u0026quot;%-1.2abc\u0026quot;, \u0026quot;[%-1.2a]bc\u0026quot;}, } func TestFlagParser(t *testing.T) { var flagprinter flagPrinter for _, tt := range flagtests { t.Run(tt.in, func(t *testing.T) { s := Sprintf(tt.in, \u0026amp;flagprinter) if s != tt.out { t.Errorf(\u0026quot;got %q, want %q\u0026quot;, s, tt.out) } }) } }  注意使用 t.Errorf 提供的详细的错误消息：提供了函数结果和预期结果；输入是子测试的名字。当测试失败时，哪个错误失败以及为什么失败是显然的，甚至不用阅读测试代码。\nt.Errorf 调用不是一个断言。即使打印一个错误日志，测试仍会继续。比如，当使用整数输入测试一些代码时，知道函数对所有输入失败，还是只对奇数失败，或者是对 2 的幂失败是有意义的。\n参考  如何编写 Go 代码——测试 常见问题解答——断言 常见问题解答——测试框架 testing 包  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"a1f96264fce369712603df16886fb318","permalink":"https://xueqing.github.io/translation/go-doc/wiki/table_driven_tests/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/table_driven_tests/","section":"translation","summary":"介绍 表驱动测试的例子 参考 参考 Go 维基官网——表驱动测试学习。 原网页由 Martin Tournoij 在 2018/4/11 编辑。第 3 次修订。 介绍 编写好的测试不是烦琐的，在很多情况下大量领域","tags":["go-doc-wiki"],"title":"表驱动测试","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"  Unix 系统  Go 1.13 Bash Zsh fish  Windows  Go 1.13 (命令行) Windows 10 (图形用户界面) Windows 10 (命令行)   参考设置 GOPATH 维基学习。\n原网页由 Bryan C. Mills 在 2019/9/27 编辑。第 55 次修订。\nGOPATH 环境变量指定你的工作区的位置。如果没有设置 GOPATH，则认为 Unix 系统上是 $HOME/go 且 Windows 上是 %USERPROFILE%\\go。如果你想要使用自定义位置作为你的工作区，你可以设置 GOPATH 环境变量。此页解释如何在不同的平台上设置这个变量。\nUnix 系统 GOPATH 可以是你系统上的任一目录。在 Unix 系统上，我们将设置其为 $HOME/go (从 Go 1.8 其的默认值)。注意 GOPATH 一定不能和 Go 安装路径相同。另外一个常见的设置是设置 GOPATH=$HOME\nGo 1.13 go env -w GOPATH=$HOME/go\nBash 编辑 ~/.bash_profile，添加下面的行：\nexport GOPATH=$HOME/go  保存并退出编辑器。然后使 ~/.bash_profile 修改生效：\nsource ~/.bash_profile  Zsh 编辑 ~/.zshrc，添加下面的行：\nexport GOPATH=$HOME/go  保存并退出编辑器。然后使 ~/.zshrc 修改生效：\nsource ~/.zshrc  fish set -x -U GOPATH $HOME/go  -x 用于指定这个变量应被导出，且 -U 使其成为一个全局变量，对所有会话可用且是持久的。\nWindows 你的工作区可位于任何你喜欢的地方，但是我们在这个例子中使用 C:\\go-work。\n注意：GOPATH 一定不能和 Go 安装路径相同。\n 在 C:\\go-work 新建文件夹。 右击“开始”，并点击“控制面板”。选择“系统和安全”，然后点击“系统”。 从左边的菜单栏，选中“高级系统设置”。 点击底部的“环境变量”按钮。 从“用户变量”区域点击“新建”。 在“变量名”输入 GOPATH。 在“变量值”输入 C:\\go-work。 点击“确定”。  Go 1.13 (命令行)  打开一个命令提示符(Win+r 然后输入 cmd) 或者 powershell 窗口(Win+i)。 输入 go env -w GOPATH=c:\\go-work。  Windows 10 (图形用户界面) 有一个通过搜索编辑 环境变量 的快速方式：\n 左击“搜索”并输入 env 或 environment。 选择编辑账户的环境变量。 和上述步骤相同。  Windows 10 (命令行)  打开一个命令提示符(Win+r 然后输入 cmd) 或者 powershell 窗口(Win+i)。 输入 setx GOPATH %USERPROFILE%\\go。(这将会设置 GOPATH 为你的 [home folder]\\go，比如 C:\\Users\\yourusername\\go。) 关闭命令提示符或 powershell 窗口。(环境变量只对新的命令提示符或 powershell 窗口生效，当前窗口不生效。)  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"542d075e01a9ee8d5c182760bfa3138a","permalink":"https://xueqing.github.io/translation/go-doc/wiki/set_gopath/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/wiki/set_gopath/","section":"translation","summary":"Unix 系统 Go 1.13 Bash Zsh fish Windows Go 1.13 (命令行) Windows 10 (图形用户界面) Windows 10 (命令行) 参考设置 GOPATH 维基学习。 原网页由 Bryan C. Mills 在 2019/9/27 编辑。第 55 次修订。 GOPATH 环境变量指定你的","tags":["go-doc-wiki"],"title":"设置 GOPATH","type":"translation"},{"authors":["kiki"],"categories":["translation"],"content":"一些导入路径也描述了如何使用版本控制系统获取包的源码。\n一些常见的代码托管网站有一些特殊的语法：\nBitbucket (Git, Mercurial) import \u0026quot;bitbucket.org/user/project\u0026quot; import \u0026quot;bitbucket.org/user/project/sub/directory\u0026quot; GitHub (Git) import \u0026quot;github.com/user/project\u0026quot; import \u0026quot;github.com/user/project/sub/directory\u0026quot; Launchpad (Bazaar) import \u0026quot;launchpad.net/project\u0026quot; import \u0026quot;launchpad.net/project/series\u0026quot; import \u0026quot;launchpad.net/project/series/sub/directory\u0026quot; import \u0026quot;launchpad.net/~user/project/branch\u0026quot; import \u0026quot;launchpad.net/~user/project/branch/sub/directory\u0026quot; IBM DevOps Services (Git) import \u0026quot;hub.jazz.net/git/user/project\u0026quot; import \u0026quot;hub.jazz.net/git/user/project/sub/directory\u0026quot;  对于托管在其他服务商的代码，导入路径或者具备版本控制类型，或者 go 工具可以通过 https/http 动态拉取导入路径，然后从 HTML 的 \u0026lt;meta\u0026gt; 标签代码位置。\n为了声明代码位置，具有形式 repository.vcs/path 的导入路径指定了给定的仓库(使用或不使用 .vcs 后缀，使用命名的版本控制系统)和该仓库内的路径。支持的版本控制系统是：\nBazaar .bzr Fossil .fossil Git .git Mercurial .hg Subversion .svn  比如，import \u0026quot;example.org/user/foo.hg\u0026quot; 表示根目录在 Mercurial 仓库的 example.org/user/foo 或 foo.hg，且 import \u0026quot;example.org/repo.git/foo/bar\u0026quot; 表示 Git 仓库的 foo/bar 目录在 example.org/repo 或 repo.git。\n当一个版本控制系统支持多个协议时，下载时轮流尝试每个协议。比如，一个 Git 下载尝试 https://，然后是 git+ssh://。\n默认的，下载受限于已知的安全协议(比如，https 和 ssh)。要覆盖 Git 下载的这个设置，可以设置 GIT_ALLOW_PROTOCOL 环境变量(查看 go help environment 获取更多信息)。\n如果导入路径不是已知的代码托管网站，且缺少版本控制限定符，go 工具尝试通过 https/http 查找 HTML \u0026lt;head\u0026gt; 的 \u0026lt;meta\u0026gt; 标签来拉取导入。\nmeta 标签有这样的形式 \u0026lt;meta name=\u0026quot;go-import\u0026quot; content=\u0026quot;import-prefix vcs repo-root\u0026quot;\u0026gt;。\nimport-prefix 是对应 repo-root 的导入路径。它必须是一个前缀，或者是借助 go get 拉取包的一个精确匹配。如果不是一个精确匹配，生成另外一个 http 请求来验证 meta 标签。\nmeta 标签应该尽早出现在文件中。特别地，它应该出现在任何原始的 JavaScript 或 CSS 之前，避免使 go 命令受限的解释器不能理解。\nvcs 是 bzr/fossil/git/hg/svn 中的一个。\nrepo-root 是版本控制系统的根，包含了一个体系，但是不包含 .vcs 限定符。\n比如，import \u0026quot;example.org/pkg/foo\u0026quot; 会导致下面的请求\nhttps://example.org/pkg/foo?go-get=1 (preferred) http://example.org/pkg/foo?go-get=1 (fallback, only with -insecure)  如果页面包含 meta 标签 \u0026lt;meta name=\u0026quot;go-import\u0026quot; content=\u0026quot;example.org git https://code.org/r/p/exproj\u0026quot;\u0026gt;，那么 go 工具会验证 https://example.org/pkg/foo?go-get=1 包含相同的 meta 标签，然后使用 git clone https://code.org/r/p/exproj 克隆源码到 GOPATH/src/example.org。\n当使用 GOPATH 时，下载的包被写到 GOPATH 环境变量列举的第一个目录。(查看 go help gopath-get 和 go help gopath。)\n当使用模块时，下载的包存储在模块缓存。(查看 go help module-get 和 go help goproxy。)\n当使用模块时，go-import meta 标签的额外的变量被识别且更倾向于通过这些列举的版本控制系统。比如，在 \u0026lt;meta name=\u0026quot;go-import\u0026quot; content=\u0026quot;example.org mod https://code.org/moduleproxy\u0026quot;\u0026gt; 中，该变量使用 “mod” 作为 vcs 内容的值。\n这个标签意味着使用以 example.org 开始的路径从 https://code.org/moduleproxy 可用的模块代理拉取模块。查看 go help goproxy 获取更多关于代理的信息。\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":-62135596800,"objectID":"7de00ef92eded468c631a45f7df81797","permalink":"https://xueqing.github.io/translation/go-doc/command/remote_import_path/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/translation/go-doc/command/remote_import_path/","section":"translation","summary":"一些导入路径也描述了如何使用版本控制系统获取包的源码。 一些常见的代码托管网站有一些特殊的语法： Bitbucket (Git, Mercurial) import \u0026quot;bitbucket.org/user/project\u0026quot; import \u0026quot;bitbucket.org/user/project/sub/directory\u0026quot; GitHub (Git) import \u0026quot;github.com/user/project\u0026quot; import \u0026quot;github.com/user/project/sub/directory\u0026quot; Launchpad (Bazaar) import \u0026quot;launchpad.net/project\u0026quot; import \u0026quot;launchpad.net/project/series\u0026quot; import \u0026quot;launchpad.net/project/series/sub/directory\u0026quot; import \u0026quot;launchpad.net/~user/project/branch\u0026quot;","tags":["go-command"],"title":"远程导入路径","type":"translation"}]