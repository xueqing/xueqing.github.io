<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu | kiki</title>
    <link>https://xueqing.github.io/blog/ubuntu/</link>
      <atom:link href="https://xueqing.github.io/blog/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <description>Ubuntu</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>Ubuntu</title>
      <link>https://xueqing.github.io/blog/ubuntu/</link>
    </image>
    
    <item>
      <title>awk 命令</title>
      <link>https://xueqing.github.io/blog/ubuntu/awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/awk/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%84%9a%e6%9c%ac%e5%9f%ba%e6%9c%ac%e6%9e%b6%e6%9e%84&#34;&gt;脚本基本架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;工作原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%b0%86%e5%a4%96%e9%83%a8%e5%8f%98%e9%87%8f%e4%bc%a0%e9%80%92%e7%bb%99-awk&#34;&gt;将外部变量传递给 awk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;脚本基本架构&#34;&gt;脚本基本架构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;awk &#39;BEGIN{ print &amp;quot;start&amp;quot; } pattern{ commands } END{ print &amp;quot;end&amp;quot; }&#39; file&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个 awk 脚本通常由：&lt;code&gt;BEGIN&lt;/code&gt;语句块、能够使用模式匹配的通用语句块、&lt;code&gt;END&lt;/code&gt;语句块 3 部分组成&lt;/li&gt;
&lt;li&gt;这三个部分是可选的。任意一个部分都可以不出现在脚本中，脚本通常是被单引号或双引号中&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;工作原理&#34;&gt;工作原理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;awk &#39;BEGIN{ commands } pattern{ commands } END{ commands }&#39;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一步：执行&lt;code&gt;BEGIN{ commands }&lt;/code&gt;语句块中的语句

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BEGIN&lt;/code&gt;语句块在 awk 开始从输入流中读取行之前被执行&lt;/li&gt;
&lt;li&gt;这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在&lt;code&gt;BEGIN&lt;/code&gt;语句块中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第二步：从文件或标准输入(stdin)读取一行，然后执行&lt;code&gt;pattern{ commands }&lt;/code&gt;语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pattern&lt;/code&gt;语句块中的通用命令是最重要的部分，它也是可选的&lt;/li&gt;
&lt;li&gt;如果没有提供&lt;code&gt;pattern&lt;/code&gt;语句块，则默认执行&lt;code&gt;{ print }&lt;/code&gt;，即打印每一个读取到的行，awk 读取的每一行都会执行该语句块&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;echo -e &amp;quot;A line 1\nA line 2&amp;quot; | awk &#39;BEGIN{ print &amp;quot;Start&amp;quot; } { print } END{ print &amp;quot;End&amp;quot; }&#39;&lt;/code&gt;输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Start
A line 1
A line 2
End
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当使用不带参数的&lt;code&gt;print&lt;/code&gt;时，它就打印当前行，当&lt;code&gt;print&lt;/code&gt;的参数是以逗号进行分隔时，打印时则以空格作为定界符。在 awk 的&lt;code&gt;print&lt;/code&gt;语句块中双引号是被当作拼接符使用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo | awk &#39;{ var1=&amp;quot;v1&amp;quot;; var2=&amp;quot;v2&amp;quot;; var3=&amp;quot;v3&amp;quot;; print var1,var2,var3; }&#39;&lt;/code&gt;输出&lt;code&gt;v1 v2 v3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo | awk &#39;{ var1=&amp;quot;v1&amp;quot;; var2=&amp;quot;v2&amp;quot;; var3=&amp;quot;v3&amp;quot;; print var1&amp;quot;=&amp;quot;var2&amp;quot;=&amp;quot;var3; }&#39;&lt;/code&gt;输出&lt;code&gt;v1=v2=v3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;第三步：当读至输入流末尾时，执行&lt;code&gt;END{ commands }&lt;/code&gt;语句块&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;END&lt;/code&gt;语句块在 awk 从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成&lt;/li&gt;
&lt;li&gt;也是一个可选语句块&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;将外部变量传递给-awk&#34;&gt;将外部变量传递给 awk&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;借助&lt;code&gt;-v&lt;/code&gt;选项，可以将外部值（并非来自 stdin）传递给 awk&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;VAR=10000
echo | awk -v VARIABLE=$VAR &#39;{ print VARIABLE }&#39; ## 输出&amp;quot;10000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;另一种传递外部变量方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;var1=&amp;quot;aaa&amp;quot;
var2=&amp;quot;bbb&amp;quot;
echo | awk &#39;{ print v1,v2 }&#39; v1=$var1 v2=$var2 ## 输出&amp;quot;aaa bbb&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当输入来自于文件时使用&lt;code&gt;awk &#39;{ print v1,v2 }&#39; v1=$var1 v2=$var2 filename&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以上方法中，变量之间用空格分隔作为 awk 的命令行参数跟随在&lt;code&gt;BEGIN&lt;/code&gt;、&lt;code&gt;{}&lt;/code&gt;和&lt;code&gt;END&lt;/code&gt;语句块之后&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>dpkg 安装和卸载程序</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_dpkg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_dpkg/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo dpkg -i *.deb&lt;/code&gt;安装服务&lt;/li&gt;
&lt;li&gt;卸载服务

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dpkg -l | grep xxx&lt;/code&gt;查看包是否正确安装&lt;/li&gt;
&lt;li&gt;第一列的&lt;code&gt;ii&lt;/code&gt;指的是&lt;code&gt;installed ok installed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpkg -r xxx&lt;/code&gt;移除安装包，但是保留配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpkg -P/--purge xxx&lt;/code&gt;完全移除安装包，包括配置文件&lt;/li&gt;
&lt;li&gt;再用&lt;code&gt;dpkg -l | grep xxx&lt;/code&gt;查看安装状态&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;-r&lt;/code&gt;移除，可以看到第一列的的状态是&lt;code&gt;rc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;-P&lt;/code&gt;移除，输出为空，找不到对应条目&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>find 命令</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_find/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;递归删除文件夹下某个文件或文件夹&lt;/li&gt;
&lt;li&gt;find 指定&lt;code&gt;-name&lt;/code&gt;查找类型默认包括文件和文件夹

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find ./ -name .git | xargs rm -rf&lt;/code&gt;递归删除当前路径下的&lt;code&gt;.git&lt;/code&gt;文件和文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find ./ -name .git -type f | xargs rm -rf&lt;/code&gt;递归删除当前路径下的&lt;code&gt;.git&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find ./ -name .git -type d | xargs rm -rf&lt;/code&gt;递归删除当前路径下的&lt;code&gt;.git&lt;/code&gt;文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find ./ -name .git -print -exec rm -rf {} \;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-print&lt;/code&gt;输出查找的文件或文件夹名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-exec&lt;/code&gt;后边跟着要执行的命令，表示将 find 查找的文件或目录执行该命令

&lt;ul&gt;
&lt;li&gt;选项后面跟着要执行的命令和脚本，然后是一对&lt;code&gt;{}&lt;/code&gt;，一个空格和一个&lt;code&gt;\&lt;/code&gt;，然后是一个分号&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xargs- build and execute command lines from standard input&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>fsck 命令</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_fsck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_fsck/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Ubuntu16 在启动的时候出错 &lt;code&gt;fsck exited with status code 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出错原因：磁盘检测不能通过&lt;/li&gt;
&lt;li&gt;解决方法：&lt;code&gt;fsck.ext4 -y /dev/sda1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GDB 学习</title>
      <link>https://xueqing.github.io/blog/ubuntu/gdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/gdb/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#gdb-%E5%AD%A6%E4%B9%A0&#34;&gt;GDB 学习&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#g-%E7%BC%96%E8%AF%91&#34;&gt;g++ 编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%90%AF%E5%8A%A8-gdb-%E8%B0%83%E8%AF%95&#34;&gt;启动 GDB 调试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%AE%BE%E7%BD%AE%E6%96%AD%E7%82%B9&#34;&gt;设置断点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9F%A5%E7%9C%8B%E5%90%84%E7%B1%BB%E4%BF%A1%E6%81%AF&#34;&gt;查看各类信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%BF%90%E8%A1%8C%E8%A2%AB%E8%B0%83%E8%AF%95%E7%9A%84%E7%A8%8B%E5%BA%8F&#34;&gt;运行被调试的程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%AE%BE%E7%BD%AE%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%96%AD%E5%90%8E%E6%AC%B2%E6%98%BE%E7%A4%BA%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%8A%E6%A0%BC%E5%BC%8F&#34;&gt;设置程序中断后欲显示的数据及格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4&#34;&gt;帮助命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;g-编译&#34;&gt;g++ 编译&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;添加编译参数&lt;code&gt;-std=c++11 -fpermissive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定编译生成的可执行文件名字&lt;code&gt;-o gdb-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加调试编译，将源代码信息编译到可执行文件中&lt;code&gt;-g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不用 -g，看不到程序的函数名、变量名，代替的是运行时的内存地址&lt;/li&gt;
&lt;li&gt;没有源代码，调试和跟踪时只能是汇编代码级别的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;启动-gdb-调试&#34;&gt;启动 GDB 调试&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;先启动 gdb，再加载被调试的可执行程序文件：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gdb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file gdb-sample&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;也可在启动调试时载入被调试程序名字&lt;code&gt;gdb gdb-sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;同时调试一个运行程序和 core 文件，core 是程序非法执行后 core dump 后产生的文件&lt;code&gt;gdb gdb-sample core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定程序运行的进程 ID：&lt;code&gt;gdb gdb-sample 2048&lt;/code&gt;，主要用于服务程序&lt;/li&gt;
&lt;li&gt;退出 GDB 调试环境&lt;code&gt;q(quit)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;设置断点&#34;&gt;设置断点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;b + 行号&lt;code&gt;b 8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b + 函数名称&lt;code&gt;b main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b + *函数名称，将断点设置在由编译器生成的 prolg 代码处&lt;code&gt;b *main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;b + *代码地址&lt;code&gt;b *004835c&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除断点，不指定编号则删除所有断点&lt;code&gt;d(delete breakpoints) N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;禁用某个断点&lt;code&gt;disable breakpoints N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;允许使用某个断点&lt;code&gt;enable breakpoints N&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;清除源文件某一行代码的所有断点&lt;code&gt;clean number&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;查看各类信息&#34;&gt;查看各类信息&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;查看当前的所有断点信息&lt;code&gt;i(info) breakpoints&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看程序是否在运行，进程号，被暂停的原因&lt;/li&gt;
&lt;li&gt;显示指定变量（临时变量或全局变量）的值&lt;code&gt;p(print)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看程序运行路径&lt;code&gt;show paths&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置环境变量&lt;code&gt;set env(environment) varname[=value]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看环境变量&lt;code&gt;show environment [varname]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;显示当前所在目录&lt;code&gt;pwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看函数堆栈&lt;code&gt;bt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定运行时参数&lt;code&gt;set args 参数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看设置好的参数&lt;code&gt;show args&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;运行被调试的程序&#34;&gt;运行被调试的程序&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;运行&lt;code&gt;r(run)&lt;/code&gt;，如果没有断点则执行完，否则暂停在第一个可用断点处&lt;/li&gt;
&lt;li&gt;继续执行被调试程序&lt;code&gt;c(continue)&lt;/code&gt;，直至下一个断点或程序结束&lt;/li&gt;
&lt;li&gt;执行一行源程序代码：

&lt;ul&gt;
&lt;li&gt;如果该行有程序调用，则进入该函数&lt;code&gt;s(step into)&lt;/code&gt;，单步跟踪进入&lt;/li&gt;
&lt;li&gt;一并执行该行代码中的函数调用&lt;code&gt;n(step over)&lt;/code&gt;，单步跟踪&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;执行一行汇编指令&lt;code&gt;si/ni&lt;/code&gt;，类似于 s/n 命令&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;设置程序中断后欲显示的数据及格式&#34;&gt;设置程序中断后欲显示的数据及格式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;例如&lt;code&gt;display /i $pc&lt;/code&gt;，每次程序中断后可以看到即将被执行的下一条汇编指令，&lt;code&gt;$pc&lt;/code&gt;代表当前汇编指令，&lt;code&gt;/i&lt;/code&gt;表示以十六进制显示&lt;/li&gt;
&lt;li&gt;取消先前的 display 设置&lt;code&gt;undisplay N&lt;/code&gt;，编号从 1 递增&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;帮助命令&#34;&gt;帮助命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;help，提供对 GDB 各种命令的解释说明

&lt;ul&gt;
&lt;li&gt;指定了命令名称参数，则显示该命令的详细说明&lt;code&gt;help display&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有指定参数，则分类显示所有 GDB 命令&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;直接回车，表示重复上一次命令&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google 开源项目风格指南</title>
      <link>https://xueqing.github.io/blog/ubuntu/google_style_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/google_style_guide/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://zh-google-styleguide.readthedocs.io/en/latest/contents/&#34; target=&#34;_blank&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#shell-%e9%a3%8e%e6%a0%bc%e6%8c%87%e5%8d%97&#34;&gt;shell 风格指南&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%83%8c%e6%99%af&#34;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shell-%e6%96%87%e4%bb%b6%e5%92%8c%e8%a7%a3%e9%87%8a%e5%99%a8%e8%b0%83%e7%94%a8&#34;&gt;shell 文件和解释器调用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%8e%af%e5%a2%83&#34;&gt;环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%b3%a8%e9%87%8a&#34;&gt;注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%a0%bc%e5%bc%8f&#34;&gt;格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%bc%a9%e8%bf%9b&#34;&gt;缩进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%a1%8c%e7%9a%84%e9%95%bf%e5%ba%a6%e5%92%8c%e9%95%bf%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;行的长度和长字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%ae%a1%e9%81%93&#34;&gt;管道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%be%aa%e7%8e%af&#34;&gt;循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#case-%e8%af%ad%e5%8f%a5&#34;&gt;case 语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%8f%98%e9%87%8f%e6%89%a9%e5%b1%95&#34;&gt;变量扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%bc%95%e7%94%a8&#34;&gt;引用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%89%b9%e6%80%a7%e5%8f%8a%e9%94%99%e8%af%af&#34;&gt;特性及错误&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%91%bd%e4%bb%a4%e6%9b%bf%e6%8d%a2&#34;&gt;命令替换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[&lt;code&gt;test&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;和&lt;code&gt;[[&lt;/code&gt;](#test%e5%92%8c)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%b5%8b%e8%af%95%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;&gt;测试字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%96%87%e4%bb%b6%e5%90%8d%e7%9a%84%e9%80%9a%e9%85%8d%e7%ac%a6%e6%89%a9%e5%b1%95&#34;&gt;文件名的通配符扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#eval&#34;&gt;eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%ae%a1%e9%81%93%e5%af%bc%e5%90%91-while-%e5%be%aa%e7%8e%af&#34;&gt;管道导向 while 循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%91%bd%e5%90%8d%e7%ba%a6%e5%ae%9a&#34;&gt;命名约定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%87%bd%e6%95%b0%e5%90%8d&#34;&gt;函数名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%8f%98%e9%87%8f%e5%90%8d&#34;&gt;变量名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%b8%b8%e9%87%8f%e5%92%8c%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f%e5%90%8d&#34;&gt;常量和环境变量名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%ba%90%e6%96%87%e4%bb%b6%e5%90%8d&#34;&gt;源文件名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%8f%aa%e8%af%bb%e5%8f%98%e9%87%8f&#34;&gt;只读变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e6%9c%ac%e5%9c%b0%e5%8f%98%e9%87%8f&#34;&gt;使用本地变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%87%bd%e6%95%b0%e4%bd%8d%e7%bd%ae&#34;&gt;函数位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%b8%bb%e5%87%bd%e6%95%b0-main&#34;&gt;主函数 main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%b0%83%e7%94%a8%e5%91%bd%e4%bb%a4&#34;&gt;调用命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#c-%e9%a3%8e%e6%a0%bc%e6%8c%87%e5%8d%97&#34;&gt;C++ 风格指南&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;#python-%e9%a3%8e%e6%a0%bc%e6%8c%87%e5%8d%97&#34;&gt;Python 风格指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./shell-风格指南&#34;&gt;shell 风格指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./C++-风格指南&#34;&gt;C++ 风格指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;./Python-风格指南&#34;&gt;Python 风格指南&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;shell-风格指南-https-zh-google-styleguide-readthedocs-io-en-latest-google-shell-styleguide-contents&#34;&gt;&lt;a href=&#34;https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/contents/&#34; target=&#34;_blank&#34;&gt;shell 风格指南&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用哪一种 shell

&lt;ul&gt;
&lt;li&gt;bash 是唯一被允许执行的 shell 脚本语言&lt;/li&gt;
&lt;li&gt;可执行文件以&lt;code&gt;#!/bin/bash&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;set&lt;/code&gt;设置 shell 的选项&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;什么时候使用 shell

&lt;ul&gt;
&lt;li&gt;仅被用于小功能或简单的包装脚本&lt;/li&gt;
&lt;li&gt;如果在乎性能，不使用 shell&lt;/li&gt;
&lt;li&gt;需要使用数据而不是变量赋值，如&lt;code&gt;${PHPESTATUS}&lt;/code&gt;，使用 Python 脚本&lt;/li&gt;
&lt;li&gt;脚本超过 100 行，尽可能使用 Python，以免之后花更多时间重写脚本&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;shell-文件和解释器调用&#34;&gt;shell 文件和解释器调用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;文件扩展名

&lt;ul&gt;
&lt;li&gt;可执行文件应该没有扩展名（强烈建议）或使用&lt;code&gt;.sh&lt;/code&gt;扩展名&lt;/li&gt;
&lt;li&gt;库文件使用&lt;code&gt;.sh&lt;/code&gt;扩展名，且不可执行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SUID/SGID

&lt;ul&gt;
&lt;li&gt;禁止在脚本中使用 SUID(Set User ID) 和 SGID(Set Group ID)&lt;/li&gt;
&lt;li&gt;如果需要较高权限使用&lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;STDOUT vs STDERR&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所有错误信息应导向 STDERR&lt;/li&gt;
&lt;li&gt;便于从实际问题中分离出正常状态&lt;/li&gt;

&lt;li&gt;&lt;p&gt;推荐使用如下函数，打印错误信息和其他状态信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;err() {
echo &amp;quot;[$(date +&#39;%Y-%m-%dT%H:%M:%S%z&#39;)]: $@&amp;quot; &amp;gt;&amp;amp;2
}

if ! do_sth; then
err &amp;quot;Unable to do_sth&amp;quot;
exit &amp;quot;${E_DID_NOTHING}&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;注释&#34;&gt;注释&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件头&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文件必须包含一个顶层注释，简要概述内容。版权声明和作者信息可选&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
#
# Perform hot bakeups of Oracle databases.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;功能注释&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;除了明显简短的函数必须被注释&lt;/li&gt;
&lt;li&gt;库函数都必须注释&lt;/li&gt;
&lt;li&gt;注释包括&lt;/li&gt;
&lt;li&gt;函数的描述&lt;/li&gt;
&lt;li&gt;全局变量的使用和修改&lt;/li&gt;
&lt;li&gt;使用的参数说明&lt;/li&gt;
&lt;li&gt;返回值，而不是上一条命令运行后默认的退出状态&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
#
# Perform hot bakeups of Oracle databases.

export PATH=&#39;/usr/xpg4/bin:/usr/bin:/opt/csw/bin:/opt/goog/bin&#39;

#######################################
# Cleanup files from the backup dir
# Globals:
#   BACKUP_DIR
#   ORACLE_SID
# Arguments:
#   None
# Returns:
#   None
#######################################
cleanup() {
#...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实现部分的注释&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注释代码中有技巧、不明显、有趣或重要的部分&lt;/li&gt;
&lt;li&gt;不要注释所有代码，简单注释&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;TODO 注释&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用 TODO 注释临时的、短期解决方案的、或足够好但不完美的代码&lt;/li&gt;
&lt;li&gt;应包含全部大写的字符串 TODO + 用户名，冒号可选，最好在后面加上 bug 或 ticket 的序号&lt;/li&gt;
&lt;li&gt;例如&lt;code&gt;# TODO(kiki): Handle the unlikely edge cases (bug ####)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;

&lt;h4 id=&#34;缩进&#34;&gt;缩进&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;缩进两个空格，没有制表符&lt;/li&gt;
&lt;li&gt;代码块直接使用空行提升可读性&lt;/li&gt;
&lt;li&gt;对于已有文件，保持已有的缩进风格&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;行的长度和长字符串&#34;&gt;行的长度和长字符串&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;行的最大长度为 80 个字符&lt;/li&gt;
&lt;li&gt;使用 here document 或嵌入的换行符&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# DO use &#39;here document&#39;s
cat &amp;lt;&amp;lt;END;
I am an exceptionally long
string.
END

# Embedded newlines are ok too
long_string=&amp;quot;I am an exceptionally
long string.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;管道&#34;&gt;管道&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;如果一行容不下一个管道，将正哥管道操作分割成梅钢一个管道&lt;/li&gt;
&lt;li&gt;管道操作的下一部分应放在新行且缩进两个空格&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# All fits on one line
command1 | command2

# Long commands
command1 \
| command2 \
| command3 \
| command4
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;循环&#34;&gt;循环&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;将&lt;code&gt;; do&lt;/code&gt;，&lt;code&gt;; then&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;，&lt;code&gt;for&lt;/code&gt;，&lt;code&gt;if&lt;/code&gt;放在同一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt;单独成一行&lt;/li&gt;
&lt;li&gt;结束语句单独一行并与开始语句垂直对齐&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;for dir in ${dirs_to_cleanup}; do
if [[ -d &amp;quot;${dir}/${ORACLE_SID}&amp;quot; ]]; then
log_date &amp;quot;Cleaning up old files in ${dir}/${ORACLE_SID}&amp;quot;
rm &amp;quot;${dir}/${ORACLE_SID}/&amp;quot;*
if [[ &amp;quot;$?&amp;quot; -ne 0 ]]; then
error_message
fi
else
mkdir -p &amp;quot;${dir}/${ORACLE_SID}&amp;quot;
if [[ &amp;quot;$?&amp;quot; -ne 0 ]]; then
error_message
fi
fi
done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;case-语句&#34;&gt;case 语句&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;通过 2 个空格缩进可选项&lt;/li&gt;
&lt;li&gt;同一行可选项的模式右圆括号知乎和结束符&lt;code&gt;;;&lt;/code&gt;之前各一个空格&lt;/li&gt;

&lt;li&gt;&lt;p&gt;长可选项或多命令可选项应被拆成多行，模式、操作和结束符&lt;code&gt;;;&lt;/code&gt;在不同的行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# multi-lines
case &amp;quot;${expression}&amp;quot; in
a)
variable=&amp;quot;...&amp;quot;
some_command &amp;quot;${variable}&amp;quot; &amp;quot;${other_expr}&amp;quot; ...
;;
absolute)
actions=&amp;quot;relative&amp;quot;
another_command &amp;quot;${actions}&amp;quot; &amp;quot;${other_expr}&amp;quot; ...
;;
*)
error &amp;quot;Unexpected expression &#39;${expression}&#39;&amp;quot;
;;
esac

# one-line
verbose=&#39;false&#39;
aflag=&#39;&#39;
bflag=&#39;&#39;
files=&#39;&#39;
while getopts &#39;abf:v&#39; flag; do
case &amp;quot;${flag}&amp;quot; in
a) aflag=&#39;true&#39; ;;
b) bflag=&#39;true&#39; ;;
f) files=&amp;quot;${OPTARG}&amp;quot; ;;
v) verbose=&#39;true&#39; ;;
*) error &amp;quot;Unexpected option ${flag}&amp;quot; ;;
esac
done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;变量扩展&#34;&gt;变量扩展&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;按照优先级顺序

&lt;ul&gt;
&lt;li&gt;与现存代码发现的保持一致&lt;/li&gt;
&lt;li&gt;阅读&lt;a href=&#34;#引用&#34;&gt;引用变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;推荐使用&lt;code&gt;${var}&lt;/code&gt;而不是&lt;code&gt;$var&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Section of recommended cases.

# Preferred style for &#39;special&#39; variables:
echo &amp;quot;Positional: $1&amp;quot; &amp;quot;$5&amp;quot; &amp;quot;$3&amp;quot;
echo &amp;quot;Specials: !=$!, -=$-, _=$_. ?=$?, #=$# *=$* @=$@ \$=$$ ...&amp;quot;

# Braces necessary:
echo &amp;quot;many parameters: ${10}&amp;quot;

# Braces avoiding confusion:
# Output is &amp;quot;a0b0c0&amp;quot;
set -- a b c
echo &amp;quot;${1}0${2}0${3}0&amp;quot;

# Preferred style for other variables:
echo &amp;quot;PATH=${PATH}, PWD=${PWD}, mine=${some_var}&amp;quot;
while read f; do
echo &amp;quot;file=${f}&amp;quot;
done &amp;lt; &amp;lt;(ls -l /tmp)

# Section of discouraged cases

# Unquoted vars, unbraced vars, brace-quoted single letter
# shell specials.
echo a=$avar &amp;quot;b=$bvar&amp;quot; &amp;quot;PID=${$}&amp;quot; &amp;quot;${1}&amp;quot;

# Confusing use: this is expanded as &amp;quot;${1}0${2}0${3}0&amp;quot;,
# not &amp;quot;${10}${20}${30}
set -- a b c
echo &amp;quot;$10$20$30&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;引用&#34;&gt;引用&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;除非需要小心不带引用的扩展，否则总是引用包含变量、命令替换符、空格或 shell 元字符的字符串&lt;/li&gt;
&lt;li&gt;推荐引用是单词的字符串(而不是命令选项或者路径名)&lt;/li&gt;
&lt;li&gt;不要引用整数&lt;/li&gt;
&lt;li&gt;注意&lt;code&gt;[[&lt;/code&gt;中模式匹配的引用规则&lt;/li&gt;

&lt;li&gt;&lt;p&gt;请使用&lt;code&gt;$@&lt;/code&gt;除非有特殊原因需要使用&lt;code&gt;S*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# &#39;Single&#39; quotes indicate that no substitution is desired.
# &amp;quot;Double&amp;quot; quotes indicate that substitution is required/tolerated.

# Simple examples
# &amp;quot;quote command substitutions&amp;quot;
flag=&amp;quot;$(some_command and its args &amp;quot;$@&amp;quot; &#39;quoted separately&#39;)&amp;quot;

# &amp;quot;quote variables&amp;quot;
echo &amp;quot;${flag}&amp;quot;

# &amp;quot;never quote literal integers&amp;quot;
value=32
# &amp;quot;quote command substitutions&amp;quot;, even when you expect integers
number=&amp;quot;$(generate_number)&amp;quot;

# &amp;quot;prefer quoting words&amp;quot;, not compulsory
readonly USE_INTEGER=&#39;true&#39;

# &amp;quot;quote shell meta characters&amp;quot;
echo &#39;Hello stranger, and well met. Earn lots of $$$&#39;
echo &amp;quot;Process $$: Done making \$\$\$.&amp;quot;

# &amp;quot;command options or path names&amp;quot;
# ($1 is assumed to contain a value here)
grep -li Hugo /dev/null &amp;quot;$1&amp;quot;

# Less simple examples
# &amp;quot;quote variables, unless proven false&amp;quot;: ccs might be empty
git send-email --to &amp;quot;${reviewers}&amp;quot; ${ccs:+&amp;quot;--cc&amp;quot; &amp;quot;${ccs}&amp;quot;}

# Positional parameter precautions: $1 might be unset
# Single quotes leave regex as-is.
grep -cP &#39;([Ss]pecial|\|?characters*)$&#39; ${1:+&amp;quot;$1&amp;quot;}

# For passing on arguments,
# &amp;quot;$@&amp;quot; is right almost everytime, and
# $* is wrong almost everytime:
#
# * $* and $@ will split on spaces, clobbering up arguments
#   that contain spaces and dropping empty strings;
# * &amp;quot;$@&amp;quot; will retain arguments as-is, so no args
#   provided will result in no args being passed on;
#   This is in most cases what you want to use for passing
#   on arguments.
# * &amp;quot;$*&amp;quot; expands to one argument, with all args joined
#   by (usually) spaces,
#   so no args provided will result in one empty string
#   being passed on.
# (Consult &#39;man bash&#39; for the nit-grits ;-)

set -- 1 &amp;quot;2 two&amp;quot; &amp;quot;3 three tres&amp;quot;; echo $# ; set -- &amp;quot;$*&amp;quot;; echo &amp;quot;$#, $@&amp;quot;)
set -- 1 &amp;quot;2 two&amp;quot; &amp;quot;3 three tres&amp;quot;; echo $# ; set -- &amp;quot;$@&amp;quot;; echo &amp;quot;$#, $@&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;特性及错误&#34;&gt;特性及错误&lt;/h3&gt;

&lt;h4 id=&#34;命令替换&#34;&gt;命令替换&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;${command}&lt;/code&gt;而不是反引号&lt;/li&gt;
&lt;li&gt;嵌套的反引号要求用反斜杠转义内部的反引号，而&lt;code&gt;${command}&lt;/code&gt;形式嵌套时不需要改变，易于阅读&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# This is preferred:
var=&amp;quot;$(command &amp;quot;$(command1)&amp;quot;)&amp;quot;

# This is not:
var=&amp;quot;`command \`command1\``&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;test-和&#34;&gt;&lt;code&gt;test&lt;/code&gt;,&lt;code&gt;[&lt;/code&gt;和&lt;code&gt;[[&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;推荐使用&lt;code&gt;[[ ... ]]&lt;/code&gt;，而不是&lt;code&gt;[&lt;/code&gt;，&lt;code&gt;test&lt;/code&gt;和&lt;code&gt;/usr/bin [&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;[[ ... ]]&lt;/code&gt;之间不会有路径名称扩展或单词分割发生，且允许正则表达式匹配&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# This ensures the string on the left is made up of characters in the
# alnum character class followed by the string name.
# Note that the RHS should not be quoted here.
# For the gory details, see
# E14 at http://tiswww.case.edu/php/chet/bash/FAQ
if [[ &amp;quot;filename&amp;quot; =~ ^[[:alnum:]]+name ]]; then
echo &amp;quot;Match&amp;quot;
fi

# This matches the exact pattern &amp;quot;f*&amp;quot; (Does not match in this case)
if [[ &amp;quot;filename&amp;quot; == &amp;quot;f*&amp;quot; ]]; then
echo &amp;quot;Match&amp;quot;
fi

# This gives a &amp;quot;too many arguments&amp;quot; error as f* is expanded to the
# contents of the current directory
if [ &amp;quot;filename&amp;quot; == f* ]; then
echo &amp;quot;Match&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;测试字符串&#34;&gt;测试字符串&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;尽可能使用引用，而不是过滤字符串&lt;/li&gt;
&lt;li&gt;使用空&lt;code&gt;-z&lt;/code&gt;或非空&lt;code&gt;-n&lt;/code&gt;字符串测试，而不是过滤字符串&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Do this:
if [[ &amp;quot;${my_var}&amp;quot; = &amp;quot;some_string&amp;quot; ]]; then
do_something
fi

# -z (string length is zero) and -n (string length is not zero) are
# preferred over testing for an empty string
if [[ -z &amp;quot;${my_var}&amp;quot; ]]; then
do_something
fi

# This is OK (ensure quotes on the empty side), but not preferred:
if [[ &amp;quot;${my_var}&amp;quot; = &amp;quot;&amp;quot; ]]; then
do_something
fi

# Not this:
if [[ &amp;quot;${my_var}X&amp;quot; = &amp;quot;some_stringX&amp;quot; ]]; then
do_something
fi

# Use this
if [[ -n &amp;quot;${my_var}&amp;quot; ]]; then
do_something
fi

# Instead of this as errors can occur if ${my_var} expands to a test
# flag
if [[ &amp;quot;${my_var}&amp;quot; ]]; then
do_something
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;文件名的通配符扩展&#34;&gt;文件名的通配符扩展&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用明确的路径&lt;/li&gt;
&lt;li&gt;文件名可能以&lt;code&gt;-&lt;/code&gt;开头，使用扩展通配符&lt;code&gt;./*&lt;/code&gt;比&lt;code&gt;*&lt;/code&gt;更安全&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Here&#39;s the contents of the directory:
# -f  -r  somedir  somefile

# This deletes almost everything in the directory by force
rm -v *
#removed directory: `somedir&#39;
#removed `somefile&#39;

# As opposed to:
rm -v ./*
#removed `./-f&#39;
#removed `./-r&#39;
#rm: cannot remove `./somedir&#39;: Is a directory
#removed `./somefile&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;eval&#34;&gt;eval&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;避免使用 eval&lt;/li&gt;
&lt;li&gt;当用于给变量赋值时，eval 解析输入，并能够设置变量，但无法检查变量是什么&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# What does this set?
# Did it succeed? In part or whole?
eval $(set_my_variables)

# What happens if one of the returned values has a space in it?
variable=&amp;quot;$(eval some_function)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;管道导向-while-循环&#34;&gt;管道导向 while 循环&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用过程替换或 for 虚幻，而不是管道导向 while 循环&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 while 循环中被修改的变量不能传递给父 shell，因为循环命令是在一个子 shell 中运行的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;last_line=&#39;NULL&#39;
your_command | while read line; do
last_line=&amp;quot;${line}&amp;quot;
done

# This will output &#39;NULL&#39;
echo &amp;quot;${last_line}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果确定输入中不包含空格或特殊符号，可使用一个 for 循环&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;total=0
# Only do this if there are no spaces in return values.
for value in $(command); do
total+=&amp;quot;${value}&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用过程替换允许重定向输出，但是请将命令放入一个显式的子 shell 中，而不是 bash 为 while 循环创建的隐式子 shell&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;total=0
last_file=
while read count filename; do
total+=&amp;quot;${count}&amp;quot;
last_file=&amp;quot;${filename}&amp;quot;
done &amp;lt; &amp;lt;(your_command | uniq -c)

# This will output the second field of the last line of output from
# the command.
echo &amp;quot;Total = ${total}&amp;quot;
echo &amp;quot;Last one = ${last_file}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当不需要传递复杂的结果给父 shell 时可使用 while 循环，当不希望改变父 shell 的范围变量时也是有用的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Trivial implementation of awk expression:
#   awk &#39;$3 == &amp;quot;nfs&amp;quot; { print $2 &amp;quot; maps to &amp;quot; $1 }&#39; /proc/mounts
cat /proc/mounts | while read src dest type opts rest; do
if [[ ${type} == &amp;quot;nfs&amp;quot; ]]; then
echo &amp;quot;NFS ${dest} maps to ${src}&amp;quot;
fi
done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;命名约定&#34;&gt;命名约定&lt;/h3&gt;

&lt;h4 id=&#34;函数名&#34;&gt;函数名&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用小写字符，用下划线分割单词，使用双冒号&lt;code&gt;::&lt;/code&gt;分割库&lt;/li&gt;
&lt;li&gt;函数名之后必须有圆括号。关键词&lt;code&gt;function&lt;/code&gt;可选，但必须在一个项目中保持一致

&lt;ul&gt;
&lt;li&gt;函数名之后有括号时，关键词&lt;code&gt;function&lt;/code&gt;是多余的，但是促进了函数的快速辨识&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大括号和函数名位于同一行，且函数名和圆括号之间没有空格&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Single function
my_func() {
#...
}

# Part of a package
mypackage::my_func() {
#...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;变量名&#34;&gt;变量名&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;如&lt;a href=&#34;#函数名&#34;&gt;函数名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;循环的变量名应该和循环的任何变量同样命名&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;for zone in ${zones}; do
something_with &amp;quot;${zone}&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;常量和环境变量名&#34;&gt;常量和环境变量名&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;全部大写，用下划线分割，声明在文件的顶部&lt;/li&gt;
&lt;li&gt;有的第一次设置就变成了常量(如通过 getopts)，所以可以在 getopts 或基于条件来设定常量，但之后应立即设置为只读&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在函数中&lt;code&gt;declare&lt;/code&gt;不会对全局变量进行操作，所以推荐使用&lt;code&gt;readonly&lt;/code&gt;和&lt;code&gt;export&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Constant
readonly PATH_TO_FILES=&#39;/some/path&#39;

# Both constant and environment
declare -xr ORACLE_SID=&#39;PROD&#39;

VERBOSE=&#39;false&#39;
while getopts &#39;v&#39; flag; do
case &amp;quot;${flag}&amp;quot; in
v) VERBOSE=&#39;true&#39; ;;
esac
done
readonly VERBOSE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;源文件名&#34;&gt;源文件名&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;小写，可使用下划线分割单词&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;只读变量&#34;&gt;只读变量&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;readonly&lt;/code&gt;或&lt;code&gt;declare -r&lt;/code&gt;确保变量只读&lt;/li&gt;

&lt;li&gt;&lt;p&gt;因为全局变量在 shell 中广泛使用，所以在使用过程中捕获错误很重要。明确只读变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zip_version=&amp;quot;$(dpkg --status zip | grep Version: | cut -d &#39; &#39; -f 2)&amp;quot;
if [[ -z &amp;quot;${zip_version}&amp;quot; ]]; then
error_message
else
readonly zip_version
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;使用本地变量&#34;&gt;使用本地变量&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;local&lt;/code&gt;声明特定功能的变量，可以确保只在函数内部和子函数中可见，避免了污染全局命名空间&lt;/li&gt;
&lt;li&gt;当赋值的值由命令替换提供时，声明和赋值需分开。因为内建的&lt;code&gt;local&lt;/code&gt;命令不会从命令替换中传递退出码&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;my_func2() {
local name=&amp;quot;$1&amp;quot;

# Separate lines for declaration and assignment:
local my_var
my_var=&amp;quot;$(my_func)&amp;quot; || return

# DO NOT do this: $? contains the exit code of &#39;local&#39;, not my_func
local my_var=&amp;quot;$(my_func)&amp;quot;
[[ $? -eq 0 ]] || return
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;函数位置&#34;&gt;函数位置&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;将文件中所有函数一起放在常量下面，不要在函数直接隐藏可执行代码&lt;/li&gt;
&lt;li&gt;只有&lt;code&gt;includes&lt;/code&gt;，&lt;code&gt;set&lt;/code&gt;声明和常量设置可能在函数声明之前完成&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;主函数-main&#34;&gt;主函数 main&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;对于包含至少一个其他函数的足够长的脚本，需要称为&lt;code&gt;main&lt;/code&gt;的函数&lt;/li&gt;
&lt;li&gt;便于查找程序的开始，同时允许定义更多变量为局部变量&lt;/li&gt;
&lt;li&gt;文件中最后的非注释行应该是对&lt;code&gt;main&lt;/code&gt;函数的调用&lt;code&gt;main &amp;quot;$@&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;调用命令&#34;&gt;调用命令&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;检查返回值&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;总是检查返回值，并给出信息返回值&lt;/li&gt;
&lt;li&gt;对于非管道命令，使用&lt;code&gt;$?&lt;/code&gt;或直接通过一个&lt;code&gt;if&lt;/code&gt;语句来检查以保持简洁&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if ! mv &amp;quot;${file_list}&amp;quot; &amp;quot;${dest_dir}/&amp;quot; ; then
echo &amp;quot;Unable to move ${file_list} to ${dest_dir}&amp;quot; &amp;gt;&amp;amp;2
exit &amp;quot;${E_BAD_MOVE}&amp;quot;
fi
  
# Or
mv &amp;quot;${file_list}&amp;quot; &amp;quot;${dest_dir}/&amp;quot;
if [[ &amp;quot;$?&amp;quot; -ne 0 ]]; then
echo &amp;quot;Unable to move ${file_list} to ${dest_dir}&amp;quot; &amp;gt;&amp;amp;2
exit &amp;quot;${E_BAD_MOVE}&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;bash 也有&lt;code&gt;PIPESTATUS&lt;/code&gt;变量，允许检查从管道所有部分返回的代码&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果仅仅检查整个管道成功还是失败，可用下面的方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar -cf - ./* | ( cd &amp;quot;${dir}&amp;quot; &amp;amp;&amp;amp; tar -xf - )
if [[ &amp;quot;${PIPESTATUS[0]}&amp;quot; -ne 0 || &amp;quot;${PIPESTATUS[1]}&amp;quot; -ne 0 ]]; then
echo &amp;quot;Unable to tar files to ${dir}&amp;quot; &amp;gt;&amp;amp;2
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;只要运用任何其他命令，&lt;code&gt;PIPESTATUS&lt;/code&gt;会被覆盖。如果需要机遇管道中发生的错误执行不同的操作，需要在运行命令后立即将&lt;code&gt;PIPESTATUS&lt;/code&gt;赋值给另一个变量，&lt;code&gt;[&lt;/code&gt;是一个会将&lt;code&gt;PIPESTATUS&lt;/code&gt;擦出的命令&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar -cf - ./* | ( cd &amp;quot;${DIR}&amp;quot; &amp;amp;&amp;amp; tar -xf - )
return_codes=(${PIPESTATUS[*]})
if [[ &amp;quot;${return_codes[0]}&amp;quot; -ne 0 ]]; then
do_something
fi
if [[ &amp;quot;${return_codes[1]}&amp;quot; -ne 0 ]]; then
do_something_else
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内建命令和外部命令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在调用 shell 内建命令和调用另外的程序之间选择，选择内建命令&lt;/li&gt;
&lt;li&gt;例如在&lt;code&gt;bash(1)&lt;/code&gt;中参数扩展函数，内建函数更强健和便携，尤其是跟&lt;code&gt;sed&lt;/code&gt;这样的命令比较&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Prefer this:
addition=$((${X} + ${Y}))
substitution=&amp;quot;${string/#foo/bar}&amp;quot;
  
# Instead of this:
addition=&amp;quot;$(expr ${X} + ${Y})&amp;quot;
substitution=&amp;quot;$(echo &amp;quot;${string}&amp;quot; | sed -e &#39;s/^foo/bar/&#39;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;c-风格指南-https-zh-google-styleguide-readthedocs-io-en-latest-google-cpp-styleguide-contents&#34;&gt;&lt;a href=&#34;https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/&#34; target=&#34;_blank&#34;&gt;C++ 风格指南&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&#34;python-风格指南-https-zh-google-styleguide-readthedocs-io-en-latest-google-python-styleguide-contents&#34;&gt;&lt;a href=&#34;https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/&#34; target=&#34;_blank&#34;&gt;Python 风格指南&lt;/a&gt;&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>ldconfig</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_ldconfig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_ldconfig/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ldconfig&#34;&gt;ldconfig&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ldconfig-%E4%B8%8E-etcldsoconf&#34;&gt;ldconfig 与 /etc/ld.so.conf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E5%BA%93%E8%B7%AF%E5%BE%84&#34;&gt;添加动态库路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ldd&#34;&gt;ldd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ldconfig-与-etc-ld-so-conf&#34;&gt;ldconfig 与 /etc/ld.so.conf&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ldconfig&lt;/code&gt; 默认查找的路径包括 &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;/usr/lib&lt;/code&gt;, &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 列举的目录和 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如何将动态函数库加载到高速缓存

&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 写入想要读入告诉缓存中的动态函数库所在的目录&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;ldconfig&lt;/code&gt; 可执行文件将 &lt;code&gt;/etc/ld.so.conf&lt;/code&gt; 的数据读入缓存&lt;/li&gt;
&lt;li&gt;同时将数据记录一份在 &lt;code&gt;/etc/ld.so.cache&lt;/code&gt; 文件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;添加动态库路径&#34;&gt;添加动态库路径&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;查找库路径 &lt;code&gt;sudo find / -iname *library_name*.so*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方法 1

&lt;ul&gt;
&lt;li&gt;追加路径到 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当前终端生效: 在终端执行 &lt;code&gt;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/library&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;~/.bashrc&lt;/code&gt; 或 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中追加 &lt;code&gt;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/library&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;source ~/.bashrc&lt;/code&gt; 或 &lt;code&gt;source ~/.bash_profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;sudo ldconfig&lt;/code&gt; 更新缓存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方法 2

&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;/etc/ld.so.conf.d/&lt;/code&gt; 中创建一个新文件 &lt;code&gt;your_lib.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;/etc/ld.so.conf.d/your_lib.conf&lt;/code&gt; 中写入想要添加的路径&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;sudo ldconfig&lt;/code&gt; 更新缓存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;方法 3

&lt;ul&gt;
&lt;li&gt;将库移动到 &lt;code&gt;/usr/lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;sudo ldconfig&lt;/code&gt; 更新缓存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ldd&#34;&gt;ldd&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ldd filename&lt;/code&gt; 可以显示可执行文件 filename 所依赖的动态函数库&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>linux 下其他命令</title>
      <link>https://xueqing.github.io/blog/ubuntu/linux_other_cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/linux_other_cmd/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux-%E4%B8%8B%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4&#34;&gt;linux 下其他命令&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%85%B6%E4%BB%96&#34;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F&#34;&gt;文件格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ftp&#34;&gt;ftp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4-tar&#34;&gt;压缩命令 tar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;添加可执行权限&lt;code&gt;chmod a+x filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改本机 IP 地址&lt;code&gt;ifconfig eth0 192.168.1.110&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;列举目录&lt;code&gt;ls -lt&lt;/code&gt;按时间顺序显示&lt;/li&gt;
&lt;li&gt;查看所有用户&lt;code&gt;cat /etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看所有用户组&lt;code&gt;cat /etc/group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加用户到已存在的组：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo adduser user-name user-group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo gpasswd -a user-name group-name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;从用户组删除删除&lt;code&gt;：&lt;/code&gt;sudo gpasswd -d user-name user-group`&lt;/li&gt;
&lt;li&gt;安装 deb 文件缺少依赖库时继续执行&lt;code&gt;sudo apt-get install -f&lt;/code&gt;即可自动安装依赖库并安装 deb 包&lt;/li&gt;
&lt;li&gt;查看指定监听端口的服务&lt;code&gt;lsof -i :3000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;文件格式&#34;&gt;文件格式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/bin/sh^M: bad interpreter: No such file or directory&lt;/code&gt;脚本异常，转换为 UNIX 格式

&lt;ul&gt;
&lt;li&gt;windows：UE 或 EditPlus 转换编码为UNIX&lt;/li&gt;
&lt;li&gt;Linux：&lt;/li&gt;
&lt;li&gt;可执行权限&lt;code&gt;chmod a+x filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改文件格式&lt;code&gt;vi filename&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;查看文件格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set ff&lt;/code&gt;或&lt;code&gt;:set fileformat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fileformat=dos&lt;/code&gt;或&lt;code&gt;fileformat=unix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改文件格式&lt;code&gt;:set ff=unix或:set fieformat=unix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;保存退出&lt;code&gt;:wq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;执行文件&lt;code&gt;./filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ftp&#34;&gt;ftp&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;连接&lt;code&gt;ftp ServerIP&lt;/code&gt;，输入用户名和密码&lt;/li&gt;
&lt;li&gt;切换 ftp 所在目录&lt;code&gt;cd DestDir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;切换本地目录&lt;code&gt;lcd DestDir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上传文件&lt;code&gt;put FileName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载文件&lt;code&gt;mget FileName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;退出&lt;code&gt;exit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;压缩命令-tar&#34;&gt;压缩命令 tar&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;查看压缩文件&lt;code&gt;tar -tvf filename&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mongodb 环境搭建</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_mongodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_mongodb/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#mongodb-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&#34;&gt;mongodb 环境搭建&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-apt-%E5%AE%89%E8%A3%85&#34;&gt;1 apt 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E5%91%BD%E4%BB%A4&#34;&gt;2 命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#21-%E5%90%AF%E5%8A%A8-mongodb&#34;&gt;2.1 启动 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81-mongodb&#34;&gt;2.2 查看状态 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23-%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8-mongodb&#34;&gt;2.3 重新启动 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24-%E5%81%9C%E6%AD%A2-mongodb&#34;&gt;2.4 停止 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E5%8D%B8%E8%BD%BD-mongodb&#34;&gt;3 卸载 MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8&#34;&gt;4 设置开机自启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE&#34;&gt;5 开启远程访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E6%95%85%E9%9A%9C%E9%97%AE%E9%A2%98&#34;&gt;6 故障问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-apt-安装&#34;&gt;1 apt 安装&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
echo &amp;quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse&amp;quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
sudo apt-get update
sudo apt-get install -y mongodb-org
echo &amp;quot;mongodb-org hold&amp;quot; | sudo dpkg --set-selections
echo &amp;quot;mongodb-org-server hold&amp;quot; | sudo dpkg --set-selections
echo &amp;quot;mongodb-org-shell hold&amp;quot; | sudo dpkg --set-selections
echo &amp;quot;mongodb-org-mongos hold&amp;quot; | sudo dpkg --set-selections
echo &amp;quot;mongodb-org-tools hold&amp;quot; | sudo dpkg --set-selections

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-命令&#34;&gt;2 命令&lt;/h2&gt;

&lt;h3 id=&#34;2-1-启动-mongodb&#34;&gt;2.1 启动 MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-2-查看状态-mongodb&#34;&gt;2.2 查看状态 MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service mongod status
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-重新启动-mongodb&#34;&gt;2.3 重新启动 MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service mongod restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-4-停止-mongodb&#34;&gt;2.4 停止 MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service mongod stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-卸载-mongodb&#34;&gt;3 卸载 MongoDB&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo service mongod stop
sudo apt-get purge mongodb-org*
sudo rm -r /var/log/mongodb
sudo rm -r /var/lib/mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-设置开机自启动&#34;&gt;4 设置开机自启动&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo systemctl enable mongod
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-开启远程访问&#34;&gt;5 开启远程访问&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vim /etc/mongod.conf
# 把 bindIp:127.0.0.1 修改为 bindIp:0.0.0.0

# 之后重启服务
sudo service mongod restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-故障问题&#34;&gt;6 故障问题&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;遇到连接拒绝问题 &lt;code&gt;Failed to connect to 127.0.0.1:27017, in(checking socket for error after poll), reason: Connection refused&lt;/code&gt;，执行下面命令可解决&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo rm /var/lib/mongodb/mongod.lock
sudo service mongod restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>mysql</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_mysql/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-ubuntu-%e5%ae%89%e8%a3%85%e5%92%8c%e9%85%8d%e7%bd%ae-mysql&#34;&gt;1 ubuntu 安装和配置 mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-mysql%e5%91%bd%e4%bb%a4&#34;&gt;2 mysql命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-ubuntu-安装和配置-mysql&#34;&gt;1 ubuntu 安装和配置 mysql&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;执行&lt;code&gt;sudo apt-get insall mysql-server mysql-client&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改配置运行远程连接

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注释或删除&lt;code&gt;bind-address           = 127.0.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改数据库的授权&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql -uroot -p&lt;/code&gt;输入密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush privileges;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启数据库服务&lt;code&gt;sudo service mysql restart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-mysql命令&#34;&gt;2 mysql命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;导出数据库&lt;code&gt;mysqldump -uroot -p bmi_nvr &amp;gt; bmi_nvr.sql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导出数据库表&lt;code&gt;mysqldump -uroot -p bmi_nvr sip_info&amp;gt; bmi_nvr_sipinfo.sql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导入数据表:进入 mysql 命令行后&lt;code&gt;use bmi_nvr;source /home/kiki/bmi_nvr.sql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mysql source 防止乱码

&lt;ul&gt;
&lt;li&gt;备份&lt;code&gt;mysqldump -uroot -p --default-character-set=utf8 bmi_nvr &amp;gt; bmi_nvr.sql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导入&lt;code&gt;mysqldump -uroot -p --default-character-set=utf8 bmi_nvr sip_info&amp;gt; bmi_nvr_sipinfo.sql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入 mysql 命令行&lt;code&gt;use bmi_nvr;source /home/kiki/bmi_nvr.sql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node.js 环境搭建</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_nodejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_nodejs/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e7%89%88%e6%9c%ac%e8%a6%81%e6%b1%82&#34;&gt;1 版本要求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e6%8f%90%e4%be%9b%e4%bb%a5%e4%b8%8b%e5%9b%9b%e7%a7%8d%e6%96%b9%e5%bc%8f%e5%ae%89%e8%a3%85ps-%e5%bb%ba%e8%ae%ae%e7%ac%ac%e5%9b%9b%e7%a7%8d%e6%96%b9%e5%bc%8f%e5%ae%89%e8%a3%85&#34;&gt;2 提供以下四种方式安装(PS: 建议第四种方式安装)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%e8%b0%83%e7%94%a8%e5%ae%98%e7%bd%91%e8%84%9a%e6%9c%ac%e8%87%aa%e5%8a%a8%e5%ae%89%e8%a3%85&#34;&gt;2.1 调用官网脚本自动安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%e4%bd%bf%e7%94%a8%e4%ba%8c%e8%bf%9b%e5%88%b6%e5%8c%85%e6%96%87%e4%bb%b6&#34;&gt;2.2 使用二进制包文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#221-%e8%ae%be%e7%bd%ae%e6%96%87%e4%bb%b6%e8%b7%af%e5%be%84&#34;&gt;2.2.1 设置文件路径&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#222-%e5%bb%ba%e7%ab%8b%e8%bd%af%e8%bf%9e%e6%8e%a5&#34;&gt;2.2.2 建立软连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23-apt-%e5%ae%89%e8%a3%85&#34;&gt;2.3 apt 安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%e6%9f%a5%e7%9c%8bnodejs%e7%9a%84%e7%89%88%e6%9c%ac&#34;&gt;3 查看nodejs的版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%e6%9f%a5%e7%9c%8bnpm%e7%9a%84%e7%89%88%e6%9c%ac&#34;&gt;4 查看npm的版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-版本要求&#34;&gt;1 版本要求&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;node &amp;gt;= 8.x 目前稳定版本为 10.x&lt;/li&gt;
&lt;li&gt;npm &amp;gt;= 5.x&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-提供以下四种方式安装-ps-建议第四种方式安装&#34;&gt;2 提供以下四种方式安装(PS: 建议第四种方式安装)&lt;/h2&gt;

&lt;h3 id=&#34;2-1-调用官网脚本自动安装&#34;&gt;2.1 调用官网脚本自动安装&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nodesource/distributions/blob/master/README.md#debinstall&#34; target=&#34;_blank&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-2-使用二进制包文件&#34;&gt;2.2 使用二进制包文件&lt;/h3&gt;

&lt;h4 id=&#34;2-2-1-设置文件路径&#34;&gt;2.2.1 设置文件路径&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 按下载版本修改 VERSION
VERSION=v10.15.1
DISTRO=linux-x64
sudo mkdir -p /usr/local/lib/nodejs
sudo tar -xJvf node-$VERSION-$DISTRO.tar.xz -C /usr/local/lib/nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-2-2-建立软连接&#34;&gt;2.2.2 建立软连接&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;VERSION=v10.15.1
DISTRO=linux-x64
sudo ln -s /usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin/node /usr/bin/node
sudo ln -s /usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin/npm /usr/bin/npm
sudo ln -s /usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin/npx /usr/bin/npx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-apt-安装&#34;&gt;2.3 apt 安装&lt;/h3&gt;

&lt;p&gt;安装版本较低，需手动更新&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 安装 nodejs
sudo apt install node
# 安装 nodejs 的依赖库管理工具 npm
sudo apt install npm
# 安装 nodejs 版本管理工具 n
sudo npm install n -g
# 升级 nodejs 的版本
sudo n stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install node
sudo apt install npm
# 升级 npm
sudo npm install npm@latest -g
# 升级 node
sudo npm install -g n
sudo n stable
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-查看nodejs的版本&#34;&gt;3 查看nodejs的版本&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;node
# 或
node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-查看npm的版本&#34;&gt;4 查看npm的版本&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>OpenSSL 版本不兼容</title>
      <link>https://xueqing.github.io/blog/ubuntu/openssl_version_mismatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/openssl_version_mismatch/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# git 命令失败
ssh: /usr/local/lib/libcrypto.so.1.0.0: no version information available (required by ssh)
ssh: /usr/local/lib/libcrypto.so.1.0.0: no version information available (required by ssh)
OpenSSL version mismatch. Built against 1000207f, you have 1000103f
# ssh 可执行文件链接库
ldd /usr/bin/ssh
/usr/bin/ssh: /usr/local/lib/libcrypto.so.1.0.0: no version information available (required by /usr/bin/ssh)
/usr/bin/ssh: /usr/local/lib/libcrypto.so.1.0.0: no version information available (required by /usr/bin/ssh)
        linux-vdso.so.1 =&amp;gt;  (0x00007fff3fdc1000)
        libselinux.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f30e3f81000)
        libcrypto.so.1.0.0 =&amp;gt; /usr/local/lib/libcrypto.so.1.0.0 (0x00007f30e3b96000)# this line is differeent
        libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f30e3992000)
        libz.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f30e3778000)
        libresolv.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f30e355d000)
        libgssapi_krb5.so.2 =&amp;gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f30e3313000)
        libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f30e2f49000)
        libpcre.so.3 =&amp;gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f30e2cd9000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f30e4453000)
        libkrb5.so.3 =&amp;gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f30e2a07000)
        libk5crypto.so.3 =&amp;gt; /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f30e27d8000)
        libcom_err.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f30e25d4000)
        libkrb5support.so.0 =&amp;gt; /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f30e23c9000)
        libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f30e21ac000)
        libkeyutils.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f30e1fa8000)
# 正常情况下查看 ssh 可执行文件链接库
ldd /usr/bin/ssh
        linux-vdso.so.1 =&amp;gt;  (0x00007fff59ca9000)
        libselinux.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f324fa4d000)
        libcrypto.so.1.0.0 =&amp;gt; /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 (0x00007f324f608000)# this line is differeent
        libdl.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f324f404000)
        libz.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007f324f1ea000)
        libresolv.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f324efcf000)
        libgssapi_krb5.so.2 =&amp;gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f324ed85000)
        libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f324e9bb000)
        libpcre.so.3 =&amp;gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f324e74b000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f324ff1f000)
        libkrb5.so.3 =&amp;gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f324e479000)
        libk5crypto.so.3 =&amp;gt; /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f324e24a000)
        libcom_err.so.2 =&amp;gt; /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f324e046000)
        libkrb5support.so.0 =&amp;gt; /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f324de3b000)
        libpthread.so.0 =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f324dc1e000)
        libkeyutils.so.1 =&amp;gt; /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f324da1a000)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;原因

&lt;ul&gt;
&lt;li&gt;在 ubuntu 编译了一个 OpenSSL 的源码，并执行了&lt;code&gt;sudo make install&lt;/code&gt;。 Ubuntu 自带的 OpenSSL 版本带有额外的补丁，包含版本信息等，但是标准的 OpenSSL 库(1.1.0 之前)是没有版本信息的。OpenSSH 在运行时链接到源码编译的 OpenSSL 库，没有这些版本信息符号&lt;/li&gt;
&lt;li&gt;OpenSSH 和 OpenSSL 的安装顺序是有一定限制的，可单独升级 OpenSSH，但升级了 OpenSSL 之后，需要重新编译 OpenSSH 或升级，否则不能使用 OpenSSH&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;解决方法

&lt;ul&gt;
&lt;li&gt;删除&lt;code&gt;/usr/local/include/openssl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除&lt;code&gt;/usr/local/lib/libcrypto.*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除&lt;code&gt;/usr/local/lib/libssl.*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RabbitMQ 环境搭建</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_mq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_mq/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96&#34;&gt;1 安装依赖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e5%ae%89%e8%a3%85-rabbitmq&#34;&gt;2 安装 RabbitMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%e5%90%af%e7%94%a8-rabbitmq-%e7%ae%a1%e7%90%86%e6%8e%a7%e5%88%b6%e5%8f%b0&#34;&gt;3 启用 RabbitMQ 管理控制台&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%e5%88%9b%e5%bb%ba%e7%94%a8%e6%88%b7%e5%b9%b6%e8%ae%be%e7%bd%ae%e8%a7%92%e8%89%b2&#34;&gt;3.1 创建用户并设置角色&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-rabbitmq-%e6%9c%8d%e5%8a%a1%e5%91%bd%e4%bb%a4&#34;&gt;4 RabbitMQ 服务命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%e4%bf%ae%e6%94%b9%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6&#34;&gt;5 修改服务配置文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-安装依赖&#34;&gt;1 安装依赖&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 添加 erlang 源到 apt 仓库
wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
sudo dpkg -i erlang-solutions_1.0_all.deb
# 更新安装
sudo apt-get update
sudo apt-get install erlang
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-安装-rabbitmq&#34;&gt;2 安装 RabbitMQ&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 调用官方安装脚本
curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.deb.sh | sudo bash
# 添加 RabbitMQ 签名 (会出现 403 错误，可忽略不运行)
wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -
# 更新并安装
sudo apt-get update  #（可忽略不运行）
sudo apt-get install rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-启用-rabbitmq-管理控制台&#34;&gt;3 启用 RabbitMQ 管理控制台&lt;/h2&gt;

&lt;p&gt;启用管理插件和 STOMP 插件:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo rabbitmq-plugins enable rabbitmq_management rabbitmq_stomp
# 重启服务器
sudo systemctl restart rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登录 &lt;a href=&#34;http://localhost:15672&#34; target=&#34;_blank&#34;&gt;http://localhost:15672&lt;/a&gt; web管理页面 默认提供 guest 账号(密码：guest)，但是该账号只提供 localhost 登录，所以需要单独创建用户，使用 rabbitmqctl。
用户相关命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo rabbitmqctl help | grep user
    add_user &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;  # 创建用户
    delete_user &amp;lt;username&amp;gt;          # 删除用户
    change_password &amp;lt;username&amp;gt; &amp;lt;newpassword&amp;gt;  # 修改密码
    clear_password &amp;lt;username&amp;gt;                 # 清楚密码，直接登录
    authenticate_user &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;   # 测试用户认证（我也不知道2333）
    set_user_tags &amp;lt;username&amp;gt; &amp;lt;tag&amp;gt; ...        # 设置用户权限 []
    list_users
    set_permissions [-p &amp;lt;vhost&amp;gt;] &amp;lt;user&amp;gt; &amp;lt;conf&amp;gt; &amp;lt;write&amp;gt; &amp;lt;read&amp;gt;
    clear_permissions [-p &amp;lt;vhost&amp;gt;] &amp;lt;username&amp;gt;
    list_user_permissions &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-1-创建用户并设置角色&#34;&gt;3.1 创建用户并设置角色&lt;/h3&gt;

&lt;p&gt;创建管理员用户，负责整个 MQ 的运维：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 添加用户
sudo rabbitmqctl add_user  admin  admin
# 赋予其 administrator 角色
sudo rabbitmqctl set_user_tags admin administrator
# 为用户赋权
sudo rabbitmqctl  set_permissions -p / admin &#39;.*&#39; &#39;.*&#39; &#39;.*&#39;
# 查看权限
sudo rabbitmqctl list_user_permissions admin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-rabbitmq-服务命令&#34;&gt;4 RabbitMQ 服务命令&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 启动服务
# sudo service rabbitmq-server start
sudo systemctl start rabbitmq-server
# 停止服务
sudo systemctl stop rabbitmq-server
# 重启服务
sudo systemctl restart rabbitmq-server
# 检查服务状态
sudo systemctl status rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-修改服务配置文件&#34;&gt;5 修改服务配置文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 如果需要管理最大连接数，修改配置文件
sudo vim /etc/default/rabbitmq-server
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>redis 环境搭建</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_redis/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e5%ae%89%e8%a3%85-redis-server&#34;&gt;1 安装 redis-server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e5%91%bd%e4%bb%a4&#34;&gt;2 命令&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#211-%e5%85%b3%e4%ba%8e-key-%e7%9a%84%e5%91%bd%e4%bb%a4&#34;&gt;2.1.1 关于 key 的命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#212-%e5%85%b3%e4%ba%8e-hash-%e7%9a%84%e5%91%bd%e4%bb%a4&#34;&gt;2.1.2 关于 hash 的命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%e5%bc%80%e5%90%af%e8%bf%9c%e7%a8%8b%e8%ae%bf%e9%97%ae%e5%b9%b6%e5%8a%a0%e5%af%86%e8%ae%bf%e9%97%ae&#34;&gt;3 开启远程访问并加密访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%e5%8f%82%e8%80%83&#34;&gt;4 参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-安装-redis-server&#34;&gt;1 安装 redis-server&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install redis-server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-命令&#34;&gt;2 命令&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 查看 redis 的版本
redis-server -v
# 重启 redis 服务
sudo service redis-server restart
# 进入 redis
redis-cli
auth admin
# 查看 redis 内存，即获取 redis 中所有的 key
keys *
# 退出 redis
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-1-关于-key-的命令&#34;&gt;2.1.1 关于 key 的命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 查找所有符合给定模式 pattern 的 key
keys pattern
# del 命令用于删除已存在的键。不存在的 key 会被忽略
del key_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-2-关于-hash-的命令&#34;&gt;2.1.2 关于 hash 的命令&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# hgetall 命令用于返回哈希表中，所有的字段和值
# 在返回值里，紧跟每个字段名(field name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍
# 若 key 不存在，返回空列表
hgetall key_name
# hget 命令用于返回哈希表中指定字段的值
# 如果给定的字段或 key 不存在时，返回 nil
hget key_name field_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-开启远程访问并加密访问&#34;&gt;3 开启远程访问并加密访问&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo vim /etc/redis/redis.conf
# 开启远程访问
# 注释掉 bind 127.0.0.1
# 如果有其他 bind 语句也注释

## 配置外网访问需要修改 Linux 防火墙(iptables)，开启 redis 端口
# -A INPUT -m state -state NEW -m tcp -p tcp -dport 6379 -j ACCEPT
# ...
# -A INPUT -j REJECT -reject-with icmp-host-prohibited
# 执行 service iptables restart

# 加密访问
# 打开注释 requirepass xxxxx，并且把密码 xxxx 改为 admin
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;不建议在公网访问 redis，因为 redis 处理速度非常快。所以如果密码简单，外部用户可通过暴力破解密码&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-参考&#34;&gt;4 参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/redis/redis-tutorial.html&#34; target=&#34;_blank&#34;&gt;Redis 教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>sed</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_sed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_sed/</guid>
      <description>

&lt;h2 id=&#34;批量替换&#34;&gt;批量替换&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在一个文件中替换字符串

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sed -i &amp;quot;s/original_str/replace_str/g&amp;quot; filename&lt;/code&gt;可查找&lt;code&gt;filename&lt;/code&gt;中的&lt;code&gt;original_str&lt;/code&gt;替换成&lt;code&gt;replace_str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt;可用通配符&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在一个文件夹中替换字符串

&lt;ul&gt;
&lt;li&gt;批量查找文件夹中的文件&lt;code&gt;grep &amp;quot;original_str&amp;quot; -rl dirname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;批量替换文件&lt;code&gt;sed -i s/original_str/replace_str/g `grep &amp;quot;original_str&amp;quot; -rl dirname`&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;遍历当前文件夹所有文件&lt;code&gt;find ./ -type f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;批量替换当前文件夹下所有文件的字符串&lt;code&gt;sed -i s/original_str/replace_str/g `find ./ type f`&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;批量替换文件、文件夹名字

&lt;ul&gt;
&lt;li&gt;查找文件名&lt;code&gt;find ./ -name original_str*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换输出&lt;code&gt;find ./ -name original_str* | sed &#39;s/\(.*\)\(original_str\)\(.*\)/mv \1\2\3 \replace_str\3/&#39; | sh&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文件夹查找文件，将文件名转换为&lt;code&gt;mv orifile newfile&lt;/code&gt;模式，最后应用管道命令&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;查找文件夹&lt;code&gt;find ./ -name original_str* -type d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换输出&lt;code&gt;find ./ -name original_str* -type d | sed &#39;s/\(.*\)\(original_str\)\(.*\)/mv \1\2\3 \replace_str\3/&#39; | sh&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;文件夹查找文件，将文件夹名转换为&lt;code&gt;mv orifile newfile&lt;/code&gt;模式，最后应用管道命令
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;按行删除&#34;&gt;按行删除&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;不加&lt;code&gt;-i&lt;/code&gt;打印删除之后的文本内容，并没有真正删除文件文本内容；加&lt;code&gt;-i&lt;/code&gt;不打印，但是会真正删除对应内容

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sed nd filename&lt;/code&gt;删除第&lt;code&gt;n&lt;/code&gt;行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed n~md filename&lt;/code&gt;从第&lt;code&gt;n&lt;/code&gt;行开始，每隔&lt;code&gt;m-1&lt;/code&gt;行删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed m,nd filename&lt;/code&gt;删除第&lt;code&gt;m&lt;/code&gt;行到第&lt;code&gt;n&lt;/code&gt;行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;m,n&#39;d filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;m,nd&#39; filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;$&#39;d filename&lt;/code&gt;删除最后一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;$d&#39; filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed /pattern/d filename&lt;/code&gt;删除匹配&lt;code&gt;pattern&lt;/code&gt;所在行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;/pattern/d&#39; filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;/pattern/&#39;d filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;/pattern/,+2d&#39; filename&lt;/code&gt;删除匹配&lt;code&gt;pattern&lt;/code&gt;所在行和之后&lt;code&gt;m&lt;/code&gt;行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;/pattern/,+2&#39;d filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed &#39;/^$/d&#39; filename&lt;/code&gt;删除空行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu 下安装包失败</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_apt_get_install_failure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_apt_get_install_failure/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;错误 1：Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)

&lt;ul&gt;
&lt;li&gt;可能原因：有另外一个程序正在运行，导致资源锁不可用。导致资源被锁的原因，可能是上次安装没正常完成。&lt;/li&gt;
&lt;li&gt;解决方法：执行下面两个命令行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo rm /var/cache/apt/archives/lock&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo rm /var/lib/dpkg/lock&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;错误 2：Unable to fetch some archives, maybe run apt-get update or try with &amp;ndash;fix-missing?

&lt;ul&gt;
&lt;li&gt;可能原因：未更新源&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;System Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Software &amp;amp; Updates&lt;/code&gt; -&amp;gt; &lt;code&gt;Download from&lt;/code&gt;: 选择 China 中，比如 &lt;code&gt;mirrors.aliyun.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 下的实用工具</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_tool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_tool/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tree&lt;/code&gt; 以树状图逐级列出目录的内容命令

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 只列举目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L level&lt;/code&gt; 设置目录树最大的显示深度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o filename&lt;/code&gt; 将结果输出到 filename&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu 安装 phpmyadmin</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_phpmyadmin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_phpmyadmin/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;执行&lt;code&gt;sudo apt-get install phpmyadmin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建立软链接&lt;code&gt;sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在浏览器打开网址&lt;code&gt;localhost/phpmyadmin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一些错误&#34;&gt;一些错误&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;打开网页错误&lt;code&gt;the mbstring extension is missing. please check your php configuration&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;安装包&lt;code&gt;sudo apt-get install php-mbstring php-gettext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启 Apache 服务&lt;code&gt;sudo service apache2 restart&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 安装 wireshark</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_wireshark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_wireshark/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;命令行安装 &lt;code&gt;sudo apt-get install wireshark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置非 root 访问

&lt;ul&gt;
&lt;li&gt;添加 wireshark 用户组 &lt;code&gt;sudo groupadd wireshark&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 dumpcap 更改为 wireshark 用户组 &lt;code&gt;sudo chgrp wireshark /usr/bin/dumpcap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;让 wireshark 用户组有 root 权限使用 dumpcap &lt;code&gt;sudo chmod 4755 /usr/bin/dumpcap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将普通用户加入 wireshark 用户组 &lt;code&gt;sudo gpasswd -a kiki wireshark&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 新手配置</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_rookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_rookie/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e7%8e%af%e5%a2%83&#34;&gt;1 环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e9%85%8d%e7%bd%ae%e9%9d%99%e6%80%81-ip&#34;&gt;2 配置静态 ip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%e9%85%8d%e7%bd%ae%e8%be%93%e5%85%a5%e6%b3%95%e5%92%8c%e5%ad%97%e4%bd%93&#34;&gt;3 配置输入法和字体&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%b8%ad%e6%96%87%e7%95%8c%e9%9d%a2&#34;&gt;中文界面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e9%85%8d%e7%bd%ae%e6%90%9c%e7%8b%97%e8%be%93%e5%85%a5%e6%b3%95&#34;&gt;配置搜狗输入法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e9%85%8d%e7%bd%ae-consolas-%e9%9b%85%e9%bb%91%e5%ad%97%e4%bd%93&#34;&gt;配置 Consolas 雅黑字体&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%e5%ae%89%e8%a3%85%e4%b8%8e%e9%85%8d%e7%bd%ae-git&#34;&gt;4 安装与配置 Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%e5%ae%89%e8%a3%85-qt&#34;&gt;5 安装 Qt&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#qt571&#34;&gt;Qt5.7.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#qt541&#34;&gt;Qt5.4.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%ae%89%e8%a3%85%e5%b7%a5%e5%85%b7%e5%8c%85&#34;&gt;6 命令行安装工具包&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#supervisor&#34;&gt;supervisor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vscode&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#chrome-%e6%b5%8f%e8%a7%88%e5%99%a8&#34;&gt;Chrome 浏览器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#teamviewer&#34;&gt;TeamViewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%9c%89%e9%81%93%e8%af%8d%e5%85%b8&#34;&gt;有道词典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%88%aa%e5%9b%be%e5%b7%a5%e5%85%b7-shutter&#34;&gt;截图工具 Shutter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-环境&#34;&gt;1 环境&lt;/h2&gt;

&lt;p&gt;默认 Ubuntu 16.04&lt;/p&gt;

&lt;h2 id=&#34;2-配置静态-ip&#34;&gt;2 配置静态 ip&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IP地址      192.168.1.81&lt;/li&gt;
&lt;li&gt;子网掩码    255.255.0.0&lt;/li&gt;
&lt;li&gt;DNS 与网关  192.168.1.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-配置输入法和字体&#34;&gt;3 配置输入法和字体&lt;/h2&gt;

&lt;h3 id=&#34;中文界面&#34;&gt;中文界面&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;系统输入-语言支持-添加删除语言-选择 Chinese&lt;/li&gt;
&lt;li&gt;将汉语中国拖动到第一栏&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;配置搜狗输入法&#34;&gt;配置搜狗输入法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 从 Sogou 官网下载 deb 安装包
sudo dpkg -i sougou-packet.deb
sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;系统输入-语言支持-键盘输入法系统选择 fctix&lt;/li&gt;
&lt;li&gt;系统输入-文本输入-添加输入源-选择 sougo 输入法。&lt;/li&gt;
&lt;li&gt;系统输入-文本输入-切换到下一个源改为 Super+空格（Ctrl+空格 与 Qt 提示冲突）&lt;/li&gt;
&lt;li&gt;重启&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;配置-consolas-雅黑字体&#34;&gt;配置 Consolas 雅黑字体&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd temp
wget http://www.mycode.net.cn/wp-content/uploads/2015/07/YaHeiConsolas.tar.gz
tar -zxvf YaHeiConsolas.tar.gz
sudo mkdir -p /usr/share/fonts/vista
sudo cp YaHeiConsolas.ttf /usr/share/fonts/vista/
sudo chmod 644 /usr/share/fonts/vista/*.ttf
cd /usr/share/fonts/vista/
sudo mkfontscale &amp;amp;&amp;amp; sudo mkfontdir &amp;amp;&amp;amp; sudo fc-cache -fv
sudo apt-get install unity-tweak-tool
reboot
# 终端中输入配置字体
unity-tweak-tool
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-安装与配置-git&#34;&gt;4 安装与配置 Git&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install git
sudo apt-get install gitk
# 创建私钥与公钥，并把公钥放到gitlab上
cd ~/.ssh
ssh-keygen 或者 ssh-keygen -t rsa -C &amp;quot;kiki@ubuntu.com&amp;quot;
# 配置全局姓名与邮箱
git config --global user.name kiki
git config --global user.email kiki@ubuntu.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-安装-qt&#34;&gt;5 安装 Qt&lt;/h2&gt;

&lt;h3 id=&#34;qt5-7-1&#34;&gt;Qt5.7.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需要解决 Qt 中不能输入中文的 BUG&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install fcitx-frontend-qt5
cd usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/
cp -rp libfcitxplatforminputcontextplugin.so ~/Software/Qt5.7.1/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts
cp -rp libfcitxplatforminputcontextplugin.so ~/Software/Qt5.7.1/5.7/gcc_64/plugins/platforminputcontexts
# 重启 Qt_Creator
# 双版本需要添加快捷方式
cd ~/.local/share/applications
touch DigiaQt-qtcreator-community-5.7.1.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;输入以下内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[Desktop Entry]
Type=Application
Exec=/local_path/Qt5.4.1/Tools/QtCreator/bin/qtcreator
Name=QtCreator5.4.1 (Community)
GenericName=The IDE of choice for Qt development.
Icon=QtProject-qtcreator
Terminal=false
Categories=Development;IDE;Qt;
MimeType=text/x-c++src;text/x-c++hdr;text/x-xsrc;application/x-designer;application/vnd.qt.qmakeprofile;application/vnd.qt.xml.resource;text/x-qml;text/x-qt.qml;text/x-qt.qbs;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;qt5-4-1&#34;&gt;Qt5.4.1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;需要解决 Qt 中不能输入中文的 BUG&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install fcitx-frontend-qt5
cd usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/
cp -rp libfcitxplatforminputcontextplugin.so ~/Software/Qt5.4.1/Tools/QtCreator/lib/Qt/plugins/platforminputcontexts
cp -rp libfcitxplatforminputcontextplugin.so ~/Software/Qt5.4.1/5.7/gcc_64/plugins/platforminputcontexts
# 重启Qt_Creator
# 双版本需要添加快捷方式
cd ~/.local/share/applications
touch DigiaQt-qtcreator-community-5.4.1.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;输入以下内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;[Desktop Entry]
Type=Application
Exec=/local_path/Qt5.4.1/Tools/QtCreator/bin/qtcreator
Name=QtCreator5.4.1 (Community)
GenericName=The IDE of choice for Qt development.
Icon=QtProject-qtcreator
Terminal=false
Categories=Development;IDE;Qt;
MimeType=text/x-c++src;text/x-c++hdr;text/x-xsrc;application/x-designer;application/vnd.qt.qmakeprofile;application/vnd.qt.xml.resource;text/x-qml;text/x-qt.qml;text/x-qt.qbs;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-命令行安装工具包&#34;&gt;6 命令行安装工具包&lt;/h2&gt;

&lt;h3 id=&#34;supervisor&#34;&gt;supervisor&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/temp/
git clone git@192.168.1.36:ylrc/Supervisor.git
cd Supervisor
sudo dpkg -i python-meld3_1.0.2-2_all.deb supervisor_3.2.0-2_all.deb
supervisorctl -v
sudo service supervisor start
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vscode&#34;&gt;VSCode&lt;/h3&gt;

&lt;p&gt;到&lt;code&gt;https://code.visualstudio.com/docs/?dv=linux64_deb&lt;/code&gt;下载
使用 &lt;code&gt;sudo dpkg -i target.deb&lt;/code&gt; 安装
有错误的话使用 &lt;code&gt;sudo apt-get install -f&lt;/code&gt; 修复
修改首选项中 VSCode 的配置文件,配置字体 Consolas&lt;/p&gt;

&lt;h3 id=&#34;chrome-浏览器&#34;&gt;Chrome 浏览器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo dpkg -i google-chrome-stable_current_amd64.deb
sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;teamviewer&#34;&gt;TeamViewer&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# https://www.teamviewer.com/zhcn/download/linux/ 下载
sudo dpkg -i teamviewerTarget.deb
sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;有道词典&#34;&gt;有道词典&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 有道官方下载ubuntu安装包
sudo apt update
sudo apt upgrade
sudo dpkg -i youdao.deb
sudo apt install -f
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;截图工具-shutter&#34;&gt;截图工具 Shutter&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install shutter
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;设置快捷键：系统设置-&amp;gt;键盘-&amp;gt;窗口-&amp;gt;自定义快捷键: commond 输入 &lt;code&gt;shutter -s&lt;/code&gt;, 然后在右侧点击输入想要设置的快捷键&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu 查看磁盘空间</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_disk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_disk/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df -hl&lt;/code&gt;显示目前所有文件系统的可用空间及使用情形

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;表示使用&lt;code&gt;human readable&lt;/code&gt;的输出，即使用 GB，MB 等易读的格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Filesystem&lt;/code&gt;表示文件系统&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mounted on&lt;/code&gt;表示挂载点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Size&lt;/code&gt;&lt;code&gt;Used&lt;/code&gt;&lt;code&gt;Avail&lt;/code&gt;&lt;code&gt;Use&lt;/code&gt;分别表示分割区的容量、已使用的大小、剩下的大小及使用的百分比&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;du -sh *&lt;/code&gt;显示当前目录下各个文件及目录占用空间大小

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;du&lt;/code&gt;查询文件或文件夹的磁盘使用空间，可以添加&lt;code&gt;--max-depth=&lt;/code&gt;限制目录深度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 的日志文件</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_syslog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_syslog/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;日志文件存在&lt;code&gt;/var/log&lt;/code&gt;即其子目录

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth.log&lt;/code&gt;: 鉴权日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kern.log&lt;/code&gt;: 内核日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql/&lt;/code&gt;: mysql 数据库服务日志文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;utmp&lt;/code&gt;或&lt;code&gt;wtmp&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;查看日志文件的命令

&lt;ul&gt;
&lt;li&gt;less:&lt;code&gt;less /var/log/messages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;more:&lt;code&gt;more -f /var/log/messages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cat:&lt;code&gt;cat /var/log/messages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;grep:&lt;code&gt;grep -i error /var/log/message&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tail:&lt;code&gt;tail -f /var/log/messages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;zcat&lt;/li&gt;
&lt;li&gt;zgrep&lt;/li&gt;
&lt;li&gt;zmore&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;上面的日志都有使用 rsyslogd 服务生成的。这是一个系统工具。

&lt;ul&gt;
&lt;li&gt;配置文件在&lt;code&gt;vim /etc/rsyslog.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;日志目录&lt;code&gt;ls /etc/rsyslog.d/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>update-alternatives</title>
      <link>https://xueqing.github.io/blog/ubuntu/update_alternatives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/update_alternatives/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;update-alternatives&lt;/code&gt;命令用于增加、删除、维护和显示&lt;code&gt;/etc/alternatives&lt;/code&gt;下的软链接，用于切换相同或相似功能的应用程序（如浏览器、编辑器等）

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;generic name&lt;/code&gt;一系列功能相似的程序的公用名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alternative&lt;/code&gt;一个可选的程序所在的路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;一个&lt;code&gt;alternative&lt;/code&gt;在&lt;code&gt;/etc/alternatives&lt;/code&gt;中的名字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;priority&lt;/code&gt;一个&lt;code&gt;alternative&lt;/code&gt;的优先级，优先级越高，数字越大&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls -l /etc/alternatives&lt;/code&gt;可以看到所有的软链接&lt;/li&gt;
&lt;li&gt;显示所有可选命令：&lt;code&gt;update-alternatives --display editor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择配置命令程序：&lt;code&gt;update-alternatives --config editor&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;不使用交互模式：&lt;code&gt;update-alternatives --set editor path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;安装命令程序：&lt;code&gt;update-alternatives --install link generic_name path priority&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;删除命令程序：&lt;code&gt;update-alternatives --remove name path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;以-ubuntu14-04-配置-java1-8-为例&#34;&gt;以 Ubuntu14.04 配置 java1.8 为例&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;安装 java1.6 和 java1.7 可以直接用&lt;code&gt;sudo apt-get install openjdk-6-gre(openjdk-7-gre)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;访问 oracle 官网下载 jdk&lt;/li&gt;
&lt;li&gt;解压下载的 tar.gz 压缩包&lt;/li&gt;
&lt;li&gt;执行命令安装：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir -p /usr/lib/jvm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo cp -a jdk1.8.0_162/ /usr/lib/jvm/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo ln -s /usr/lib/jvm/jdk1.8.0_162/ /usr/lib/jvm/java-8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;设置环境变量：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vi ~/.bashrc&lt;/code&gt;在文件最后加入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export JAVA_HOME=/usr/lib/jvm/java-8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export JRE_HOME=${JAVA_HOME}/jre&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export PATH=${JAVA_HOME}/bin:$PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;配置默认 jdk 版本

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo update-alternatives --config java&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo update-alternatives --config javac&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;测试验证&lt;code&gt;java -version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装-gcc-4-8-g-4-8-gcc-5-4-g-5-以及多版本切换&#34;&gt;安装 gcc-4.8、g++-4.8、gcc-5.4、g++-5 以及多版本切换&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install gcc-4.8 gcc-4.8-multilib g++-4.8 g++-4.8-multilib
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5.4 40
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 40
#切换版本
sudo update-alternatives --config gcc
#删除切换版本的选项
sudo update-alternatives --remove gcc /usr/bin/gcc-4.5
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>wget 命令</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_wget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_wget/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://man.linuxde.net/wget&#34; target=&#34;_blank&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wget 用来从指定的 URL 下载文件&lt;/li&gt;
&lt;li&gt;wget 非常稳定，在网络原因下载失败时会不断重试知道下载完毕；如果是服务器影响下载，会再次连到服务器从断掉的地方继续下载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget URL&lt;/code&gt;下载单个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -O filename URL&lt;/code&gt;下载并保存成不同的文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -c URL&lt;/code&gt;使用断点续传&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>修改 hosts 文件</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_hosts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_hosts/</guid>
      <description>

&lt;h2 id=&#34;ubuntu&#34;&gt;ubuntu&lt;/h2&gt;

&lt;p&gt;公司内部添加了域名服务器，每次将域名改成 IP 地址很麻烦，所以修改本地 hosts 可以直接重定向
&lt;code&gt;sudo vim /etc/hosts&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;windows&#34;&gt;windows&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;搜索程序“记事本”，用管理员身份打开&lt;/li&gt;
&lt;li&gt;在记事本中打开文件，路径是&lt;code&gt;C:\Windows\System32\drivers\etc&lt;/code&gt;，选择&lt;code&gt;所有文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以看到&lt;code&gt;hosts&lt;/code&gt;文件，选中打开进行修改，保存就可以了&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>命令行创建文件</title>
      <link>https://xueqing.github.io/blog/ubuntu/shell_new_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/shell_new_file/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cat&#34;&gt;cat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#touch&#34;&gt;touch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%a0%87%e5%87%86%e9%87%8d%e5%ae%9a%e5%90%91%e7%ac%a6%e5%8f%b7&#34;&gt;标准重定向符号 &amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#echoprintf&#34;&gt;echo/printf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nano&#34;&gt;nano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vivim&#34;&gt;vi/vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cat&#34;&gt;cat&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; 可用于创建文件。输入回车后，光标移到到下一行，可以开始输入文本。完成之后使用 Ctrl+D 退出，并返回到提示符&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;gt; file_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cat&lt;/code&gt; 也可以查看文件内容。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat file_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;touch&#34;&gt;touch&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; 支持一条命令创建多个文件，且不支持立刻输入文本。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;touch file1 file2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;标准重定向符号&#34;&gt;标准重定向符号 &amp;gt;&lt;/h2&gt;

&lt;p&gt;标准重定向符号通常用于重定向一个命令的输出到一个新文件。如果没有前置的命令，命令只创建一个新文件。类似于 &lt;code&gt;touch&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;与 &lt;code&gt;touch&lt;/code&gt; 不同，&lt;code&gt;&amp;gt;&lt;/code&gt; 只能一次创建一个文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; file_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;echo-printf&#34;&gt;echo/printf&lt;/h2&gt;

&lt;p&gt;使用 &lt;code&gt;echo/printf&lt;/code&gt; 命令输入文本到指定文件，文件不存在则会被创建。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;hello&#39; &amp;gt; file1
printf &amp;quot;world\nI&#39;m kiki&amp;quot; &amp;gt; file2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;nano&#34;&gt;nano&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;nano&lt;/code&gt; 是 GNU 项目的文本编辑器。输入回车之后可以开始输入文本。按照命令提示退出编辑界面。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nano file_name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vi-vim&#34;&gt;vi/vim&lt;/h2&gt;

&lt;p&gt;使用 &lt;code&gt;vi/vim&lt;/code&gt; 文本编辑器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vi file_name
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>安装 Linuxbrew</title>
      <link>https://xueqing.github.io/blog/ubuntu/ubuntu_brew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/ubuntu_brew/</guid>
      <description>&lt;p&gt;参考 &lt;a href=&#34;https://docs.brew.sh/Homebrew-on-Linux#install&#34; target=&#34;_blank&#34;&gt;Linuxbrew&lt;/a&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装脚本将 Homebrew 安装到 &lt;code&gt;/home/linuxbrew/.linuxbrew&lt;/code&gt;(sudo) 或者 &lt;code&gt;~/.linuxbrew&lt;/code&gt;。安装之后不需要 &lt;code&gt;sudo&lt;/code&gt; 使用 Homebrew。使用 &lt;code&gt;/home/linuxbrew/.linuxbrew&lt;/code&gt; 弄马壮加密和搭配和人的主目录支持使用更多二进制包。&lt;/p&gt;

&lt;p&gt;遵循下面的步骤指导增加 Homebrew 到 &lt;code&gt;PATH&lt;/code&gt; 和 bash shell 配置脚本，即 Debian/Ubuntu 下是 &lt;code&gt;~/.profile&lt;/code&gt;， CentOS/Fedora/RedHat 下是 &lt;code&gt;~/bash_profile&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;test -d ~/.linuxbrew &amp;amp;&amp;amp; eval $(~/.linuxbrew/bin/brew shellenv)
test -d /home/linuxbrew/.linuxbrew &amp;amp;&amp;amp; eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
test -r ~/.bash_profile &amp;amp;&amp;amp; echo &amp;quot;eval \$($(brew --prefix)/bin/brew shellenv)&amp;quot; &amp;gt;&amp;gt;~/.bash_profile
echo &amp;quot;eval \$($(brew --prefix)/bin/brew shellenv)&amp;quot; &amp;gt;&amp;gt;~/.profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面尝试安装一个包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>安装和配置 Apache 服务</title>
      <link>https://xueqing.github.io/blog/ubuntu/apache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/apache/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%ae%89%e8%a3%85-apache&#34;&gt;安装 Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84%e7%bd%91%e7%ab%99&#34;&gt;创建自己的网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%ae%be%e7%bd%ae-virtualhost-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6&#34;&gt;设置 VirtualHost 配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%bf%80%e6%b4%bb-virtualhost-%e6%96%87%e4%bb%b6&#34;&gt;激活 VirtualHost 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%85%b6%e4%bb%96-virtualhost-%e4%be%8b%e5%ad%90&#34;&gt;其他 VirtualHost 例子&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%9c%a8%e4%b8%80%e4%b8%aa-ip-%e5%9c%b0%e5%9d%80%e4%b8%8a%e8%bf%90%e8%a1%8c%e5%a4%9a%e4%b8%aa%e4%b8%8d%e5%90%8c%e4%b8%bb%e6%9c%ba%e5%90%8d%e7%9a%84%e7%bd%91%e7%ab%99&#34;&gt;在一个 IP 地址上运行多个不同主机名的网站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%9c%a8%e4%b8%8d%e5%90%8c%e7%ab%af%e5%8f%a3%e4%b8%8a%e8%bf%90%e8%a1%8c%e4%b8%8d%e5%90%8c%e7%bd%91%e7%ab%99&#34;&gt;在不同端口上运行不同网站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装-apache&#34;&gt;安装 Apache&lt;/h2&gt;

&lt;p&gt;环境：ubuntu 16.04&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install update
# 安装
sudo apt-get install apache2
# 可在浏览器输入本机 ip，看到 Apache2 的欢迎页面说明服务正常
# 修改显示内容：修改 `/var/www/html` 文件夹
# 或修改配置文件，修改 /var/www/html 为 html 文件所在目录
vim /etc/apache2/sites-enabled/000-default.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建自己的网站&#34;&gt;创建自己的网站&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 新建文件夹
sudo mkdir /var/www/mysite &amp;amp;&amp;amp; cd /var/www/mysite
# 创建 html 文件
vim index.html
# 在浏览器输入本机 ip，看到新的内容
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;设置-virtualhost-配置文件&#34;&gt;设置 VirtualHost 配置文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 切换到配置文件目录，创建配置文件
cd /etc/apache2/sites-available &amp;amp;&amp;amp; sudo cp 000-default.conf mysite.conf
# 修改配置文件，修改 ServerAdmin 为自己的邮箱
# 修改 DocumentRoot 为 /var/www/mysite，
# 修改 ServerName 为 mysite.example.com
sudo vim mysite.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;激活-virtualhost-文件&#34;&gt;激活 VirtualHost 文件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /etc/apache2/sites-available &amp;amp;&amp;amp; sudo a2ensite mysite.conf
# 重新加载网页
sudo service apache2 reload
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其他-virtualhost-例子&#34;&gt;其他 VirtualHost 例子&lt;/h2&gt;

&lt;h3 id=&#34;在一个-ip-地址上运行多个不同主机名的网站&#34;&gt;在一个 IP 地址上运行多个不同主机名的网站&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# Ensure that Apache listens on port 80
Listen 80
&amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot &amp;quot;/www/example1&amp;quot;
    ServerName www.example.com

    # Other directives here
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
    DocumentRoot &amp;quot;/www/example2&amp;quot;
    ServerName www.example.org

    # Other directives here
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;在不同端口上运行不同网站&#34;&gt;在不同端口上运行不同网站&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;Listen 80
Listen 8080

&amp;lt;VirtualHost 172.20.30.40:80&amp;gt;
    ServerName www.example.com
    DocumentRoot &amp;quot;/www/domain-80&amp;quot;
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost 172.20.30.40:8080&amp;gt;
    ServerName www.example.com
    DocumentRoot &amp;quot;/www/domain-8080&amp;quot;
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost 172.20.30.40:80&amp;gt;
    ServerName www.example.org
    DocumentRoot &amp;quot;/www/otherdomain-80&amp;quot;
&amp;lt;/VirtualHost&amp;gt;

&amp;lt;VirtualHost 172.20.30.40:8080&amp;gt;
    ServerName www.example.org
    DocumentRoot &amp;quot;/www/otherdomain-8080&amp;quot;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tutorials.ubuntu.com/tutorial/install-and-configure-apache#0&#34; target=&#34;_blank&#34;&gt;Install and Configure Apache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://httpd.apache.org/docs/2.4/vhosts/examples.html&#34; target=&#34;_blank&#34;&gt;VirtualHost Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://xueqing.github.io/blog/ubuntu/regular_expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/ubuntu/regular_expression/</guid>
      <description>

&lt;h2 id=&#34;分组&#34;&gt;分组&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;加&lt;code&gt;()&lt;/code&gt;，即小括号，表示分组：例如&lt;code&gt;m_([a|b|c])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每个分组有一个组号：从左向右，以分组的左括号为标识，第一个出现的分组的组号是 1，第二个是 2，以此类推&lt;/li&gt;
&lt;li&gt;后向引用：用于重复搜索前面某个分组匹配的文本：例如，&lt;code&gt;\1&lt;/code&gt;代表分组 1 匹配的文本&lt;/li&gt;
&lt;li&gt;可以自己指定子表达式的组名：&lt;code&gt;m_(?&amp;lt;Word&amp;gt;[a|b|c])&lt;/code&gt;，或者&lt;code&gt;m_(?&#39;Word&#39;[a|b|c])&lt;/code&gt;，可以把&lt;code&gt;[a|b|c]&lt;/code&gt;的组名指定为&lt;code&gt;Word&lt;/code&gt;，后面可以使用&lt;code&gt;\k&amp;lt;Word&amp;gt;&lt;/code&gt;来反向引用该分组捕获的内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;匹配符&#34;&gt;匹配符&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;匹配开始符&lt;code&gt;^&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配结束符&lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
