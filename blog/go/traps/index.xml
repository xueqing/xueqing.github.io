<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go 踩坑 | kiki</title>
    <link>https://xueqing.github.io/blog/go/traps/</link>
      <atom:link href="https://xueqing.github.io/blog/go/traps/index.xml" rel="self" type="application/rss+xml" />
    <description>go 踩坑</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>go 踩坑</title>
      <link>https://xueqing.github.io/blog/go/traps/</link>
    </image>
    
    <item>
      <title>前言</title>
      <link>https://xueqing.github.io/blog/go/traps/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/go/traps/readme/</guid>
      <description>&lt;p&gt;记录 go 开发遇到的坑&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;var_scope.md&#34; target=&#34;_blank&#34;&gt;不使用短变量声明 &lt;code&gt;:=&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;json_struct.md&#34; target=&#34;_blank&#34;&gt;json 解析成结构体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mod_workspace.md&#34; target=&#34;_blank&#34;&gt;module 不要在 vscode 工作区打开工程&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;package_var.md&#34; target=&#34;_blank&#34;&gt;同一包不同源文件变量声明时不要带包名&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;有时候新定义的变量或者函数不能跳转，需要重启 vscode，相关插件长时间运行可能崩溃&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>json 解析时用到的结构体标签</title>
      <link>https://xueqing.github.io/blog/go/traps/json_struct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/go/traps/json_struct/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e5%8f%aa%e6%9c%89%e5%af%bc%e5%87%ba%e7%9a%84%e7%bb%93%e6%9e%84%e4%bd%93%e6%88%90%e5%91%98%e5%af%b9%e5%a4%96%e9%83%a8%e7%a8%8b%e5%ba%8f-json-%e5%8f%af%e8%a7%81&#34;&gt;1 只有导出的结构体成员对外部程序 (json) 可见&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e7%bb%93%e6%9e%84%e4%bd%93%e5%bf%85%e9%a1%bb%e8%a7%a3%e6%9e%90%e7%9a%84%e5%ad%97%e6%ae%b5required-%e6%a0%87%e7%ad%be&#34;&gt;2 结构体必须解析的字段(required 标签)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%e7%bb%93%e6%9e%84%e4%bd%93%e6%a0%87%e7%ad%be&#34;&gt;2.1 结构体标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-json-%e8%a7%a3%e6%9e%90%e5%b5%8c%e5%a5%97%e5%9f%9f&#34;&gt;2.2 json 解析嵌套域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23-json-%e7%bc%96%e7%a0%81%e6%97%b6%e4%bc%9a%e5%af%b9%e6%8c%87%e9%92%88%e8%a7%a3%e5%bc%95%e7%94%a8%e4%bd%bf%e7%94%a8%e7%9a%84%e6%98%af%e5%ae%9e%e9%99%85%e5%80%bc&#34;&gt;2.3 json 编码时会对指针解引用，使用的是实际值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24-encodingjsonunmarshal-%e5%ae%9e%e7%8e%b0-required-%e6%a0%87%e7%ad%be&#34;&gt;2.4 encoding/json.Unmarshal 实现 required 标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#25-%e5%bd%93-json-%e5%92%8c-stream-%e7%9b%b8%e5%85%b3%e6%97%b6%e4%bd%bf%e7%94%a8-encoderdecoder&#34;&gt;2.5 当 json 和 stream 相关时，使用 Encoder/Decoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#26-%e5%ae%9a%e4%b9%89%e6%88%90-jsonrawmessage-%e7%9a%84%e5%9f%9f%e5%8f%af%e4%bb%a5%e5%bb%b6%e8%bf%9f%e8%a7%a3%e6%9e%90&#34;&gt;2.6 定义成 json.RawMessage 的域可以延迟解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#27-%e4%bd%bf%e7%94%a8-interface-%e5%92%8c-jsonrawmessage-%e8%a7%a3%e6%9e%90%e5%8a%a8%e6%80%81-json&#34;&gt;2.7 使用 interface 和 json.RawMessage 解析动态 json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#271-%e5%ae%9e%e7%8e%b0-marshaljsonunmarshaljson-%e6%8e%a5%e5%8f%a3&#34;&gt;2.7.1 实现 MarshalJson/UnmarshalJSON 接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#272-%e5%b0%86-json-%e8%a7%a3%e6%9e%90%e6%88%90-interface&#34;&gt;2.7.2 将 json 解析成 interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#273-%e4%bd%bf%e7%94%a8%e6%8c%87%e9%92%88%e5%a2%9e%e5%8a%a0%e4%bb%a3%e7%a0%81%e6%a3%80%e6%9f%a5&#34;&gt;2.7.3 使用指针增加代码检查&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-ginbindingbind&#34;&gt;3 gin/binding.Bind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%e7%9b%b8%e5%85%b3%e9%93%be%e6%8e%a5&#34;&gt;4 相关链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-只有导出的结构体成员对外部程序-json-可见&#34;&gt;1 只有导出的结构体成员对外部程序 (json) 可见&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下面的代码中无法解析 gender 域。且编码成 json 时，gender 域不会包含&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;encoding/json&amp;quot;
&amp;quot;fmt&amp;quot;
)

// JSONStruct a struct to be used in json decode
type myJSONStruct struct {
Name   string
Age    float64
gender string
}

var rawJSON = []byte(`{
  &amp;quot;name&amp;quot;: &amp;quot;kiki&amp;quot;,
  &amp;quot;age&amp;quot;: 18,
  &amp;quot;gender&amp;quot;: &amp;quot;female&amp;quot;
}`)

func main() {
var s myJSONStruct
err := json.Unmarshal(rawJSON, &amp;amp;s)
if err != nil {
  panic(err)
}

// [Name=kiki] [Age=18.000000] [gender=]
fmt.Printf(&amp;quot;[Name=%s] [Age=%f] [gender=%s]\n&amp;quot;, s.Name, s.Age, s.gender)

buf, err := json.Marshal(s)
if err != nil {
  panic(err)
}
// [buf={&amp;quot;Name&amp;quot;:&amp;quot;kiki&amp;quot;,&amp;quot;Age&amp;quot;:18}]
fmt.Printf(&amp;quot;[buf=%s]\n&amp;quot;, buf)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-结构体必须解析的字段-required-标签&#34;&gt;2 结构体必须解析的字段(required 标签)&lt;/h2&gt;

&lt;h3 id=&#34;2-1-结构体标签&#34;&gt;2.1 结构体标签&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解析 json 到结构体时，不适用结构体的字段会被抛弃&lt;/strong&gt;。json.Unmarshal 找到结构体对应值的流程。比如给定 json 的 key 是 &lt;code&gt;name&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;1 查找标签名字为 name 的字段&lt;/li&gt;
&lt;li&gt;2 查找名字为 name 的字段&lt;/li&gt;
&lt;li&gt;3 查找名字为 Name 等大小写不敏感的匹配字段&lt;/li&gt;
&lt;li&gt;4 如果都没有找到，就直接忽略这个 key，不会报错。当从众多数据中只选择部分使用时非常方便。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;json 的 encode/decode 不支持 required 标签。支持的标签包括&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FieldName&lt;/code&gt; 指定实际要查找的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;omitempty&lt;/code&gt; 值为空时不要包含到 JSON 中。当丢弃空属性不想包含在输出时很方便&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 跳过一些域。当查找到值时会被解析，但是不会被输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;encoding/json&amp;quot;
&amp;quot;fmt&amp;quot;
)

// JSONStruct a struct to be used in json decode
type myJSONStruct struct {
Name   string  `json:&amp;quot;nickname&amp;quot;`
Age    float64 `json:&amp;quot;-&amp;quot;`
Gender string  `json:&amp;quot;,omitempty&amp;quot;`
}

var rawJSON = []byte(`{
&amp;quot;nickname&amp;quot;: &amp;quot;kiki&amp;quot;,
&amp;quot;age&amp;quot;: 18,
&amp;quot;gender&amp;quot;: &amp;quot;&amp;quot;
}`)

func main() {
var s myJSONStruct
err := json.Unmarshal(rawJSON, &amp;amp;s)
if err != nil {
panic(err)
}

// [NickName=kiki] [Age=0.000000] [gender=]
fmt.Printf(&amp;quot;[NickName=%s] [Age=%f] [gender=%s]\n&amp;quot;, s.Name, s.Age, s.Gender)

buf, err := json.Marshal(s)
if err != nil {
panic(err)
}
// [buf={&amp;quot;nickname&amp;quot;:&amp;quot;kiki&amp;quot;}]
fmt.Printf(&amp;quot;[buf=%s]\n&amp;quot;, buf)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-2-json-解析嵌套域&#34;&gt;2.2 json 解析嵌套域&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
  &amp;quot;encoding/json&amp;quot;
  &amp;quot;fmt&amp;quot;
)

type myName struct {
  FirstName string `json:&amp;quot;fname&amp;quot;`
  LastName  string `json:&amp;quot;lname&amp;quot;`
}

// JSONStruct a struct to be used in json decode
type myJSONStruct struct {
  myName
  Age    float64 `json:&amp;quot;-&amp;quot;`
  Gender string  `json:&amp;quot;,omitempty&amp;quot;`
}

var rawJSON = []byte(`{
    &amp;quot;fname&amp;quot;: &amp;quot;kiki&amp;quot;,
    &amp;quot;lname&amp;quot;: &amp;quot;kity&amp;quot;,
    &amp;quot;age&amp;quot;: 18,
    &amp;quot;gender&amp;quot;: &amp;quot;&amp;quot;
}`)

func main() {
  var s myJSONStruct
  err := json.Unmarshal(rawJSON, &amp;amp;s)
  if err != nil {
    panic(err)
  }

  // [FirstName=kiki] [LastName=kity] [Age=0.000000] [gender=]
  fmt.Printf(&amp;quot;[FirstName=%s] [LastName=%s] [Age=%f] [gender=%s]\n&amp;quot;, s.FirstName, s.LastName, s.Age, s.Gender)

  buf, err := json.Marshal(s)
  if err != nil {
    panic(err)
  }
  // [buf={&amp;quot;fname&amp;quot;:&amp;quot;kiki&amp;quot;,&amp;quot;lname&amp;quot;:&amp;quot;kity&amp;quot;}]
  fmt.Printf(&amp;quot;[buf=%s]\n&amp;quot;, buf)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-json-编码时会对指针解引用-使用的是实际值&#34;&gt;2.3 json 编码时会对指针解引用，使用的是实际值&lt;/h3&gt;

&lt;h3 id=&#34;2-4-encoding-json-unmarshal-实现-required-标签&#34;&gt;2.4 encoding/json.Unmarshal 实现 required 标签&lt;/h3&gt;

&lt;h3 id=&#34;2-5-当-json-和-stream-相关时-使用-encoder-decoder&#34;&gt;2.5 当 json 和 stream 相关时，使用 Encoder/Decoder&lt;/h3&gt;

&lt;h3 id=&#34;2-6-定义成-json-rawmessage-的域可以延迟解析&#34;&gt;2.6 定义成 json.RawMessage 的域可以延迟解析&lt;/h3&gt;

&lt;h3 id=&#34;2-7-使用-interface-和-json-rawmessage-解析动态-json&#34;&gt;2.7 使用 interface 和 json.RawMessage 解析动态 json&lt;/h3&gt;

&lt;h4 id=&#34;2-7-1-实现-marshaljson-unmarshaljson-接口&#34;&gt;2.7.1 实现 MarshalJson/UnmarshalJSON 接口&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JSON 模块包含两个接口 &lt;code&gt;Marshaler&lt;/code&gt; 和 &lt;code&gt;Unmarshaler&lt;/code&gt;。两个接口都需要一个方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Marshaler 接口定义了怎么把某个类型 encode 成 JSON 数据
type Marshaler interface {
  MarshalJSON() ([]byte, error)
}

// Unmarshaler 接口定义了怎么把 JSON 数据 decode 成特定的类型数据。如果后续还要使用 JSON 数据，必须把数据拷贝一份
type Unmarshaler interface {
  UnmarshalJSON([]byte) error
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果将这两个接口增加到自定义类型，就可以被编码成 JSON 或者把 JSON 解析成自定义类型&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一个很好的例子就是 &lt;code&gt;time.Time&lt;/code&gt; 类型&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Month struct {
MonthNumber int
YearNumber int
}

func (m Month) MarshalJSON() ([]byte, error){
return []byte(fmt.Sprintf(&amp;quot;%d/%d&amp;quot;, m.MonthNumber, m.YearNumber)), nil
}

func (m *Month) UnmarshalJSON(value []byte) error {
parts := strings.Split(string(value), &amp;quot;/&amp;quot;)
m.MonthNumber = strconv.ParseInt(parts[0], 10, 32)
m.YearNumber = strconv.ParseInt(parts[1], 10, 32)

return nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-7-2-将-json-解析成-interface&#34;&gt;2.7.2 将 json 解析成 interface&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;interface{}&lt;/code&gt; 在 Go 中意味着可以是任何东西，Go 在运行时会分配的合适的内存来存储&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;encoding/json&amp;quot;
&amp;quot;fmt&amp;quot;
)

type myName struct {
FirstName string `json:&amp;quot;fname&amp;quot;`
LastName  string `json:&amp;quot;lname&amp;quot;`
}

// JSONStruct a struct to be used in json decode
type myJSONStruct struct {
myName
Age    float64 `json:&amp;quot;-&amp;quot;`
Gender string  `json:&amp;quot;,omitempty&amp;quot;`
}

var rawJSON = []byte(`{
  &amp;quot;fname&amp;quot;: &amp;quot;kiki&amp;quot;,
  &amp;quot;lname&amp;quot;: &amp;quot;kity&amp;quot;,
  &amp;quot;age&amp;quot;: 18
}`)

func main() {
var s map[string]interface{}
err := json.Unmarshal(rawJSON, &amp;amp;s)
if err != nil {
  panic(err)
}

fmt.Printf(&amp;quot;[map=%v]&amp;quot;, s)
if s[&amp;quot;gender&amp;quot;] == nil {
  panic(&amp;quot;Gender is nil&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-7-3-使用指针增加代码检查&#34;&gt;2.7.3 使用指针增加代码检查&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;结构体字段使用指针，解析之后判断是否为 nil&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;encoding/json&amp;quot;
&amp;quot;fmt&amp;quot;
)

// JSONStruct a struct to be used in json decode
type JSONStruct struct {
Name *string
Age  *float64
}

var rawJSON = []byte(`{
  &amp;quot;name&amp;quot;: &amp;quot;We do not provide a Age&amp;quot;
}`)

func main() {
var s *JSONStruct
err := json.Unmarshal(rawJSON, &amp;amp;s)
if err != nil {
  panic(err)
}

if s.Name == nil {
  panic(&amp;quot;Name is missing or null!&amp;quot;)
}

if s.Age == nil {
  panic(&amp;quot;Age is missing or null!&amp;quot;)
}

fmt.Printf(&amp;quot;Name: %s  Age: %f\n&amp;quot;, *s.Name, *s.Age)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-gin-binding-bind&#34;&gt;3 gin/binding.Bind&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;binding:&amp;quot;required&amp;quot;&lt;/code&gt; 指定某个域是必须的。当 binding 时该字段为空会返回错误&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;fmt&amp;quot;
&amp;quot;time&amp;quot;

&amp;quot;net/http&amp;quot;

&amp;quot;github.com/gin-gonic/gin&amp;quot;
)

type myJSONStruct struct {
Name string
Age  int `binding:&amp;quot;required&amp;quot;`
}

func addUser(c *gin.Context) {
var response interface{}
data := new(myJSONStruct)
if err := c.Bind(data); err != nil {
  // [err=Key: &#39;myJSONStruct.Age&#39; Error:Field validation for &#39;Age&#39; failed on the &#39;required&#39; tag]
  fmt.Printf(&amp;quot;addUser error [Bind error] [err=%s]\n&amp;quot;, err)
  c.JSON(http.StatusBadRequest, response)
  return
}
fmt.Printf(&amp;quot;addUser success [data=%v]\n&amp;quot;, data)
c.JSON(http.StatusOK, response)
}

func main() {
router := gin.New()
api := router.Group(&amp;quot;/api/adduser&amp;quot;)
api.POST(&amp;quot;&amp;quot;, addUser)

httpServer := &amp;amp;http.Server{
  Addr:              &amp;quot;0.0.0.0:10300&amp;quot;,
  Handler:           router,
  ReadHeaderTimeout: 5 * time.Second,
}
httpServer.ListenAndServe()
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-相关链接&#34;&gt;4 相关链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eager.io/blog/go-and-json/&#34; target=&#34;_blank&#34;&gt;Go JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/issues/17163&#34; target=&#34;_blank&#34;&gt;encoding/json 增加 required 标签被拒绝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/19633763/unmarshaling-json-in-golang-required-field&#34; target=&#34;_blank&#34;&gt;使用 json.Unmarshal 实现 required 标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eagain.net/articles/go-dynamic-json/&#34; target=&#34;_blank&#34;&gt;Go 的动态 JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gin-gonic/gin#model-binding-and-validation&#34; target=&#34;_blank&#34;&gt;gin binding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>module 不要在 vscode 工作区打开工程</title>
      <link>https://xueqing.github.io/blog/go/traps/mod_workspace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/go/traps/mod_workspace/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%97%a7%e8%a1%8c%e4%b8%ba-vs-%e5%9f%ba%e4%ba%8e%e6%a8%a1%e5%9d%97%e7%9a%84%e8%a1%8c%e4%b8%ba&#34;&gt;旧行为 vs 基于模块的行为&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%9c%a8-gopath-%e4%b9%8b%e5%a4%96%e5%b7%a5%e4%bd%9c&#34;&gt;在 GOPATH 之外工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vscode-%e5%af%b9%e6%a8%a1%e5%9d%97%e7%9a%84%e6%94%af%e6%8c%81&#34;&gt;VSCode 对模块的支持&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%bf%9d%e5%ad%98%e6%96%87%e4%bb%b6%e6%97%b6%e4%b8%8d%e5%86%8d%e8%87%aa%e5%8a%a8%e5%af%bc%e5%85%a5&#34;&gt;保存文件时不再自动导入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%9b%b8%e5%85%b3%e9%93%be%e6%8e%a5&#34;&gt;相关链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;旧行为-vs-基于模块的行为&#34;&gt;旧行为 vs 基于模块的行为&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;模块在 Go1.11 开始，因此按照设计旧行为会默认保留。因此需要注意什么时候是旧的 1.10 状态行为(查找 &lt;code&gt;vendor&lt;/code&gt; 目录和 GOPATH 来寻找依赖)，什么时候是新的基于模块的行为

&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;GOPATH&lt;/code&gt; 之内: 默认是旧的 1.10 行为，会忽视模块&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;GOPATH&lt;/code&gt; 之外且在文件树之内有一个 &lt;code&gt;go.mod&lt;/code&gt; 文件: 默认是模块行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GO111MODULE&lt;/code&gt; 环境变量&lt;/li&gt;
&lt;li&gt;不设置或 &lt;code&gt;auto&lt;/code&gt;: 上述默认行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on&lt;/code&gt;: 强制支持模块，与目录位置无关&lt;/li&gt;
&lt;li&gt;&lt;code&gt;off&lt;/code&gt;: 强制不支持模块，与目录位置无关&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;在-gopath-之外工作&#34;&gt;在 GOPATH 之外工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果对于一个给定的导入路径，有多个包的版本，那么要求包的开发版本放在一个指定的位置是没有意义的。如果需要同时在 v1.3 和 v1.4 版本上修改 bug，显然需要在不同的位置切换模块。实际上，这种情况下，没有必要在 GOPATH 目录工作&lt;/li&gt;
&lt;li&gt;GOPATH 做了三件事

&lt;ul&gt;
&lt;li&gt;定义依赖的版本(现在在 &lt;code&gt;go.mod&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;保存这些依赖的源码(现在在分别的 cache)&lt;/li&gt;
&lt;li&gt;提供一种方式来推测特定目录(去掉先导的 &lt;code&gt;$GOPATH/src&lt;/code&gt;)代码内的导入路径(现在有机制来确定当前目录代码的导入路径，可以停止要求程序猿在 GOPATH 工作)&lt;/li&gt;
&lt;li&gt;此机制位于 &lt;code&gt;go.mod&lt;/code&gt; 文件的 &lt;code&gt;module&lt;/code&gt; 命令。比如当前目录是 &lt;code&gt;buggy&lt;/code&gt;，且 &lt;code&gt;../go.mod&lt;/code&gt; 包含 &lt;code&gt;module &amp;quot;rsc.io/quote&amp;quot;&lt;/code&gt;，那么当前目录的导入路径就是 &lt;code&gt;rsc.io/quote/buggy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;vgo&lt;/code&gt; 原型支持在 GOPATH 之外工作。比如下面的例子，即使 Upspin 没有引入 &lt;code&gt;go.mod&lt;/code&gt; 文件也可以工作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $HOME
git clone https://github.com/upspin/upspin
cd upspin
# vgo 从 导入注释推测模块名字是 upsin.io，并且从 Gopkg.loc 推测需要的依赖版本
vgo test -short ./...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vscode-对模块的支持&#34;&gt;VSCode 对模块的支持&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;新的语言服务 gopls 支持模块，设置 &lt;code&gt;&amp;quot;go.useLanguageServer&amp;quot;: true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;保存文件时不再自动导入&#34;&gt;保存文件时不再自动导入&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果不使用语言服务，插件默认使用 &lt;code&gt;goreturns&lt;/code&gt; 工具格式化文件，并自动导入缺失的包。但是 &lt;code&gt;goreturns&lt;/code&gt; 工具不支持模块，因此存文件时自动导入的特性不生效&lt;/li&gt;
&lt;li&gt;增加设置 &lt;code&gt;&amp;quot;go.formatTool&amp;quot;: &amp;quot;goimports&amp;quot;&lt;/code&gt;，然后使用 &lt;code&gt;Go: Install/Update Tools&lt;/code&gt; 安装或更新 &lt;code&gt;goimports&lt;/code&gt;，因为 &lt;code&gt;goimports&lt;/code&gt; 已经增加对模块的支持&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;相关链接&#34;&gt;相关链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34; target=&#34;_blank&#34;&gt;Go module wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Modules#when-do-i-get-old-behavior-vs-new-module-based-behavior&#34; target=&#34;_blank&#34;&gt;When do I get old behavior vs. new module-based behavior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-cmd&#34; target=&#34;_blank&#34;&gt;Versioned Go Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.swtch.com/vgo-cmd#working_outside_gopath&#34; target=&#34;_blank&#34;&gt;Working outside GOPATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/vscode-go/wiki/Go-modules-support-in-Visual-Studio-Code&#34; target=&#34;_blank&#34;&gt;Go modules support in Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>作用域</title>
      <link>https://xueqing.github.io/blog/go/traps/var_scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/go/traps/var_scope/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;编译器遇到一个名字的引用时，从最内层的封闭词法块到全局块寻找其声明

&lt;ul&gt;
&lt;li&gt;没有找到会报 “undeclared name” 错误&lt;/li&gt;
&lt;li&gt;内层和外层都存在声明时，内层的先被找到。此时内层声明会覆盖外部声明，外部声明将不可访问&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;短变量声明&lt;/strong&gt;依赖一个明确的作用域。&lt;strong&gt;只有在同一个词法块中已经存在变量&lt;/strong&gt;的情况下，短声明的行为才和赋值操作一样，外层声明将被忽略。下面的代码容易覆盖全局声明的 &lt;code&gt;cwd&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;因为 cwd 和 err 在函数块内部都尚未声明，所以 &lt;code&gt;:=&lt;/code&gt; 语句将它们视为局部变量。内存 cwd 声明使得外部声明不可见&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决方法是不使用 &lt;code&gt;:=&lt;/code&gt;，而是使用 &lt;code&gt;var&lt;/code&gt; 声明变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;fmt&amp;quot;
&amp;quot;os&amp;quot;
)

var cwd string

func main() {
cwd, err := os.Getwd() //compile error: cwd declared and not used
if err != nil {
fmt.Printf(&amp;quot;err=%s\n&amp;quot;, err)
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下面的代码，main 函数中的 cwd 是局部变量，会覆盖全局变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
&amp;quot;log&amp;quot;
&amp;quot;os&amp;quot;
)

var cwd string = &amp;quot;.&amp;quot;

func main() {
mylog()
cwd, err := os.Getwd()
if err != nil {
log.Fatalf(&amp;quot;os.Getwd failed: %v\n&amp;quot;, err)
}
log.Printf(&amp;quot;os.Getwd success: %s\n&amp;quot;, cwd)
mylog()
}

func mylog() {
log.Printf(&amp;quot;global cwd: %s\n&amp;quot;, cwd)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>同一包不同源文件变量声明时不要带包名</title>
      <link>https://xueqing.github.io/blog/go/traps/package_var/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/go/traps/package_var/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;同一个包 &lt;code&gt;pkgname&lt;/code&gt; 有多个源文件，比如 &lt;code&gt;A.go&lt;/code&gt;、&lt;code&gt;B.go&lt;/code&gt;。&lt;code&gt;A.go&lt;/code&gt; 中声明了变量 &lt;code&gt;var1&lt;/code&gt;，&lt;code&gt;B.go&lt;/code&gt; 使用此变量直接写 &lt;code&gt;var1&lt;/code&gt;，如果使用 &lt;code&gt;pkgname.var1&lt;/code&gt; 会报错，找不到定义&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
