<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>支付系统 | kiki</title>
    <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/</link>
      <atom:link href="https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" />
    <description>支付系统</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>支付系统</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/</link>
    </image>
    
    <item>
      <title>支付系统设计</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/readme/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1&#34;&gt;支付系统设计&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%9B%AE%E5%BD%95&#34;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8F%82%E8%80%83&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;1_支付系统的账户模型.md&#34; target=&#34;_blank&#34;&gt;支付系统的账户模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;2_对账处理.md&#34; target=&#34;_blank&#34;&gt;对账处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;3_银行卡支付.md&#34; target=&#34;_blank&#34;&gt;银行卡支付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;4_绑卡签约和身份验证.md&#34; target=&#34;_blank&#34;&gt;绑卡、签约和身份验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;5_应用内支付.md&#34; target=&#34;_blank&#34;&gt;应用内支付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;6_支付产品服务设计.md&#34; target=&#34;_blank&#34;&gt;支付产品服务设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;7_支付系统的整体架构.md&#34; target=&#34;_blank&#34;&gt;支付系统的整体架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/459443.html&#34; target=&#34;_blank&#34;&gt;支付系统设计：支付系统的账户模型（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/it/459445.html&#34; target=&#34;_blank&#34;&gt;支付系统设计：对账处理（二）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/477150.html&#34; target=&#34;_blank&#34;&gt;支付系统设计：银行卡支付（三）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/478366.html&#34; target=&#34;_blank&#34;&gt;支付系统设计：绑卡、签约和身份验证（四）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/484085.html&#34; target=&#34;_blank&#34;&gt;支付系统设计：应用内支付（五）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/632482.html&#34; target=&#34;_blank&#34;&gt;从产品分类、模块功能和业务流程，了解支付产品服务的设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/640373.html&#34; target=&#34;_blank&#34;&gt;浅析支付系统的整体架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;其他

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/732301.html&#34; target=&#34;_blank&#34;&gt;支付网关设计概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/450345.html&#34; target=&#34;_blank&#34;&gt;支付网关的设计：核心模块的功能需求、软件架构设计以及注意要点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pd/688629.html&#34; target=&#34;_blank&#34;&gt;支付手续费设计思路&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1 支付系统的账户模型</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/1_%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/1_%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B4%A6%E6%88%B7%E6%A8%A1%E5%9E%8B/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#11-%e5%89%8d%e8%a8%80&#34;&gt;1.1 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12-%e6%94%af%e4%bb%98%e8%b4%a6%e6%88%b7%e5%92%8c%e7%99%bb%e5%bd%95%e8%b4%a6%e5%8f%b7&#34;&gt;1.2 支付账户和登录账号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#13-%e8%b4%a6%e6%88%b7%e7%9a%84%e8%ae%be%e8%ae%a1%e9%9c%80%e6%b1%82&#34;&gt;1.3 账户的设计需求&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#131-%e4%ba%a4%e6%98%93%e4%b8%8e%e8%b4%a6%e6%88%b7&#34;&gt;1.3.1 交易与账户&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#14-%e8%ae%b0%e8%b4%a6%e4%b8%8e%e8%b4%a6%e6%88%b7&#34;&gt;1.4 记账与账户&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#141-%e5%86%85%e9%83%a8%e8%b4%a6%e6%88%b7%e5%92%8c%e5%a4%96%e9%83%a8%e8%b4%a6%e6%88%b7&#34;&gt;1.4.1 内部账户和外部账户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#142-%e6%94%b6%e6%ac%be%e8%b4%a6%e6%88%b7%e5%92%8c%e6%94%b6%e5%8d%95%e8%b4%a6%e6%88%b7&#34;&gt;1.4.2 收款账户和收单账户&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#15-%e8%b4%a6%e6%88%b7%e5%bb%ba%e6%a8%a1&#34;&gt;1.5 账户建模&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#151-%e5%ae%9e%e4%bd%93%e6%a8%a1%e5%9e%8b&#34;&gt;1.5.1 实体模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#152-%e8%b4%a6%e6%88%b7%e6%a8%a1%e5%9e%8b&#34;&gt;1.5.2 账户模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#153-%e4%ba%a4%e6%98%93%e6%a8%a1%e5%9e%8b&#34;&gt;1.5.3 交易模型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-1-前言&#34;&gt;1.1 前言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;账户体系是支付系统的基础，它的设计直接影响整个系统的特性。这里探讨如何针对电子商务系统的支付账户体系设计&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-2-支付账户和登录账号&#34;&gt;1.2 支付账户和登录账号&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支付账户：指用户在支付系统中用于交易的资金所有者权益的凭证&lt;/li&gt;
&lt;li&gt;登录账号：指用户在系统中的登录的凭证和个人信息&lt;/li&gt;
&lt;li&gt;关系

&lt;ul&gt;
&lt;li&gt;一个用户可有多个登录账户，一个登录账户可有多个支付账户，如零钱账户，储值卡账户等&lt;/li&gt;
&lt;li&gt;一般来说，支付账户不会在多个登录账户之间共用。如没有特殊说明，下文中的账户，都默认指支付账户&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-3-账户的设计需求&#34;&gt;1.3 账户的设计需求&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在支付系统中，账户的设置，主要考虑的方面

&lt;ul&gt;
&lt;li&gt;交易需求：如检查账户是否被锁定、余额是否足够、是否有效等&lt;/li&gt;
&lt;li&gt;记账需求：按照公司会计需求记录账户上的所有行为，包括支出、充值、转账等&lt;/li&gt;
&lt;li&gt;对账需求：包括和支付渠道、商户、个人的对账需求，核对交易和账户余额是否正确&lt;/li&gt;
&lt;li&gt;风控需求：如反洗钱、反欺诈等，都需要依赖于账户体系来提供核心数据&lt;/li&gt;
&lt;li&gt;信用需求：对用户、资产、商户等主体进行信用评估时，也需要依赖账户体系来提供的核心数据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;这五个需求，按照其设计的优先级，也是从支付、记账、对账、风控来进行。支付系统根据其发展所处的阶段，逐步将新增需求纳入设计中&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-3-1-交易与账户&#34;&gt;1.3.1 交易与账户&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;账户设置，一般从交易开始。交易的实现必须有账户的支持，账户是交易的基本构成元素&lt;/li&gt;
&lt;li&gt;从支付系统的角度，交易中涉及到的资金流是资金从一个账户流向另一个账户

&lt;ul&gt;
&lt;li&gt;交易主体：发起交易的一方。可以是个人或机构。资金从该主体所拥有的账户中流出&lt;/li&gt;
&lt;li&gt;交易对手：接收交易的一方。可以是个人或机构&lt;/li&gt;
&lt;li&gt;渠道：由于电商系统本身并无清结算的资质，所有资金从交易主体到交易对手的账户的流动，在大部分情况下，并没有经过电商系统，而是由电商系统调用支付渠道提供的接口，由它来完成真正的支付过程。在此过程中，渠道要收取费用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;所以，在电商系统中，一次交易会涉及到三个账户： 交易主体账户、交易对手账户及支付渠道账户&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-4-记账与账户&#34;&gt;1.4 记账与账户&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;记账：公司的会计需要对每一笔交易都要做详细的记录&lt;/li&gt;
&lt;li&gt;会计科目：公司每天都产生大量的交易行为，为了方便管理和统计，一个简单的方法是对交易进行分类，比如食品、带宽、办公用品等等。这个分类按照公司的规模和业务复杂度，可以有一级、二级、三级或更多级的结构，这被称之为会计科目&lt;/li&gt;
&lt;li&gt;记账时，除了交易明细，还需要在每个级别上对交易额进行汇总

&lt;ul&gt;
&lt;li&gt;一般来说，一级科目上汇总称为总帐科目，而详细记录称为明细科目&lt;/li&gt;
&lt;li&gt;电商系统中，涉及到的参与方较多，记账也相对复杂，但基本方法类似。电商的参与者可以分为商户、买家和渠道，对这三类参与者，都需要分别建立总帐账户和明细账户&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-4-1-内部账户和外部账户&#34;&gt;1.4.1 内部账户和外部账户&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;外部账户：支付系统只能记录账户在本系统的明细以及累计消费额，无法得知账户真正余额

&lt;ul&gt;
&lt;li&gt;用户使用银行卡支付时，电商支付系统需要和银行对接，从用户银行卡所代表的账户上扣除资金&lt;/li&gt;
&lt;li&gt;对接了银行、第三方支付等机构的电商支付系统，需要连接到用户在这些机构的账户来执行扣款或者充值操作，这些账户称为外部账户&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;内部账号：可以知道账号的全部消费明细和余额

&lt;ul&gt;
&lt;li&gt;零钱：也就是让用户充值到零钱，使用的时候就直接从零钱中扣除。这就需要零钱账号。这是电商系统中自己设立的账号，所以也叫内部账号&lt;/li&gt;
&lt;li&gt;除了零钱账号，也可以有储值卡账号，信用账号等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-4-2-收款账户和收单账户&#34;&gt;1.4.2 收款账户和收单账户&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;收款账户：当电商要对接银行时，往往都会被要求开设一个收款账户

&lt;ul&gt;
&lt;li&gt;用户通过这个银行来支付时，钱就被转到这个账户上。对第三方支付也是一样&lt;/li&gt;
&lt;li&gt;收款账户是开设在银行或者第三方支付这边的，即渠道侧。一般来说，渠道每天都可以提供这个账户的交易流水供电商对账用。这样在电商这边，渠道就成为一个收单机构&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;收单账号：在电商这边，建立这个收款账户对应的对账用的收单账号，用来记录通过这个渠道进行的各项交易流水

&lt;ul&gt;
&lt;li&gt;开设一个账号，绑定这个收款账户，就可以查这个账户在渠道侧的流水&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-5-账户建模&#34;&gt;1.5 账户建模&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;账户模型和公司业务密切相关，不同规模、发展阶段不同的公司需要不同的模型&lt;/li&gt;
&lt;li&gt;账户建模本身包括三大核心模型：实体模型、账户模型和交易模型&lt;/li&gt;
&lt;li&gt;明细模型：从交易模型中可以衍生出针对各个角色的账户流水，用于支持对账&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-5-1-实体模型&#34;&gt;1.5.1 实体模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;实体模型：和用户、商户模型有重叠的地方，这里专门针对支付而设置的各个实体属性&lt;/li&gt;
&lt;li&gt;一般来说，支付相关的实体模型需要包括如下属性

&lt;ul&gt;
&lt;li&gt;用户 ID：一般直接映射到登录账户的 ID&lt;/li&gt;
&lt;li&gt;是否允许执行支付&lt;/li&gt;
&lt;li&gt;支付密码&lt;/li&gt;
&lt;li&gt;手机号：用于设置或者重置支付密码&lt;/li&gt;
&lt;li&gt;邮箱：用于设置或者重置支付密码&lt;/li&gt;
&lt;li&gt;用户的安全等级：根据业务需要来设置&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-5-2-账户模型&#34;&gt;1.5.2 账户模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;根据业务需要，可设置多种账户，如支付账户、预付卡账户、代扣账户、零钱账户、结算账户等&lt;/li&gt;
&lt;li&gt;从类别上来说，这里的账户一般指总账账户&lt;/li&gt;
&lt;li&gt;一般来说电商系统中涉及的账户类型有：

&lt;ul&gt;
&lt;li&gt;虚拟币账号：用户和使用奇点奇豆的商户都需要建立虚拟币账户&lt;/li&gt;
&lt;li&gt;关于虚拟币：商家先接受虚拟币，如何结算需要和商家定协议&lt;/li&gt;
&lt;li&gt;代扣账号：用来支持订阅类型的定期代扣&lt;/li&gt;
&lt;li&gt;零钱账号：即电商的内部账号.用户、商户、清算单位需要建立零钱账户&lt;/li&gt;
&lt;li&gt;第三方支付账号：用户在第三方支付机构建立的账户&lt;/li&gt;
&lt;li&gt;银行卡账号：用户的银行卡信息，每个卡对应一个账户&lt;/li&gt;
&lt;li&gt;结算账号：用来支持和第三方支付公司、银行进行结算用。第三方支付需要为每个商户号建立结算账号；银行需要为借记卡、贷记卡分别建立结算账号(有必要吗？银行卡直连时使用)&lt;/li&gt;
&lt;li&gt;代扣代缴账户：用来支持代扣税款业务&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对这些账户，需要设置如下属性

&lt;ul&gt;
&lt;li&gt;基本属性&lt;/li&gt;
&lt;li&gt;账户号(账户 ID)：一般是系统自动生成。特别注意，要事先约定好账户 ID 的规则。如头三位用来表示账户类型，后几位用来表示账户编号等。务必保证根据账号号能快速确定账户类型，且保证账户号不重复&lt;/li&gt;
&lt;li&gt;账户名称：一般由用户自己设置的，显示用&lt;/li&gt;
&lt;li&gt;账户使用的货币类型：注意虽然一张银行卡可以支持多个币种，实际在内部，还是针对每个币种建立独立的子账户。涉及到多币种的账户，也可以采用类似的建模方案&lt;/li&gt;
&lt;li&gt;会计科目代码：一般是一级会计科目的代码&lt;/li&gt;
&lt;li&gt;账户控制相关&lt;/li&gt;
&lt;li&gt;是否允许充值&lt;/li&gt;
&lt;li&gt;是否允许提现&lt;/li&gt;
&lt;li&gt;是否允许透支&lt;/li&gt;
&lt;li&gt;是否允许支付&lt;/li&gt;
&lt;li&gt;是否允许转账进入&lt;/li&gt;
&lt;li&gt;是否允许转账转出&lt;/li&gt;
&lt;li&gt;是否有安全保障&lt;/li&gt;
&lt;li&gt;是否激活&lt;/li&gt;
&lt;li&gt;是否冻结&lt;/li&gt;
&lt;li&gt;资金相关&lt;/li&gt;
&lt;li&gt;当前账户余额：等于可用余额+冻结余额&lt;/li&gt;
&lt;li&gt;当前账户可用余额&lt;/li&gt;
&lt;li&gt;当前账户冻结余额：指账户上暂不能使用的额度。在支付的时候，往往是先冻结，商品出库后，再实际执行扣款&lt;/li&gt;
&lt;li&gt;银行卡、第三方支付信息&lt;/li&gt;
&lt;li&gt;第三方实体 ID&lt;/li&gt;
&lt;li&gt;第三方账号：如银行卡号或在第三方支付的 open_id 等&lt;/li&gt;
&lt;li&gt;第三方 app_id&lt;/li&gt;
&lt;li&gt;账号失效日期：该账号什么时候失效&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注意

&lt;ul&gt;
&lt;li&gt;有些第三方信息不能保存(如用户的账号密码、信用卡的 CV 号)&lt;/li&gt;
&lt;li&gt;为了避免账户信息被爬库或者数据库信息意外泄露，一般还需要对敏感字段(如密码)进行加密保存，甚至保存到另外的表中&lt;/li&gt;
&lt;li&gt;更进一步，为了避免账户信息被意外修改，还可增加一个校验字段，在写入数据时设置该字段，在读取数据时做校验，一旦发现数据有问题，则关闭该账号&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-5-3-交易模型&#34;&gt;1.5.3 交易模型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;考虑到交易记录将被用于风控和信用分析，能收集到的信息是越全面越好

&lt;ul&gt;
&lt;li&gt;流水号：每一笔交易的流水号不同。需要根据业务情况详细设计流水号。流水号往往也是对交易表做分表分库的依据&lt;/li&gt;
&lt;li&gt;交易记录创建时间&lt;/li&gt;
&lt;li&gt;交易记录最后修改时间&lt;/li&gt;
&lt;li&gt;会计科目代码&lt;/li&gt;
&lt;li&gt;关联的订单号，由商户提供&lt;/li&gt;
&lt;li&gt;订单名称、描述、关联的地址等信息&lt;/li&gt;
&lt;li&gt;费用信息：包括结算货币类型、原始费用、实际费用等&lt;/li&gt;
&lt;li&gt;交易主体信息：记录主体 ID、类型、名字、账号、账号类型、使用的 IP 地址、手机号、平台、通知邮箱、当前位置等。这些信息虽可以从主体表中获取，但考虑主体表信息随时会被修改，所以这里需要记录详细的各原始信息&lt;/li&gt;
&lt;li&gt;交易对手信息：记录对手主体 ID、类型、名字、账号、账号类型、手机号、平台、通知邮箱等&lt;/li&gt;
&lt;li&gt;交易渠道信息：记录所使用的交易渠道的实体 id、渠道账户、渠道执行支付的时间、渠道侧返回的订单号等。如有错误发生，还需要记录从渠道接收到的错误信息和错误码&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2 对账处理</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/2_%E5%AF%B9%E8%B4%A6%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/2_%E5%AF%B9%E8%B4%A6%E5%A4%84%E7%90%86/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%e5%89%8d%e8%a8%80&#34;&gt;2.1 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%e5%af%b9%e8%b4%a6%e5%a4%84%e7%90%86%e6%b5%81%e7%a8%8b&#34;&gt;2.2 对账处理流程&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#221-%e6%b8%a0%e9%81%93%e5%af%b9%e8%b4%a6%e5%8d%95%e4%b8%8b%e8%bd%bd&#34;&gt;2.2.1 渠道对账单下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2211-%e7%ac%ac%e4%b8%89%e6%96%b9%e6%94%af%e4%bb%98%e7%9a%84%e5%af%b9%e8%b4%a6%e5%8d%95%e6%83%85%e5%86%b5&#34;&gt;2.2.1.1 第三方支付的对账单情况&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2212-%e9%93%b6%e8%a1%8c%e7%9b%b4%e8%bf%9e%e7%9a%84%e5%af%b9%e8%b4%a6%e6%83%85%e5%86%b5&#34;&gt;2.2.1.2 银行直连的对账情况&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#222-%e6%b8%a0%e9%81%93%e5%af%b9%e8%b4%a6%e5%8d%95%e6%a0%87%e5%87%86%e5%8c%96&#34;&gt;2.2.2 渠道对账单标准化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#223-%e6%9c%ac%e5%9c%b0%e4%ba%a4%e6%98%93%e8%ae%b0%e5%bd%95%e5%87%86%e5%a4%87&#34;&gt;2.2.3 本地交易记录准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#224-%e8%bd%a7%e5%b8%90&#34;&gt;2.2.4 轧帐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#225-%e5%b9%b3%e5%b8%90&#34;&gt;2.2.5 平帐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-1-前言&#34;&gt;2.1 前言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;轧帐：对账系统的工作，是发现有差异的记录&lt;/li&gt;
&lt;li&gt;平帐：通过人工或者自动的方式，解决上述差异&lt;/li&gt;
&lt;li&gt;对电商系统来说，每一笔交易，在所有相关主体侧都要能对得上

&lt;ul&gt;
&lt;li&gt;交易主体：如发起人是个人，必须能够从个人交易历史记录中找到这笔交易。但大部分人不会保留电子记录，所以一般是提供可以下载的账单或交易记录，让用户自己对去&lt;/li&gt;
&lt;li&gt;交易对手：一般是商户。商户侧对账处理同用户侧，也仅仅提供对账单&lt;/li&gt;
&lt;li&gt;交易渠道侧：这是对账的重点，一是核实交易流水，二是核实交易佣金，毕竟是租用人家通道做结算的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;需要对账的记录主要是交易记录和退款记录&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-2-对账处理流程&#34;&gt;2.2 对账处理流程&lt;/h2&gt;

&lt;p&gt;一般来说，对账流程涉及到如下步骤：渠道对账单下载、本地交易记录准备、轧账、平账&lt;/p&gt;

&lt;h3 id=&#34;2-2-1-渠道对账单下载&#34;&gt;2.2.1 渠道对账单下载&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;银行、第三方支付、银联等，基本都会提供对账单下载的功能。不过也有少数工作做不到位或者太到位的银行，只提供账单查询后台，不提供对账单下载功能&lt;/li&gt;
&lt;li&gt;对开发人员来说，这里有几个坑

&lt;ul&gt;
&lt;li&gt;对账单格式不一：txt、xml、csv 的都有。为了后续能够统一处理，在账单下载完成后，需要进行标准化处理&lt;/li&gt;
&lt;li&gt;下载方式不一：HTTP、HTTPS、FTP 的都有。下载程序需要按照渠道的协议来处理&lt;/li&gt;
&lt;li&gt;下载时间不一：一般是凌晨 1 点后，到中午 12 才能用的也有。如果在预定的时间取不到数据，需要注意重试读取&lt;/li&gt;
&lt;li&gt;稳定性差：FTP 服务器出问题是常有的事。渠道侧解决方案往往就是重启。所以重试机制是必要的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技术方面

&lt;ul&gt;
&lt;li&gt;HTTP(S)：用 apache http client 即可实现连接池和断点续传&lt;/li&gt;
&lt;li&gt;FTP：可使用 Apache Commons Net API&lt;/li&gt;
&lt;li&gt;不管是哪一个，都需设置重试次数和连接超时。重试次数和间隔的设置需要小心，重试太频繁，容易把服务器打死；时间间隔太大，又会阻塞后续处理步骤。5～10 分钟是一个合适的重试间隔区间&lt;/li&gt;
&lt;li&gt;连接超时：指在服务器出现问题时，连接在指定时间内获取不到数据即自动断开&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-2-1-1-第三方支付的对账单情况&#34;&gt;2.2.1.1 第三方支付的对账单情况&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;渠道&lt;/th&gt;
&lt;th&gt;对账周期&lt;/th&gt;
&lt;th&gt;账单提供方式&lt;/th&gt;
&lt;th&gt;账单文件格式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;支付宝&lt;/td&gt;
&lt;td&gt;每天 2:10&lt;/td&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;xml&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;支付宝退款&lt;/td&gt;
&lt;td&gt;每天 3:10&lt;/td&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;xml&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;百付宝&lt;/td&gt;
&lt;td&gt;每天 7:00&lt;/td&gt;
&lt;td&gt;FTP&lt;/td&gt;
&lt;td&gt;txt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;百付宝退款&lt;/td&gt;
&lt;td&gt;每天 7:00&lt;/td&gt;
&lt;td&gt;FTP&lt;/td&gt;
&lt;td&gt;txt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;微信支付&lt;/td&gt;
&lt;td&gt;每天 10:30&lt;/td&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;txt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;微信退款&lt;/td&gt;
&lt;td&gt;每天 10:30&lt;/td&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;txt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;2-2-1-2-银行直连的对账情况&#34;&gt;2.2.1.2 银行直连的对账情况&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;银行&lt;/th&gt;
&lt;th&gt;对账形式&lt;/th&gt;
&lt;th&gt;对账周期&lt;/th&gt;
&lt;th&gt;打款周期&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;交行&lt;/td&gt;
&lt;td&gt;接口/商户对账系统&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+1)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;建行&lt;/td&gt;
&lt;td&gt;接口&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+1)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;工行&lt;/td&gt;
&lt;td&gt;登录网银的方式手动下载&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+1)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;浦发&lt;/td&gt;
&lt;td&gt;信用卡-登录自助平台；借记卡-接口&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+1)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;农行&lt;/td&gt;
&lt;td&gt;银行定时推送对账文件&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+0)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;中行&lt;/td&gt;
&lt;td&gt;银行定时推送对账文件&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+1)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;招行&lt;/td&gt;
&lt;td&gt;银行定时推送对账文件&lt;/td&gt;
&lt;td&gt;日对账&lt;/td&gt;
&lt;td&gt;日结(T+1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;2-2-2-渠道对账单标准化&#34;&gt;2.2.2 渠道对账单标准化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;微信的对账单：csv 格式，逗号隔开。包括字段

&lt;ul&gt;
&lt;li&gt;交易时间：在微信侧的支付完成的时间。这个时间会成为一个陷阱&lt;/li&gt;
&lt;li&gt;公众账号ID、商户号、子商户号、设备号：这些信息需要做验证，确保是自己的单子&lt;/li&gt;
&lt;li&gt;微信订单号、商户订单号：对单的核心&lt;/li&gt;
&lt;li&gt;微信订单号：微信侧产生的订单号，在微信支付接口返回值中有。但是万一收不到这个返回值，那在本地记录中可能就空了&lt;/li&gt;
&lt;li&gt;商户订单号：我们发送给微信的订单号，一般用这个来做对单依据。两边的数据中都会有这个值&lt;/li&gt;
&lt;li&gt;用户标识、交易类型、交易状态、付款银行、货币种类、总金额、企业红包金额：对单的核心字段，必须确保双方是一致的&lt;/li&gt;
&lt;li&gt;商品名称、商户数据包、手续费、费率：可选验证&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;某宝的账单：txt 格式，空格隔开。包括字段

&lt;ul&gt;
&lt;li&gt;商户订单号、交易流水号、交易时间、支付时间、付款方、交易金额、交易类型、交易状态&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;每个渠道的账单格式不尽相同，在得到账单后，下一步是对账单做标准化处理，这样轧帐以及后续工作可统一处理&lt;/li&gt;
&lt;li&gt;标准化后的账单数据可以放在文件系统或者数据库中。这取决于交易数据量

&lt;ul&gt;
&lt;li&gt;每天百万以上的量，使用文件系统比较合适。如 hdfs&lt;/li&gt;
&lt;li&gt;数据库操作相对比较慢，也浪费资源&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;基于文件系统的标准化涉及如下内容

&lt;ul&gt;
&lt;li&gt;文件格式标准化：统一使用 csv、json 或 xml 格式。如使用 hadoop 或者 spark 对账，使用 csv 是个不错的选择&lt;/li&gt;
&lt;li&gt;文件存储统一化：文件目录、文件名都需要遵循统一命名规范&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-2-3-本地交易记录准备&#34;&gt;2.2.3 本地交易记录准备&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本地交易记录的准备，总的来说有如下方法

&lt;ul&gt;
&lt;li&gt;直接用原始数据：鉴于大部分系统使用的是 MySQL，也意味着在 MySQL 上做对账&lt;/li&gt;
&lt;li&gt;对账时需要大量的数据查找工作，必然会影响线上业务&lt;/li&gt;
&lt;li&gt;在数据规模较大(如超过 100 万)时不太合适&lt;/li&gt;
&lt;li&gt;使用备库执行对账：既简单，也不影响线上业务。是典型的空间换时间的做法&lt;/li&gt;
&lt;li&gt;如果业务大到需要分表分库才能处理，那对账数据准备也不一样&lt;/li&gt;
&lt;li&gt;使用分库不现实，因为分库一般是按照主体 id，而不是渠道 id 来分库，这样对账需要在多个库上进行，会降低效率&lt;/li&gt;
&lt;li&gt;对分表分库建立从库非常耗费资源。这种情况下，需要同步一份数据到文件系统(hdfs)，或 NoSQL 数据库&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;交易记录是支付系统核心数据，有大量的应用(如信用、风控)都需要交易记录数据。这些应用对交易记录的需求还不完全一致，为了提升性能，交易记录会使用异步的方式来将数据投递给使用方

&lt;ul&gt;
&lt;li&gt;交易记录在入库时，投递消息到消息系统中&lt;/li&gt;
&lt;li&gt;使用方监听这个消息，一旦收到新消息，则从交易记录库中查询数据，获取数据并更新到库中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-2-4-轧帐&#34;&gt;2.2.4 轧帐&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;轧帐：按照客户订单号来比较本地交易记录和渠道交易记录是否一致

&lt;ul&gt;
&lt;li&gt;从算法角度，是计算两个数组的差异&lt;/li&gt;
&lt;li&gt;在单机运行时，可采用的算法不少。&lt;/li&gt;
&lt;li&gt;推荐采用 mapreduce 来轧帐，优势是可以按照订单号将渠道提供的记录和本地记录 shuffle 到同一个reduce 处理上，这样就可以很容易进行数据比对&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;轧帐中最大的坑，莫过于切分点的问题

&lt;ul&gt;
&lt;li&gt;如以整 0 点为切分点，那存在一个问题，本地 23:59 发起的交易，到了渠道侧，可能会在 00:01 处理，这一笔交易变成第二天的帐了&lt;/li&gt;
&lt;li&gt;实际处理中，一笔交易在渠道侧处理，花上几分钟都有可能&lt;/li&gt;
&lt;li&gt;对于切分点附近无法确认的帐，做一个时间窗，在时间窗内的数据，留待第二天对账时继续处理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-2-5-平帐&#34;&gt;2.2.5 平帐&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;发现两边不一致的数据，

&lt;ul&gt;
&lt;li&gt;数据量不大时：记录起来，人工甄别&lt;/li&gt;
&lt;li&gt;数据量很大：人工处理成本太高。这个没有统一的处理方法，需要对有问题的数据分析，然后做自动处理。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;针对交易记录的对账的处理，主要有如下情况

&lt;ul&gt;
&lt;li&gt;本地未支付，支付渠道已支付：这主要是本地未正确接收到渠道下发的异步通知导致。一般处理是将本地状态修改为已支付，并做响应的后续处理，比如通知业务方等&lt;/li&gt;
&lt;li&gt;本地已支付，支付渠道已支付，但金额不同：需要人工核查&lt;/li&gt;
&lt;li&gt;本地已支付，但支付渠道中无记录；或本地无记录，支付渠道有记录：在排除跨日因素外，这种情况非常少见，需要了解具体原因后做处理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;针对退款的对账处理，主要有如下情况

&lt;ul&gt;
&lt;li&gt;本地未退款，支付渠道已退款：以支付渠道为准，修改本地为已退款状态，并触发后续处理&lt;/li&gt;
&lt;li&gt;本地已退款、支付渠道已退款，但金额不同：需要人工核查&lt;/li&gt;
&lt;li&gt;本地已退款，但支付渠道无记录；或本地无记录，支付渠道有记录：在排除跨日因素外，这种情况非常少见，需要了解具体原因后做处理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3 银行卡支付</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/3_%E9%93%B6%E8%A1%8C%E5%8D%A1%E6%94%AF%E4%BB%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/3_%E9%93%B6%E8%A1%8C%E5%8D%A1%E6%94%AF%E4%BB%98/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%e6%94%af%e4%bb%98%e5%92%8c%e4%ba%a4%e6%98%93&#34;&gt;3.1 支付和交易&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#311-%e9%93%b6%e8%a1%8c%e5%8d%a1%e6%94%af%e4%bb%98&#34;&gt;3.1.1 银行卡支付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3111-%e8%ae%a4%e8%af%81%e6%94%af%e4%bb%98&#34;&gt;3.1.1.1 认证支付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3112-%e7%bd%91%e9%93%b6%e6%94%af%e4%bb%98&#34;&gt;3.1.1.2 网银支付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3113-%e5%bf%ab%e6%8d%b7%e6%94%af%e4%bb%98&#34;&gt;3.1.1.3 快捷支付&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32-%e6%94%af%e4%bb%98%e6%b5%81%e7%a8%8b&#34;&gt;3.2 支付流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33-%e8%b5%84%e9%87%91%e6%b5%81&#34;&gt;3.3 资金流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34-%e9%93%b6%e8%a1%8c-token-%e6%94%af%e4%bb%98&#34;&gt;3.4 银行 Token 支付&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#341-%e5%af%b9%e6%8e%a5%e9%93%b6%e8%a1%8c&#34;&gt;3.4.1 对接银行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3411-%e4%b8%93%e7%ba%bf%e9%97%ae%e9%a2%98&#34;&gt;3.4.1.1 专线问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3412-%e5%8a%a0%e5%af%86%e9%97%ae%e9%a2%98&#34;&gt;3.4.1.2 加密问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#342-%e5%af%b9%e6%8e%a5%e9%93%b6%e8%81%94&#34;&gt;3.4.2 对接银联&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-1-支付和交易&#34;&gt;3.1 支付和交易&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支付和交易，这两个概念在不同公司不一样&lt;/li&gt;
&lt;li&gt;此处的定义

&lt;ul&gt;
&lt;li&gt;交易是生成订单；支付是对订单进行付款&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;就支付行为来说，大部分都是单次支付，其次还有转账和退款&lt;/li&gt;
&lt;li&gt;单次支付是用的最多的支付方式，即一次结清所有款项。把单次支付走通了，其他支付方式也容易处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-1-1-银行卡支付&#34;&gt;3.1.1 银行卡支付&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;银行卡支付：分为线上支付和线下支付

&lt;ul&gt;
&lt;li&gt;线下支付：通常说的 POS 收单，这里不介绍&lt;/li&gt;
&lt;li&gt;线上支付&lt;/li&gt;
&lt;li&gt;按照卡的类别，分为贷记卡支付，也叫motopay、ePOS，即信用卡支付；和借记卡支付&lt;/li&gt;
&lt;li&gt;按照支付形态，分为认证支付、网银支付、快捷支付

&lt;ul&gt;
&lt;li&gt;银行卡网银支付要求银行卡必须开通在线支付功能&lt;/li&gt;
&lt;li&gt;快捷支付不需要开通在线支付功能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;主要利用支付验证要素(卡号、密码、手机号、CVN2、CVV2 等)，结合安全认证(例如短信验证码)，让持卡人完成互联网支付&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-1-1-1-认证支付&#34;&gt;3.1.1.1 认证支付&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;指用户在绑卡时，将卡信息提供给电商。由电商在服务器侧保留用户的账户信息，如身份证号、卡号、手机号。在用户支付时，无需再输入这些内容，最多提供密码或者校验码，就可以完成支付&lt;/li&gt;
&lt;li&gt;认证支付基本不会打断用户的使用体验，所以也是电商喜欢的支付方式&lt;/li&gt;
&lt;li&gt;认证支付最大问题是安全性

&lt;ul&gt;
&lt;li&gt;需要向电商暴露个人信息，一旦被窃取，资金就容易被盗走&lt;/li&gt;
&lt;li&gt;在手机上执行支付，一旦手机丢失，窃取者就可以轻而易举的使用或者转移资金&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-1-1-2-网银支付&#34;&gt;3.1.1.2 网银支付&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;网银支付更安全&lt;/li&gt;
&lt;li&gt;网银支付是由银联或者银行提供支付界面，用户必须在页面上输入卡号、密码等验证信息才可以执行支付&lt;/li&gt;
&lt;li&gt;大部分银行还要求用户使用 U 盾或其它安全硬件&lt;/li&gt;
&lt;li&gt;安全和易用永远是个矛盾

&lt;ul&gt;
&lt;li&gt;网银使用会打断用户体验，增加用户使用难度&lt;/li&gt;
&lt;li&gt;对使用硬件加密的支付，不可能天天带着 U 盘跑&lt;/li&gt;
&lt;li&gt;网银主要用在 web 端，在手机端嵌入网银页面，还比较难看&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-1-1-3-快捷支付&#34;&gt;3.1.1.3 快捷支付&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;快捷支付和认证支付类似，不同点在于绑卡之后，有些银行接口会返回 token，后续使用 token 作为支付凭证，无需提供卡号信息，电商也不需要本地保留卡号&lt;/li&gt;
&lt;li&gt;目前主要是银联有提供 token 接口&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-2-支付流程&#34;&gt;3.2 支付流程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;举例：比如用户在电商系统中买了 200 块钱的东西，然后通过浦发银行卡做结算，用的是快捷支付。这个过程是

&lt;ul&gt;
&lt;li&gt;1 用户在交易界面上，提交订单到交易系统中；交易系统确认订单无误后，请求支付系统进行结算。这是在交易系统做的，后面工作就进入支付系统&lt;/li&gt;
&lt;li&gt;2 用户被引导到收银台页面，让用户确认交易金额，选择支付方式，调用支付系统接口&lt;/li&gt;
&lt;li&gt;3 支付系统接收到支付请求，验证请求的各个字段是否有问题，确认无误后，调用支付网关执行支付&lt;/li&gt;
&lt;li&gt;4 支付网关请求浦发银行的快捷支付接口执行支付&lt;/li&gt;
&lt;li&gt;5 支付网关接收到支付结果报文后，对结果报文做解析，获取结果，并将结果告知交易系统。这可以通过 URL 或 RPC 调用实现&lt;/li&gt;
&lt;li&gt;6 商城系统收到支付结果后，开始执行后续操作。如果是支付成功，则开始准备出库。这一步在交易系统中处理，这里不做介绍&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;上述过程的差异

&lt;ul&gt;
&lt;li&gt;网银支付在第 4 步插入一个步骤：将用户导航到网银页面输入支付信息，后续步骤一样&lt;/li&gt;
&lt;li&gt;在资金流上也是相同&lt;/li&gt;
&lt;li&gt;在第 5 步获取返回结果上，一般银行直接同步返回，银联是分为同步和异步返回&lt;/li&gt;
&lt;li&gt;同步告知操作成功或者失败，异步告知扣款成功或者失败&lt;/li&gt;
&lt;li&gt;同步操作和异步操作都需要调用方提供一个回调的 URL 地址，银联会将参数附加在这个地址上。通过解析这些参数可以得到执行结果&lt;/li&gt;
&lt;li&gt;异步操作一般有 2-3 秒的延迟，取决于网络以及该交易处理的复杂度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-3-资金流&#34;&gt;3.3 资金流&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上述支付流程中第 3 步，会触发资金流：资金从用户个人账户上转移到电商公司的账户&lt;/li&gt;
&lt;li&gt;当然，这一笔交易银行要收手续费。资金是实时到账的，手续费一般是按月结算。有按交易笔数计费的，但大部分按照交易金额来收费&lt;/li&gt;
&lt;li&gt;同行快捷支付比较简单。如果支付系统没有对接浦发银行，那对浦发卡，就得走其它支付方式：银联或者第三方支付

&lt;ul&gt;
&lt;li&gt;银联快捷：银联提供的多种接入方式，常说的快捷支付，在银联文档中叫商户侧开通 token 接口。通过这个接口，可以实现同行和跨行资金结算。不管收款行是浦发还是其它行，都可以完成结算。对本地和用户来说体验是一样的。而在银联侧，后台资金流处理不一样。了解这个资金流，有助于在异常情况下，了解资金去向&lt;/li&gt;
&lt;li&gt;收款行也是浦发银行，银联发报文给浦发，浦发使用内部系统完成两个账户间的转帐，即时完成&lt;/li&gt;
&lt;li&gt;收款行是他行，比如工行。银联发指令给浦发和工行，分别完成各自账户上资金余额的增减，对个人和电商来说，这笔资金算是落地了。但实际资金流并不是立即发生。银联会在半夜做清结算后处理这笔资金。这个过程是金融机构之间的清结算，一般不需要关注&lt;/li&gt;
&lt;li&gt;第三方支付：对用户来说，处理的流程和银联一样。但资金流会不一样&lt;/li&gt;
&lt;li&gt;第三方支付在浦发和工行一般都会有落地的托管资金。发生交易后，一般来说不会产生跨行资金流动。用户在浦发行的钱会被结算到第三方支付在浦发行的托管账户，而在工行的钱，会由第三方支付在工行的账户打到客户账户上。这就降低了跨行资金流动成本&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;目前国内主要银行都提供快捷和直联的接口。对电商来说，需要考虑对接哪些银行、怎么对接银行、渠道和第三方支付&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-4-银行-token-支付&#34;&gt;3.4 银行 Token 支付&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一般来说，大部分银行提供直联和网银接口，但不需要直接对接所有银行&lt;/li&gt;
&lt;li&gt;银联和第三方支付也提供直联接口，可以直接对接国内主要银行&lt;/li&gt;
&lt;li&gt;不是所有银行都被银联支持，这和银联签约的接口有关，需要在对接时咨询银联。如浦发借记卡、邮储银行卡不支持。另外交行、平安(含原深发)、上海银行、浦发、北京银行，上述银行卡需开通银联在线支付业务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-4-1-对接银行&#34;&gt;3.4.1 对接银行&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大部分银行提供的银行卡支付接口，借记卡支付和贷记卡支付是不一样的。但也有银行(工行和建行)可以用一套接口同时开通借记卡和贷记卡。&lt;/li&gt;
&lt;li&gt;作为国内最保守的软件团队，和银行对接时务必做好足够的准备。在商务谈判完成、拿到银行的接口文档后，需要考虑两个问题：专线问题、加密问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-4-1-1-专线问题&#34;&gt;3.4.1.1 专线问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;大部分银行对接需要专线。与银行沟通的时候，注意收集如下信息

&lt;ul&gt;
&lt;li&gt;专线类型：MSTP 类型或 SDH 类型&lt;/li&gt;
&lt;li&gt;专线接入点：目前国内主要是联通、电信&lt;/li&gt;
&lt;li&gt;封装类型：HDLC 或 PPP&lt;/li&gt;
&lt;li&gt;专线代宽：默认是 2M&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;前置机 IP，需要在银行侧和电商侧进行配置。专线其实是在银行和电商之间建立一个局域网，需要双方分配通讯 IP

&lt;ul&gt;
&lt;li&gt;这两组 IP 都是 NAT 后的 IP&lt;/li&gt;
&lt;li&gt;银行分配给我们的是电商真实的前置机 IP 经过最外端的网络防火墙转换后的 IP 段&lt;/li&gt;
&lt;li&gt;后者也是对方的真实前置机 IP 经过转换后的 IP 段&lt;/li&gt;
&lt;li&gt;出于安全考虑，双方都不会将真实 IP 暴露出去，所以要 NAT&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;接入地址：即电商这边机房的地址&lt;/li&gt;
&lt;li&gt;从可靠性角度考虑，一般建议从联通、电信各拉一条线路出来。一旦有一个线路出问题了，也不会导致所有交易被终止&lt;/li&gt;
&lt;li&gt;不需要专线的银行接口有：浦发、工行、交行信用卡等&lt;/li&gt;
&lt;li&gt;需要专线的有中行、农行、建行等&lt;/li&gt;
&lt;li&gt;一般专线需要 1 个月左右的时间，包括银行侧的申请、施工时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-4-1-2-加密问题&#34;&gt;3.4.1.2 加密问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;部分银行(如中行)前置要求使用加密机。此处加密机的常用功能有三方面

&lt;ul&gt;
&lt;li&gt;MAC加密(完整性)&lt;/li&gt;
&lt;li&gt;支付会话/密码加密(安全性)&lt;/li&gt;
&lt;li&gt;密钥交换加密(防截取)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;对开发来说，加密机的主要作用，是让黑客都无法从内存中看到密码&lt;/li&gt;
&lt;li&gt;国内对接银行一般就用江南天安的加密机&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-4-2-对接银联&#34;&gt;3.4.2 对接银联&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对接银联比对接银行简单，不需要专线，不需要加密机&lt;/li&gt;
&lt;li&gt;需要获取 ADSS 认证。银联最近在推 Token 接口，有两套接口

&lt;ul&gt;
&lt;li&gt;一套是银联侧开通，一套是商户侧开通&lt;/li&gt;
&lt;li&gt;前者类似网银支付，后者类似快捷支付&lt;/li&gt;
&lt;li&gt;务必要求接入后者接口&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>4 绑卡、签约和身份验证</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/4_%E7%BB%91%E5%8D%A1%E7%AD%BE%E7%BA%A6%E5%92%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/4_%E7%BB%91%E5%8D%A1%E7%AD%BE%E7%BA%A6%E5%92%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#41-%e5%89%8d%e8%a8%80&#34;&gt;4.1 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42-%e7%bb%91%e5%8d%a1%e5%9c%ba%e6%99%af&#34;&gt;4.2 绑卡场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#43-%e7%bb%91%e5%8d%a1%e6%b5%81%e7%a8%8b&#34;&gt;4.3 绑卡流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#44-%e5%8d%a1-bin&#34;&gt;4.4 卡 bin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#45-%e7%9f%ad%e4%bf%a1%e5%92%8c%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81&#34;&gt;4.5 短信和身份验证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#46-%e7%bb%91%e5%8d%a1%e6%8e%a5%e5%8f%a3&#34;&gt;4.6 绑卡接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#47-%e9%93%b6%e8%81%94%e7%bb%91%e5%8d%a1&#34;&gt;4.7 银联绑卡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#48-%e5%ae%9e%e5%90%8d%e8%ae%a4%e8%af%81&#34;&gt;4.8 实名认证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-1-前言&#34;&gt;4.1 前言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;用户绑卡和快捷支付有关

&lt;ul&gt;
&lt;li&gt;绑卡是将用户卡信息提供给电商，以后电商就用这个信息去银行完成支付&lt;/li&gt;
&lt;li&gt;绑卡实际上是一个授权，让用户允许商家自动从他的账户上扣除资金。所以绑卡也叫签约，用户和银行、商家的三方签订的支付合约&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;绑卡对用户和商户来说都存在巨大风险&lt;/li&gt;
&lt;li&gt;用户绑卡是为了提升用户体验，让用户花钱更容易。其次，提升支付成功率

&lt;ul&gt;
&lt;li&gt;使用网银支付成功率在 20% 左右，银联直联成功率一般在 50% 左右，银行卡直联可以提升到 70% 左右&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;我们知道对接银行包括直接对接银行接口和通过银联来间接对接。这两种情况下绑卡处理也不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-2-绑卡场景&#34;&gt;4.2 绑卡场景&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;直观的，电商网站会在用户后台提供一个绑卡的入口，让用户直接绑卡&lt;/li&gt;
&lt;li&gt;要点

&lt;ul&gt;
&lt;li&gt;只能绑自己的卡，这主要从安全角度考虑&lt;/li&gt;
&lt;li&gt;需要用户在银行侧预留的手机号进行短信验证。但不是所有银行都需要。这个时候，为了统一处理，可以考虑自己发验证短信&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;更多的场景是用户在支付中绑卡。也就是提交订单后，发现没有银行卡了，就开始绑卡。和纯绑卡流程不同的是，最后一步绑卡成功后，一般都同时完成支付。有些渠道会提供绑卡并支付的接口，减少交互次数&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-3-绑卡流程&#34;&gt;4.3 绑卡流程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;比较简单的银联直联绑卡。为了保证卡的安全，绑卡有这些前置需求

&lt;ul&gt;
&lt;li&gt;用户必须已经绑定了手机号。该手机号用于修改支付密码&lt;/li&gt;
&lt;li&gt;用户需设置了支付密码。支付密码不同于登录密码&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;针对用户不同状态，绑卡流程上有区别。绑卡是安全操作，要求用户必须登录到系统中。为了避免和服务器端的交互被劫持，所有操作必须在安全链接中进行，即使用 HTTPS。当用户开始绑卡时，执行如下流程

&lt;ul&gt;
&lt;li&gt;1 检查用户是否有手机号。没有则进入设置手机号流程&lt;/li&gt;
&lt;li&gt;2 检查用户是否设置支付密码。如果已经设置，则需要用户输入密码。确认后开始绑卡。否则，也是先进去绑卡后设置密码&lt;/li&gt;
&lt;li&gt;3 用户输入卡号，系统根据卡号判断卡的发卡行，并显示给用户。有些实现，如微信支付，会提供扫卡识码功能&lt;/li&gt;
&lt;li&gt;4 用户输入银行预留手机。对于没有绑过卡的用户，需要用户提供真实姓名和身份证号。对于信用卡，还需要输入 cv 码和有效期。这一步，卡的信息都收集全了&lt;/li&gt;
&lt;li&gt;5 调用银行绑卡验证接口进行绑卡。这里有一个四要素验证的概念。由于国内要求实名制，所有银行卡都是实名办理的，所以银行可以验证姓名、身份证号、银行卡号和手机号是不是一致的，如果没问题，则会发短信到手机上&lt;/li&gt;
&lt;li&gt;6 用户输入短信验证码并确认绑卡，服务器端将用户实名信息以及短信验证码组合形成报文，发送给银行执行签约操作。银行侧签约成功后，返回签约号给商户&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-4-卡-bin&#34;&gt;4.4 卡 bin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;根据卡号判断发卡行需要卡 bin

&lt;ul&gt;
&lt;li&gt;BIN 号即银行标识代码的英文缩写&lt;/li&gt;
&lt;li&gt;BIN 由 6 位数字表示，出现在卡号的前 6 位，由国际标准化组织(ISO)分配给各从事跨行转接交换的银行卡组织&lt;/li&gt;
&lt;li&gt;银行卡的卡号是标识发卡机构和持卡人信息的号码，由以下三部分组成：发卡行标识代码(BIN号)、发卡行自定义位、校验码&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;目前，国内的银行卡按照数字打头的不同分别归属于不同的银行卡组织

&lt;ul&gt;
&lt;li&gt;以 4 字打头的银行卡属于 VISA 卡组织&lt;/li&gt;
&lt;li&gt;以 5 字打头的属于 MASTER CARD 卡组织&lt;/li&gt;
&lt;li&gt;以 9/62/60 打头的属于中国银联，而 &lt;sup&gt;62&lt;/sup&gt;&amp;frasl;&lt;sub&gt;60&lt;/sub&gt; 打头的银联卡是符合国际标准的银联标准卡，可在国外使用，这也是中国银联近几年来主要发行的银行卡片&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大部分银行卡号前 6 位即可确定发卡行和卡类型，但也有非标卡需要 6-10 位才可判断出来&lt;/li&gt;
&lt;li&gt;需要维护一个卡 bin 库&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-5-短信和身份验证&#34;&gt;4.5 短信和身份验证&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一般绑卡操作第 5 步需要银行下发短信验证码。短信验证的接口，不同银行不一样。有些银行是短信和身份验证一起做了；有些银行是可以配置身份验证是否同时发短信&lt;/li&gt;
&lt;li&gt;此类接口一般包含如下内容：

&lt;ul&gt;
&lt;li&gt;版本号：当前接口的版本号&lt;/li&gt;
&lt;li&gt;编码方式：默认都是 UTF-8，指传输的内容的编码方式&lt;/li&gt;
&lt;li&gt;签名和签名方法：生成报文的签名。不是所有的字段都需要放到签名中，文档中会说明哪些字段需要签名&lt;/li&gt;
&lt;li&gt;签名算法：生成签名的算法，RSA、RSA128、MD5 等&lt;/li&gt;
&lt;li&gt;商户代码：在渠道侧注册的商户号&lt;/li&gt;
&lt;li&gt;商户订单号：即发送给渠道的订单号&lt;/li&gt;
&lt;li&gt;发送时间：该请求送出的时间&lt;/li&gt;
&lt;li&gt;账号和账号类型：银行卡、存折、IC 卡等支持的账号类型以及对应的账号&lt;/li&gt;
&lt;li&gt;卡的加密信息：如信用卡的 CVN2、有效期等&lt;/li&gt;
&lt;li&gt;开户行信息：开户行所在地以及名称。大部分不需要&lt;/li&gt;
&lt;li&gt;身份证件类型和身份证号：可用于实名验证的证件，指身份证、军官证、护照、回乡证、台胞证、警官证、士兵证等。不同银行可以支持的证件类型不一样，这也不是问题。大部分是身份证&lt;/li&gt;
&lt;li&gt;姓名：真实姓名，必须和身份证一致&lt;/li&gt;
&lt;li&gt;手机号：在所在银行注册的手机号&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;系统会返回上述数据的验证结果。如果验证通过，则会发短信。但这不是所有的渠道都是这样。哪些字段会参与验证、需不需要发短信，需要注意看接口文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-6-绑卡接口&#34;&gt;4.6 绑卡接口&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;绑卡接口和发短信接口类似，还需要将用户的卡号、身份证等信息传递过去&lt;/li&gt;
&lt;li&gt;绑卡成功后，会返回一个签约号。这个签约号是后续调用支付、解约等接口所必须的&lt;/li&gt;
&lt;li&gt;银行都不支持重复绑卡：大部分银行(如农业、浦发、建行)对绑卡签约接口调用，会首先验证身份信息，如果验证不通过，则不执行后续操作。验证通过后，再检查这个卡在该商户下是否已经绑过了，如果没有绑过，则执行绑卡，否则会提示卡已经绑定过了，不能重复签约。但工行首先验证这个卡是不是已经绑过了，如果已经绑卡，则不继续验证身份信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-7-银联绑卡&#34;&gt;4.7 银联绑卡&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;银联直联绑卡：和银行绑卡类似，但是得注意验证接口，仅验证卡号和姓名，不验证身份证号和手机号。这导致第 5 步无法正常进行。银联只有到第 6 步执行绑卡时才做身份验证。所以在处理上，还需要做一些调整，来确保和银行的流程的一致

&lt;ul&gt;
&lt;li&gt;一种处理方法是，对银联在第 5 步就开始调用银联接口执行绑卡操作，但在本地标记为预绑卡状态；商户侧发送短信验证码，验证通过后，才将状态设置为绑卡成功&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;银联网银绑卡：用户在电商页面上输入卡号，然后被导航到银联页面上去完成绑卡操作，成功后，银联返回一个 token 作为签约号，用于支持后续操作。问题在于用户可以在银联页面上绑定一个别人的卡，而电商侧是无法知道这个卡的情况的。所以尽量不要用这种方式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-8-实名认证&#34;&gt;4.8 实名认证&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;绑卡操作有个不错的副产品，就是实名认证。常说的二要素，三要素，四要素认证，可以通过这个操作完成

&lt;ul&gt;
&lt;li&gt;二要素：指姓名和身份证号&lt;/li&gt;
&lt;li&gt;三要素：加上银行卡号&lt;/li&gt;
&lt;li&gt;四要素：加上手机号&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;看起来，似乎银行都应该支持四要素验证，但大部分银行接口仅支持三要素，毕竟手机号还是非常容易变&lt;/li&gt;
&lt;li&gt;实名认证，也就是二要素认证，是应用最多的认证&lt;/li&gt;
&lt;li&gt;国内唯一的库是在公安部，由 NCIIC 负责对外提供接口。可以提供如下功能：

&lt;ul&gt;
&lt;li&gt;简项核查：返回“一致”“不一致”“库中无此号”&lt;/li&gt;
&lt;li&gt;返照核查：返回“一致+网纹照片”“不一致”“库中无此号”&lt;/li&gt;
&lt;li&gt;人像核查：返回“同一人”“不同人”“库中无此号”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;官方接口收费是 5 元/条。市面上主要的第三方服务提供商有国政通(简项、返照)、诺证通(简项)、IDface(三接口)等。收费一般和访问量有关，量大从优

&lt;ul&gt;
&lt;li&gt;简项核查：0.5~2.0 元&lt;/li&gt;
&lt;li&gt;返照核查：0.8~2.1 元&lt;/li&gt;
&lt;li&gt;人像核查：2.0~8.0 元不等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;注意：涉密人员是没法查到相关信息的&lt;/li&gt;
&lt;li&gt;性能上，XX 通一般在 200ms 内即可返回结果，普通商用没问题。有些公司还会额外提供四要素接口，以 XX 通为例，它号称支持大部分银行卡的四要素认证。但是实现上是实时请求银行的接口，这就导致接口延迟非常高，1 秒以上的占大部分，甚至 10 秒以上的都不少见，基本无法商用。这种情况下，还不如直接上银联&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>5 应用内支付</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/5_%E5%BA%94%E7%94%A8%E5%86%85%E6%94%AF%E4%BB%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/5_%E5%BA%94%E7%94%A8%E5%86%85%E6%94%AF%E4%BB%98/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#51-%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8-iap&#34;&gt;5.1 为什么使用 IAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#52-iap-%e6%94%af%e4%bb%98%e6%b5%81%e7%a8%8b&#34;&gt;5.2 IAP 支付流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#53-iap-%e8%ae%a2%e9%98%85&#34;&gt;5.3 IAP 订阅&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#531-%e7%bb%ad%e8%b4%b9%e5%91%a8%e6%9c%9f%e7%9a%84%e8%ae%a1%e7%ae%97&#34;&gt;5.3.1 续费周期的计算&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#532-%e8%87%aa%e5%8a%a8%e7%bb%ad%e8%b4%b9&#34;&gt;5.3.2 自动续费&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#533-%e5%85%8d%e8%b4%b9%e8%af%95%e7%94%a8&#34;&gt;5.3.3 免费试用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#534-receipt-%e9%aa%8c%e8%af%81&#34;&gt;5.3.4 Receipt 验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#54-iap-%e7%a0%b4%e8%a7%a3%e5%92%8c%e9%98%b2%e5%be%a1&#34;&gt;5.4 IAP 破解和防御&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#55-%e4%b8%a4%e5%a5%97%e8%b4%a6%e6%88%b7%e4%bd%93%e7%b3%bb&#34;&gt;5.5 两套账户体系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#56-%e5%88%86%e6%88%90%e5%ae%9a%e4%bb%b7%e5%92%8c%e5%9b%bd%e9%99%85%e5%8c%96&#34;&gt;5.6 分成，定价和国际化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#57-%e6%9b%b4%e5%a4%9a%e7%9a%84%e5%9d%91&#34;&gt;5.7 更多的坑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#58-android-iap&#34;&gt;5.8 Android IAP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-1-为什么使用-iap&#34;&gt;5.1 为什么使用 IAP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;应用内支付(In-App Purchase, IAP)：指使用手机操作系统自带的支付功能支持支付。目前国内主要的应用内支付有 Google Pay、Apple Pay、小米支付、华为支付等。其中 Apple Pay 是典型的一个应用内支付，Android平台的各种支付也一般是沿用 Apple Pay 的设计&lt;/li&gt;
&lt;li&gt;相对来说，应用内支付的用户体验，和微信支付、支付宝相比，还是有一定差距的.但是为什么要开发应用内支付呢？这个和苹果的 AppStore 的审核政策有关。在官方的 App Store Review Guidelines 中，有如下几条意见：

&lt;ul&gt;
&lt;li&gt;在 App 内使用非 IAP 的系统来购买内容、功能或服务将被拒绝&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;1.2 Apps utilizing a system other than the In-App Purchase API (IAP) to purchase content, functionality, or services in an App will be rejected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;IAP 购买实物或者应用外的商品或服务将会被拒绝
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;11.3 Apps using IAP to purchase physical goods or goods and services used outside of the App will be rejected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;通过 IAP 购买的积分或者其他货币必须只在 App 内使用
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;11.4 Apps that use IAP to purchase credits or other currencies must consume those credits within the App&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;问题：如果要购买的服务，既在 IOS 内使用，也在 Android 等 IOS 系统外使用，那应该是使用规则 11.2 还是规则 11.3 来执行？比如说视频网站，视频既可以在 IOS 上看，也可以在 Android 上看，那是否是需要通过 IAP 来购买？苹果公司在这一点上采取模糊的策略。爱奇艺、腾讯视频，在 IOS 上购买会员，只能用 IAP 支付。这就和苹果公司的审核有关&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-2-iap-支付流程&#34;&gt;5.2 IAP 支付流程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一般 IAP 支付的开发流程，首先需要一些准备工作，包括

&lt;ul&gt;
&lt;li&gt;1 在 developer.apple.com 上配置一个 App ID，使用该 ID 生成和安装相应的 Provisioning Profile 文件&lt;/li&gt;
&lt;li&gt;2 登录到 iTunes Connect，使用 App ID 创建一个新的应用，在该应用中，创建应用内付费项目，设置好价格和 Product ID 以及购买介绍和截图&lt;/li&gt;
&lt;li&gt;3 添加一个用于在 sandbox 付费的测试用户，填写相关的税务、银行、联系人信息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;完成这些准备工作后，既可以进入正式的开发，开发流程如下

&lt;ul&gt;
&lt;li&gt;1 用户选择要购买的内容并点击购买按钮&lt;/li&gt;
&lt;li&gt;2 用户通过 AppStore 账户验证&lt;/li&gt;
&lt;li&gt;3 苹果服务器验证用户请求&lt;/li&gt;
&lt;li&gt;4 苹果服务器从用户帐号扣款&lt;/li&gt;
&lt;li&gt;5 苹果向用户返回购买成功信息&lt;/li&gt;
&lt;li&gt;6 软件接收并显示用户购买信息&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;上述流程的坑

&lt;ul&gt;
&lt;li&gt;账号坑：用户访问 AppStore 时使用的是 Apple 的账号，不是应用系统的账号。也就是说，我们并不知道到底是谁在购买这个内容。比如在应用中有两个账号 A 和 B，用 A 账号登录后，上 IAP 买了东西，然后用 B 账号来登录，也上 IAP 买东西，这两次购买用的是同一个 Apple 账号。苹果也不会告诉你，到底是哪个账号付了钱。账号坑在单次购买中还没什么问题，但碰到订阅的情况，得好好处理下&lt;/li&gt;
&lt;li&gt;从上述流程可以看出，苹果服务器都是和客户端打交道的，这里面似乎没有应用服务器什么事情。只有在客户端接收到苹果返回信息后，才可以把这个信息转发给应用服务器。如果用户一直不打开手机上的应用，那应用服务器就一直收不到通知了。好在后来苹果提供了一个验证功能，应用服务器可以把接收到的返回信息(加密后的字符串)发送给苹果服务器来验证和解密&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-3-iap-订阅&#34;&gt;5.3 IAP 订阅&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IAP Subscription 又是一个大坑，参考&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Chapters/Subscriptions.html&#34; target=&#34;_blank&#34;&gt;官方的文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-3-1-续费周期的计算&#34;&gt;5.3.1 续费周期的计算&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IAP 主要提供给周期性订阅的音乐、电子书等内容使用&lt;/li&gt;
&lt;li&gt;一般就按月来计算周期。苹果是以自然月来算权益周期。比如在 1 月 3 号买了权益，到 2 月 3 号，这个权益就过期啦，需要在此之前完成续费。1 月 31 号买的权益，以自然月算，会在 3 月 1 日前到期，如果 2、3 月份都续费了，到 4 月份，也是享受到 4 月 30 日&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-3-2-自动续费&#34;&gt;5.3.2 自动续费&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;应用开发应该不需要关心续费的细节。苹果会做自动处理。在权益到期前 10 天，苹果检查用户账户是否可以扣款，商品价格是否有变动。在权益到期前 24 小时，苹果开始扣款，如果失败，会多次重试，直到成功&lt;/li&gt;
&lt;li&gt;这个重试会延续到用户权益过期后一小段时间，苹果没有说这段时间该算是有权益还是没有，但开发人员需要注意应该如何处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-3-3-免费试用&#34;&gt;5.3.3 免费试用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;免费试用不是强制需求，但这有利于用户判断是否值得购买这个物品&lt;/li&gt;
&lt;li&gt;免费试用期是在 iTunes connect 中设置。当用户第一次购买这个东西的时候，客户端接收到的 Receipt 中包含免费试用信息。在免费期快到的时候，苹果发起第一次扣款。整个过程和自动续费类似，唯一区别是第一个月是免费的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-3-4-receipt-验证&#34;&gt;5.3.4 Receipt 验证&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;客户端接收到 Receipt 之后，需要提交到服务器端进行处理，开通权益&lt;/li&gt;
&lt;li&gt;Receipt 应该在服务器端处理，这样可以防止越狱后的一些插件，如 IAP Cracker、IAP Free 等伪造交易凭证，欺骗苹果服务器，开通权益&lt;/li&gt;
&lt;li&gt;还需注意，客户端和服务器端之间需通过 HTTPS 以及参数签名等方式来确保通讯安全。服务器端接收到 Receipt 之后，首先验证请求的有效性，然后将 Receipt 发送到苹果服务器上进行验证和解析。接收到苹果处理结果后，将 Receipt 中的 user_id、product_id、purchase_date、transaction_id 等做验证和处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-4-iap-破解和防御&#34;&gt;5.4 IAP 破解和防御&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;既然 IAP 的验证主要是在苹果服务器端和手机客户端进行，并且是使用域名。这简直是为攻击打开了一扇大门，而不仅仅是漏洞。早期的 IAP 内购解锁工具 IAP cracker 对 IAP 的破解比较简单粗暴。程序中基本都是用 transactionState 判断交易是否成功。&lt;/li&gt;
&lt;li&gt;transactionState 有四个状态

&lt;ul&gt;
&lt;li&gt;SKPaymentTransactionStatePurchasing&lt;/li&gt;
&lt;li&gt;SKPaymentTransactionStatePurchased：表示购买成功&lt;/li&gt;
&lt;li&gt;SKPaymentTransactionStateFailed&lt;/li&gt;
&lt;li&gt;SKPaymentTransactionStateRestored&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;只要修改 SKPaymentTransactionStatePurchased 值，如果客户端应用直接根据交易状态来处理业务流程，那就会收到这个假的交易成功信息，接下来用户就能不花钱得到所买的物品。这个过程甚至都不需要接入网络&lt;/li&gt;
&lt;li&gt;另一个工具 IAP Free 功能更强大，安装使用也复杂很多。它是通过修改 DNS，让客户端访问黑客提供的服务器来取代访问苹果服务器，实现所谓的 MITM 中间人攻击

&lt;ul&gt;
&lt;li&gt;当用户在客户端触发购买流程时，会被引导到伪装的苹果服务器上，不扣款而直接返回扣款成功收据。用户不需要支付任何资金，客户端能够拿到完整的收据&lt;/li&gt;
&lt;li&gt;如果是在客户端处理收据验证也没有任何问题。为了避免用户所使用的设备被封，这些软件甚至可以提供伪造 UDID 的功能&lt;/li&gt;
&lt;li&gt;为此，苹果特别说明，一定要在服务器端验证用户购买信息，验证内容包括收据签名、证书、产家信息等，确保收据无误后，才能授予权益。如果发现有诈，则将用户拉黑&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-5-两套账户体系&#34;&gt;5.5 两套账户体系&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;苹果支付的账户体系是以 Apple id 为基础，它允许用户在多台设备上共用一个账户

&lt;ul&gt;
&lt;li&gt;一台设备上，一般只有一个激活账户。但对应用系统来说，大部分是允许多个账号登陆的&lt;/li&gt;
&lt;li&gt;这对续费来说是个问题。用户以账户 A 登录后，发起续费，获得权益。然后以账号 B 登录了，显然，A 的权益不会衍生给 B。过几天 A 开始续费了，续费之后，切换到 B 账号登录，客户端在 B 账号登录时得到续费的收据并发送给应用服务器。这算是 A 的续费请求。在这个 Apple id 发起的续费请求，所有的收据都会有一个相同的原始交易号 original transaction Id。在用户发起订阅时，需要记录这个 id 和账号的关系，每次续费，需要在解析收据后，根据原始交易号从这里获取真正的充值账户，不能从客户端提交的用户 id 作为凭据&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果在账户 B 登录后也发起订阅请求，这个调用将会失败，所以需要阻止用户发起这样的请求。或者设置多个产品副本来让用户购买&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-6-分成-定价和国际化&#34;&gt;5.6 分成，定价和国际化&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在 iTunes 中的给的产品定价必须是税前的，苹果和商家的分成也是按税前算&lt;/li&gt;
&lt;li&gt;商家给出在一个主要销售国家和地区(比如国内的基本就是中国)的价格，即基准价格。在其他地区的销售价格，苹果会自动根据当前的汇率来换算成当地的货币。当然，也可以自己修改设定在这些国家或者地区的当地价格。目前是支持到 155 个国家。还要特别注意版权问题&lt;/li&gt;
&lt;li&gt;基准价格调整，如果是往高了调整，则在用户下一次续费时，需要用户确认。如果往低了调，那就不需要用户确认，直接扣款了&lt;/li&gt;
&lt;li&gt;苹果对商家的产品价格体系有分组(Group)的概念，同国内说的价格体系，比如白金会员、黄金会员、贵宾等，在同一个 Group 里面，用户只能选择一个档，比如用户要么是白金要么是黄金会员，不会同时是&lt;/li&gt;
&lt;li&gt;在同一个 Group 中，如果用户订阅时间超过一年(365 天)，则商家可以得到来自这个用户收益的更多的分成，目前是 85%。这个订阅时间不包括免费试用期。同时可以有 60 天的宽限。也就是说，这一年中，如果用户曾经停止续费，然后又开始继续续费，只要中间不续费的时间不超过 60 天就行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-7-更多的坑&#34;&gt;5.7 更多的坑&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;目前用的是 IOS 10.0 版本，这个版本和 IAP 有关的坑

&lt;ul&gt;
&lt;li&gt;沙盒环境，没法做取消订阅操作。只能在线上模拟。所以产品设计和开发时，尽量不要依赖取消订阅操作，也应该不依赖于这个操作&lt;/li&gt;
&lt;li&gt;沙盒环境下，有些 receipt 可能会收不到 transaction id，线上的暂未发现这个问题&lt;/li&gt;
&lt;li&gt;苹果提供单个收据和列表收据两种格式。推荐使用列表数据，但问题是这个列表收据的长度，苹果也不知道最多会有多少&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-8-android-iap&#34;&gt;5.8 Android IAP&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IOS 上用苹果支付是被逼的&lt;/li&gt;
&lt;li&gt;Android 上用支付宝和微信支付：后者有大量用户基数，接入也很方便，费用比 IAP 便宜&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>6 支付产品服务设计</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/6_%E6%94%AF%E4%BB%98%E4%BA%A7%E5%93%81%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/6_%E6%94%AF%E4%BB%98%E4%BA%A7%E5%93%81%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#61-%e5%89%8d%e8%a8%80&#34;&gt;6.1 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#62-%e4%ba%a7%e5%93%81%e5%88%86%e7%b1%bb&#34;&gt;6.2 产品分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#63-%e6%a8%a1%e5%9d%97%e5%8a%9f%e8%83%bd&#34;&gt;6.3 模块功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#64-%e4%b8%9a%e5%8a%a1%e6%b5%81%e7%a8%8b&#34;&gt;6.4 业务流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-1-前言&#34;&gt;6.1 前言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支付产品模块是按照支付场景来为业务方提供支付服务&lt;/li&gt;
&lt;li&gt;支付产品模块一般位于支付网关之后，支付渠道之前。根据支付能力将不同的支付渠道封装成统一的接口，通过支付网关来对外提供服务。&lt;/li&gt;
&lt;li&gt;从微服务的角度，支付产品本身也是一个代理模式的微服务，它通过支付网关响应业务方请求，进行一些统一处理后，分发到不同的支付渠道去执行，最后将执行结果做处理后，通过支付网关再回传给业务方&lt;/li&gt;
&lt;li&gt;支付产品在支付系统参考下图架构图中的位置
&lt;img src=&#34;ref/pay_system_arch.jpg&#34; alt=&#34;支付系统架构图&#34; /&gt;&lt;/li&gt;
&lt;li&gt;也有设计是将支付产品模块与支付网关合并到一起的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-产品分类&#34;&gt;6.2 产品分类&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支付产品：由支付系统对支付渠道进行封装而对业务方提供的支付能力&lt;/li&gt;
&lt;li&gt;在不同的公司，由于接入渠道和应用的差异，支付产品分类略有不同&lt;/li&gt;
&lt;li&gt;综合支付场景和流程，支付产品可以分为如下几类
&lt;img src=&#34;ref/pay_product.jpg&#34; alt=&#34;支付产品分类&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| 支付产品 | 操作 | 优点 | 不足 | 实现方式 |
  | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; | &amp;mdash; |
  | 快捷支付 | 用户在完成绑卡之后，在支付的时候，不需要再输入卡或者身份信息，仅需要输入支付密码就可以完成支付。对于小额度的支付，甚至可以开通小额免密，直接完成支付 | 不会打断用户的体验，是目前主要的在线支付方式 | -  | 一般是封装银行或者第三方支付平台提供的快捷支付接口或者代付接口 |
  | 网银支付 | 用户在支付的时候，需要跳转到银行网银页面来完成支付。在网银页面，需要输入用户的卡号和身份信息 | - | 会中断用户当前的体验，一般仅用于 PC Web 上的支付 | 封装银行提供的网银支付 |
  | 协议支付 | 也称代收或者代扣，代收指渠道授权商户可以从用户的银行账户中扣款 | 一般用于定期扣款 |  不用于日常消费(如水电煤气、有线电视费) | 封装银行、第三方支付提供的代扣或者快捷接口 |
  | 平台支付 | 使用微信、支付宝等第三方支付平台来完成支付 | 由于微信、支付宝已经被大量使用，用户也产生对这些平台的信任，平台支付往往是电商公司的主要支付方式 | 使用时，一般需要用户预先安装支付平台系统(手机)，注册并登录到第三方支付平台，并且已经在该平台上完成绑卡等操作 | - |
  | 外卡支付 | 国内不少支付渠道都能支持外卡支付(如支付宝全球购) | 支持海外支付 | - | 直接对接 Paypal，也是目前用的最多的外卡支付渠道 |
  | 话费支付 | - | 对于有包月小额类型的支付，可使用手机话费支付 | - | 目前有一些平台可以支持话费支付(如虹软、联动优势) |
  | 虚币支付 | 不少公司会有自己的虚拟币(如京豆、Q 币)。这些虚币也可以作为一种支付方式 | - | - | - |
  | 账户支付 | 也称为余额支付、零钱支付等。指为用户建立本地账户，之后可以使用这个账户来完成支付 | 支持充值 | - | - |
  | 信用支付 | (如京东白条，蚂蚁花呗)指使用信用账户进行透支，类似信用卡支付 | - | - | - |
  | 代付 | 和代扣相反，代付是平台将钱打给用户 | - | - | - |&lt;/p&gt;

&lt;h2 id=&#34;6-3-模块功能&#34;&gt;6.3 模块功能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支付产品根据其支付能力，对外提供不同的功能。整体上来说，一般支付产品需要提供如下接口
&lt;img src=&#34;ref/pay_product_func.jpg&#34; alt=&#34;支付产品功能&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| 接口 | 功能描述 | 备注 |
  | &amp;mdash; | &amp;mdash; | &amp;mdash; |
  | 签约 | 在快捷支付、代扣等产品中，用户在使用前，需要先完成签约 | 签约可在渠道侧进行，一般第三方支付采用这种方式，当电商需要接入时，让第三方给授权。银行和银联的签约一般在电商侧进行，电商侧负责收集用户的信息，调用银行和银联的接口进行签约。签约后，后续的支付行为使用签约号进行，无需再输入个人信息 |
  | 解约 | 取消签约关系 | 和签约对应 |
  | 支付 | 不同产品中支付行为不一样 | 快捷支付在电商服务器上发起，请求渠道进行支付；网银支付是跳转到银行支付网关进行; 账户支付、虚币支付，是在本地进行 |
  | 撤销 | 取消当天在渠道侧未结算的交易 | 有些渠道区分撤销和退款(如银联、农行)，有些渠道则不作区分 |
  | 退款 | 仅针对已经结算的交易 | 有些渠道区分撤销和退款(如银联、农行)，有些渠道则不作区分 |
  | 查询签约状态 | 对于需要签约的交易，可以通过此接口查询签约状态 | - |
  | 查询订单状态 | 通过此接口查询支付清单状态以及退款的订单状态 | - |
  | 预授权 | 预授权交易用于受理方向持卡人的发卡方确认交易许可 | 受理方将预估的消费金额作为预授权金额，发送给持卡人的发卡方 |
  | 预授权撤销 | 对已成功的预授权交易，在结算前使用预授权撤销交易，通知发卡方取消付款承诺 | 预授权撤销交易必须是对原始预授权交易或追加预授权交易最终承兑金额的全额撤销 |
  | 预授权完成交易 | 对已批准的预授权交易，用预授权完成做支付结算 | - |
  | 预授权完成撤销 | 预授权完成撤销交易必须是对原始预授权完成交易的全额撤销 | 预授权完成撤销后的预授权仍然有效 |
  | 对账 | 通过 FTP 或 HTTP 方式提供对账文件供商户侧对账 | - |
  | 余额查询 | 查询商户的交易账户余额，避免由于余额不足导致交易失败 | 注意不是客户的余额。不是所有的银行或者第三方支付都提供这个接口 |&lt;/p&gt;

&lt;h2 id=&#34;6-4-业务流程&#34;&gt;6.4 业务流程&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;上述操作，除对账、查单外，每个操作实现的主流程，一般会包括参数校验、支付路由、生成订单、风险评估、调用渠道服务、更新订单和发送消息这 7 步&lt;/li&gt;
&lt;li&gt;对于一些比较复杂的服务，还会涉及到异步同通知处理的步骤
&lt;img src=&#34;ref/business_process.jpg&#34; alt=&#34;业务流程&#34; /&gt;&lt;/li&gt;
&lt;li&gt;1 执行参数校验：所有的支付操作，都需要对输入执行参数校验，避免接口受到攻击

&lt;ul&gt;
&lt;li&gt;验证输入参数中各字段的有效性验证：如用户 ID、商户 ID、价格、返回地址等&lt;/li&gt;
&lt;li&gt;验证账户状态：交易主体、交易对手等账户的状态是处于可交易的状态&lt;/li&gt;
&lt;li&gt;验证订单：如果涉及到预单，还需要验证订单号的有效性，订单状态是未支付。为了避免用户缓存某个 URL 地址，还需要校验下单时间和支付时间是否超过预定的间隔&lt;/li&gt;
&lt;li&gt;验证签名：签名也是为了防止支付接口被伪造。一般签名是使用分发给商户的 key 来对输入参数拼接成的字符串做 MD5 Hash 或 RSA 加密，然后作为一个参数随其他参数一起提交到服务器端。如支付网关设计所介绍，签名验证也可以在网关中统一完成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2 根据支付路由寻找合适的支付服务：根据用户选择的支付方式确定用来完成该操作的合适的支付渠道

&lt;ul&gt;
&lt;li&gt;用户指定的支付方式不一定是最终的执行支付的渠道。比如用户选择通过工行信用卡来执行支付，但是我们没有实现和工行的对接，而是可以通过第三方支付，比如支付宝、微信支付、易宝支付，或银联完成&lt;/li&gt;
&lt;li&gt;选择合适的支付渠道，通过支付路由实现。支付路由会综合考虑收费、渠道的可用性等因素来选择最优方案&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3 评估交易风险：检查本次交易是否有风险。风控接口返回三种结果：阻断交易、增强验证和放行交易

&lt;ul&gt;
&lt;li&gt;阻断交易：说明该交易是高风险的，需要终止，不执行第 5 个步骤&lt;/li&gt;
&lt;li&gt;增强验证：说明该交易有一定的风险，需要确认下是不是用户本人在操作。这可以通过发送短信验证码或者其他可以验证用户身份的方式来做校验，验证通过后，可以继续执行该交易&lt;/li&gt;
&lt;li&gt;放行交易，即本次交易是安全的，可以继续往下走&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4 生成交易订单：将订单信息持久化到数据库中

&lt;ul&gt;
&lt;li&gt;当访问压力大的时候，数据库写入会成为一个瓶颈&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;5 调用支付渠道提供的服务：所有的支付服务都需要第三方通道来完成执行

&lt;ul&gt;
&lt;li&gt;一般银行渠道的调用比较简单，可以直接返回结果&lt;/li&gt;
&lt;li&gt;一些第三方支付，如支付宝，微信支付等，会通过异步接口来告知支付结果&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;6 更新订单：对于同步返回的结果，需要在主线程中更新订单的状态，标记是支付成功还是失败。对于异步返回的渠道，需要在异步程序中处理&lt;/li&gt;
&lt;li&gt;7 发送消息：通过消息来通知相关系统关于订单的变更

&lt;ul&gt;
&lt;li&gt;风控、信用 BI 等，都需要依赖这数据做准实时计算&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8 异步通知

&lt;ul&gt;
&lt;li&gt;上述流程，其中涉及到调用远程接口，其延迟不可控。如果调用方一直阻塞等待，很容易超时&lt;/li&gt;
&lt;li&gt;引入异步通知机制，可以让调用方在主线程中尽快返回，通过异步线程来得到支付结果&lt;/li&gt;
&lt;li&gt;对于通过异步来获取支付结果的渠道接口，也需要对应的在异步通知中将结果返回给调用方&lt;/li&gt;
&lt;li&gt;异步通知需要调用方提供一个回调地址，一般以 HTTP 或 HTTPS 的方式。这就有技术风险，如果调用失败，还需要重试。而重试不能过于频繁，需要逐步拉大每一次重试的时间间隔&lt;/li&gt;
&lt;li&gt;在异步处理程序中，订单根据处理结果变更状态后，也要发消息通知相关系统&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>7 支付系统的整体架构</title>
      <link>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/7_%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/o2o/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/7_%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#71-%e6%94%af%e4%bb%98%e7%9a%84%e5%85%b8%e5%9e%8b%e6%9e%b6%e6%9e%84&#34;&gt;7.1 支付的典型架构&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#711-%e6%94%af%e4%bb%98%e5%ae%9d&#34;&gt;7.1.1 支付宝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#712-%e4%ba%ac%e4%b8%9c%e9%87%91%e8%9e%8d&#34;&gt;7.1.2 京东金融&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#713-%e5%8e%bb%e5%93%aa%e5%84%bf&#34;&gt;7.1.3 去哪儿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#714-%e7%be%8e%e5%9b%a2&#34;&gt;7.1.4 美团&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#72-%e5%8f%82%e8%80%83%e6%9e%b6%e6%9e%84&#34;&gt;7.2 参考架构&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#721-%e6%94%af%e6%92%91%e7%b3%bb%e7%bb%9f&#34;&gt;7.2.1 支撑系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#722-%e6%94%af%e4%bb%98%e6%a0%b8%e5%bf%83%e7%b3%bb%e7%bb%9f&#34;&gt;7.2.2 支付核心系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#723-%e6%94%af%e4%bb%98%e6%9c%8d%e5%8a%a1%e7%b3%bb%e7%bb%9f&#34;&gt;7.2.3 支付服务系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#73-%e6%94%af%e4%bb%98%e5%ba%94%e7%94%a8&#34;&gt;7.3 支付应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#74-%e5%8f%82%e8%80%83%e9%93%be%e6%8e%a5&#34;&gt;7.4 参考链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-1-支付的典型架构&#34;&gt;7.1 支付的典型架构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;每个公司根据其业务和公司发展的不同阶段，所设计的支付系统也不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-1-1-支付宝&#34;&gt;7.1.1 支付宝&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支付宝的支付系统整体架构设计如下
&lt;img src=&#34;ref/alipay_arch.jpg&#34; alt=&#34;支付宝的支付系统整体架构设计&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这个整体架构上并没有与众不同之处。在模块划分上，这个图显示的是最顶层的划分，也无法告知更多细节&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;但支付宝架构强点在两个方面&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;账务处理：分为内外两个子系统，外部子系统是单边账，内部子系统走复式记账。不少支付平台是从这里得到启发来搞定的对账系统&lt;/li&gt;
&lt;li&gt;柔性事务处理：利用消息机制来实现跨系统的事务处理，避免数据库锁导致的性能问题&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-1-2-京东金融&#34;&gt;7.1.2 京东金融&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;京东金融是在网银在线的基础上发展起来的。网银在线的原班技术人员有不少来自易宝公司，在京东收购之后，又引入了支付宝的人才。因而从架构上受这两个公司的影响很大&lt;/li&gt;
&lt;li&gt;京东支付平台总体架构设计如下
&lt;img src=&#34;ref/jdpay_arch.jpg&#34; alt=&#34;京东支付平台总体架构设计&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-1-3-去哪儿&#34;&gt;7.1.3 去哪儿&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;去哪儿公司的支付产品架构如下
&lt;img src=&#34;ref/qunapay_arch.jpg&#34; alt=&#34;去哪儿公司的支付产品架构&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-1-4-美团&#34;&gt;7.1.4 美团&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;美团的支付平台规划架构如下：这是2015年的文档。2016年美团才拿到支付牌照
&lt;img src=&#34;ref/meituanpay_arch.jpg&#34; alt=&#34;美团的支付平台规划架构&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-2-参考架构&#34;&gt;7.2 参考架构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;一般来说，支付系统典型架构会包含如下模块
&lt;img src=&#34;ref/pay_system_typical_arch.jpg&#34; alt=&#34;支付系统典型架构&#34; /&gt;&lt;/li&gt;
&lt;li&gt;支付系统从架构上来说，分为三层：

&lt;ul&gt;
&lt;li&gt;支撑层: 用来支持核心系统的基础软件包和基础设施，包括运维监控系统、日志分析系统等&lt;/li&gt;
&lt;li&gt;核心层：支付系统的核心模块，内部又分为支付核心模块以及支付服务模块&lt;/li&gt;
&lt;li&gt;产品层：通过核心层提供的服务组合起来，最终对用户、商户、运营管理人员提供的系统&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-2-1-支撑系统&#34;&gt;7.2.1 支撑系统&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;支撑系统是一个公司提供给支付系统运行的基础设施。主要包括如下子系统

&lt;ul&gt;
&lt;li&gt;运维监控：支付系统在运行过程中不可避免的会受到各种内部和外部的干扰，光纤被挖断、黑客攻击、数据库被误删、上线系统中有 bug 等。运维人员必须在第一时间内对这些意外事件作出响应，又不能够一天 24 小时盯着。这就需要一个运维监控系统来协助完成&lt;/li&gt;
&lt;li&gt;日志分析：日志是支付系统统计分析、运维监控的重要依据。公司需要提供基础设施来支持日志统一收集和分析&lt;/li&gt;
&lt;li&gt;短信平台：短信在支付系统中有重要作用，包括身份验证、安全登录、找回密码，及报警监控&lt;/li&gt;
&lt;li&gt;安全机制：安全是支付的生命线。SSL、证书系统、防刷接口等，都是支付的必要设施&lt;/li&gt;
&lt;li&gt;统计报表：支付数据的可视化展示，是公司进行决策的基础&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;远程连接管理、分布式计算、消息机制、全文检索、文件传输、数据存储、机器学习等，都是构建大型系统所必须的基础软件，这里不再一一详细介绍&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-2-2-支付核心系统&#34;&gt;7.2.2 支付核心系统&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;支付核心系统指用户执行支付的核心流程，包括

&lt;ul&gt;
&lt;li&gt;1 用户从支付应用启动支付流程&lt;/li&gt;
&lt;li&gt;2 支付应用根据应用和用户选择的支付工具调用对应的支付产品执行支付&lt;/li&gt;
&lt;li&gt;3 支付路由根据支付工具、渠道费率、接口稳定性等因素选择合适的支付渠道来落地支付&lt;/li&gt;
&lt;li&gt;4 支付渠道调用银行、第三方支付等渠道提供的接口来执行支付操作，最终落地资金转移&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-2-3-支付服务系统&#34;&gt;7.2.3 支付服务系统&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;支持支付核心系统所提供的功能。服务系统又分为基础服务系统、资金系统、风控和信用系统

&lt;ul&gt;
&lt;li&gt;基础服务系统：提供支撑线上支付系统运行的基础业务功能&lt;/li&gt;
&lt;li&gt;客户信息管理：对用户、商户的实名身份、基本信息、协议的管理&lt;/li&gt;
&lt;li&gt;卡券管理：对优惠券、代金券、折扣券的制作、发放、使用流程的管理&lt;/li&gt;
&lt;li&gt;支付通道管理: 通道接口、配置参数、费用、限额以及 QOS 的管理&lt;/li&gt;
&lt;li&gt;账户和账务系统：管理账户信息以及交易流水、记账凭证等。这里的账务一般指对接线上系统的账务，采用单边账的记账方式。内部账记录在会计核算系统中&lt;/li&gt;
&lt;li&gt;订单系统：一般订单系统可独立于业务系统实现。这里的订单主要指支付订单&lt;/li&gt;
&lt;li&gt;资金系统：围绕财务会计而产生的后台资金核实、调度和管理的系统，包括&lt;/li&gt;
&lt;li&gt;会计核算：提供会计科目、内部账务、试算平衡、日切、流水登记、核算和归档&lt;/li&gt;
&lt;li&gt;资金管理：管理公司在各个支付渠道的头寸，在余额不足时进行打款。对第三方支付公司，还需要对备付金进行管理&lt;/li&gt;
&lt;li&gt;清算分润：对于有分润需求的业务，还需要提供清分清算、对账处理和计费分润功能&lt;/li&gt;
&lt;li&gt;风控系统：支付系统必备的基础功能，所有的支付行为必须做风险评估并采取对应的措施&lt;/li&gt;
&lt;li&gt;信用系统：在风控基础上发展的高级功能，京东白条，蚂蚁花呗等都是成功的案例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-3-支付应用&#34;&gt;7.3 支付应用&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;支撑系统、核心系统和服务系统，在每个公司的架构上应该是大同小异的，都是必不可少的模块&lt;/li&gt;
&lt;li&gt;支付应用是每个公司根据自己的业务来构建的，各不相同。总的来说，可以按照使用对象分为针对最终用户的应用、针对商户的应用、针对运营人员的运营管理、BI 和风控后台&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-4-参考链接&#34;&gt;7.4 参考链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woshipm.com/pmd/160822.html&#34; target=&#34;_blank&#34;&gt;最全最强解析：支付宝钱包系统架构内部剖析（架构图）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.360doc.com/content/16/0724/20/19476362_578094252.shtml&#34; target=&#34;_blank&#34;&gt;京东：支付平台总体架构设计图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wenku.baidu.com/view/7daa609d376baf1ffd4fad09.html&#34; target=&#34;_blank&#34;&gt;美团支付平台产品规划&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
