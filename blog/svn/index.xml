<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SVN | kiki</title>
    <link>https://xueqing.github.io/blog/svn/</link>
      <atom:link href="https://xueqing.github.io/blog/svn/index.xml" rel="self" type="application/rss+xml" />
    <description>SVN</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>SVN</title>
      <link>https://xueqing.github.io/blog/svn/</link>
    </image>
    
    <item>
      <title>SVN</title>
      <link>https://xueqing.github.io/blog/svn/svn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/svn/svn/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%e6%a6%82%e5%bf%b5&#34;&gt;1 概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%e5%ae%89%e8%a3%85&#34;&gt;2 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34;&gt;3 生命周期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%e5%85%b6%e4%bb%96%e5%91%bd%e4%bb%a4&#34;&gt;4 其他命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%e5%88%86%e6%94%af&#34;&gt;5 分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%e6%a0%87%e7%ad%be&#34;&gt;6 标签&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-概念&#34;&gt;1 概念&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;repository(源代码库): 源代码统一存放的地方&lt;/li&gt;
&lt;li&gt;Checkout(提取): 当没有源代码的时候，需要从 repository checkout 一份&lt;/li&gt;
&lt;li&gt;Commit(提交): 已经修改了代码，需要 Commit 到 repository&lt;/li&gt;
&lt;li&gt;Update(更新): 已经 Checkout 了一份源代码， Update 可以和 Repository 上的源代码同步，本地的代码就会有最新的变更&lt;/li&gt;
&lt;li&gt;SVN 管理源代码是以行为单位的，就是说两个程序员只要不是修改了同一行程序，SVN 都会自动合并两种修改。如果是同一行，SVN 会提示文件冲突，需要手动确认&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-安装&#34;&gt;2 安装&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 安装
sudo apt-get install subversion
# 查看版本
svn --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-生命周期&#34;&gt;3 生命周期&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;创建版本库：create&lt;/li&gt;
&lt;li&gt;检出：checkout，用来从版本库创建一个工作副本&lt;/li&gt;
&lt;li&gt;更新：update，用来更新版本库。这个操作将工作副本与版本库进行同步&lt;/li&gt;
&lt;li&gt;执行变更：

&lt;ul&gt;
&lt;li&gt;rename 可以更改文件/目录名字&lt;/li&gt;
&lt;li&gt;&amp;ldquo;移动&amp;rdquo;操作用来将文件/目录从一处移动到版本库中的另一处&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;复查变化：

&lt;ul&gt;
&lt;li&gt;status，列出了工作副本中所进行的变动&lt;/li&gt;
&lt;li&gt;diff，显示特定修改的行级详细信息&lt;/li&gt;
&lt;li&gt;不带参数，比较工作文件与缓存在&lt;code&gt;.svn&lt;/code&gt;的&amp;rdquo;原始&amp;rdquo;拷贝&lt;/li&gt;
&lt;li&gt;比较工作拷贝和版本库中版本号为 3 的文件 rule.txt：&lt;code&gt;svn diff -r 3 rule.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;比较版本库与版本库, -r(revision) 传递两个通过冒号分开的版本号：&lt;code&gt;svn diff -r 2:3 rule.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;修复错误：revert，重置对工作副本的修改

&lt;ul&gt;
&lt;li&gt;对目录操作使用 &lt;code&gt;svn revert -R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;撤回版本，比如当前是版本 22，要撤回版本21，执行 &lt;code&gt;svn merge -r 22:21 readme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;解决冲突：resolve，用来帮助用户找出冲突并告诉版本库如何处理这些冲突&lt;/li&gt;
&lt;li&gt;提交更改：commit，将更改从工作副本提交到版本库

&lt;ul&gt;
&lt;li&gt;add，添加到版本控制&lt;/li&gt;
&lt;li&gt;commit 是一个原子操作,也就是说要么完全提交成功，要么失败回滚&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-其他命令&#34;&gt;4 其他命令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;info：查看版本信息&lt;/li&gt;
&lt;li&gt;log：展示svn 的版本作者、日期、路径等

&lt;ul&gt;
&lt;li&gt;希望查看特定的某两个版本之间的信息：&lt;code&gt;svn log -r 6:8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看某一个文件的版本修改信息：&lt;code&gt;svn log file_path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;显示限定 N 条记录的目录信息：&lt;code&gt;svn log -l N -v&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;cat：取得在特定版本的某文件显示在当前屏幕

&lt;ul&gt;
&lt;li&gt;显示在指定版本号下的指定文件内容：&lt;code&gt;svn cat -r revision_num file_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;list：显示一个目录或某一版本存在的文件

&lt;ul&gt;
&lt;li&gt;可以在不下载文件到本地目录的情况下来察看目录中的文件：&lt;code&gt;svn list pro_url&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-分支&#34;&gt;5 分支&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;分支是 trunk 版(主干线)的一个 copy 版本，分支具有版本控制功能，且和主干线相互独立&lt;/li&gt;
&lt;li&gt;可以通过合并功能，将分支合并到 trunk，从而最后合并为一个项目&lt;/li&gt;
&lt;li&gt;在本地副本创建一个分支 &lt;code&gt;svn copy trunk branches/branch_name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看状态 &lt;code&gt;svn status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提交新增的分支到版本库 &lt;code&gt;svn commit -m &amp;quot;message&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;到新增分支进行开发

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd branches/my_branch/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改查看状态 &lt;code&gt;svn status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加到版本控制 &lt;code&gt;svn add ......&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提交到版本库 &lt;code&gt;svn commit -m &amp;quot;message&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;切换到 trunk &lt;code&gt;cd ../trunk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新版本 &lt;code&gt;svn update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;合并分支到 truck &lt;code&gt;svn merge ../branches/branch_name/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将合并好的 truck 提交到版本库 &lt;code&gt;svn commit -m &amp;quot;message&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-标签&#34;&gt;6 标签&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;标签主要用于项目开发中的里程碑，比如开发到一定阶段可以单独一个版本作为发布等，它往往代表一个可以固定的完整的版本&lt;/li&gt;
&lt;li&gt;在本地工作副本创建一个 tag &lt;code&gt;svn copy trunk tags/v1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看新的目录

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ls tags/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls tags/v1.0/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;查看状态 &lt;code&gt;svn status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提交 tag 内容 &lt;code&gt;svn commit -m &amp;quot;tags v1.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
