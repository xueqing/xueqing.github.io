<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker | kiki</title>
    <link>https://xueqing.github.io/tags/docker/</link>
      <atom:link href="https://xueqing.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <description>docker</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>docker</title>
      <link>https://xueqing.github.io/tags/docker/</link>
    </image>
    
    <item>
      <title>制作 Python 运行环境镜像</title>
      <link>https://xueqing.github.io/blog/docker/python_img/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/docker/python_img/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%8b%89%e5%8f%96%e5%9f%ba%e7%a1%80%e9%95%9c%e5%83%8f&#34;&gt;拉取基础镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%bc%96%e5%86%99-dockerfile&#34;&gt;编写 Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%b6%e4%bd%9c%e9%95%9c%e5%83%8f&#34;&gt;制作镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%9b%b4%e6%96%b0%e9%95%9c%e5%83%8f&#34;&gt;更新镜像&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%ae%89%e8%a3%85-sphinx--readthedocs-%e6%94%af%e6%8c%81&#34;&gt;安装 Sphinx + ReadTheDocs 支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%96%b9%e6%b3%95-1%e8%bf%9b%e5%85%a5%e9%95%9c%e5%83%8f%e5%86%85%e9%83%a8%e6%9b%b4%e6%96%b0%e9%95%9c%e5%83%8f&#34;&gt;方法 1：进入镜像内部更新镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%96%b9%e6%b3%95-2%e7%bc%96%e5%86%99%e6%96%b0%e7%9a%84-dockerfile&#34;&gt;方法 2：编写新的 Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%8e%a8%e9%80%81%e9%95%9c%e5%83%8f&#34;&gt;推送镜像&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%8e%a8%e9%80%81%e5%88%b0%e5%ae%98%e6%96%b9%e4%bb%93%e5%ba%93-docker-hub&#34;&gt;推送到官方仓库 Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%8e%a8%e9%80%81%e5%88%b0%e7%a7%81%e6%9c%89%e4%bb%93%e5%ba%93-xxx&#34;&gt;推送到私有仓库 xxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;拉取基础镜像&#34;&gt;拉取基础镜像&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull ubuntu:16.04
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;编写-dockerfile&#34;&gt;编写 Dockerfile&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 创建目录
mkdir docker-image/python &amp;amp;&amp;amp; cd docker-image/python
# 编写 Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM ubuntu:16.04
MAINTAINER kiki
# 更新 apt
RUN  apt-get update &amp;amp;&amp;amp; apt-get install -y
# 安装依赖
RUN  apt-get install gcc -y \
  &amp;amp;&amp;amp; apt-get install make -y \
  &amp;amp;&amp;amp; apt-get install vim -y \
  &amp;amp;&amp;amp; apt-get install openssl -y \
  &amp;amp;&amp;amp; apt-get install libssl-dev -y \
  &amp;amp;&amp;amp; apt-get install python3.5 -y \
  &amp;amp;&amp;amp; apt-get install python3-pip -y
CMD [&amp;quot;pip3&amp;quot;]
CMD [&amp;quot;python3&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装出现警告信息 &lt;code&gt;debconf: delaying package configuration, since apt-utils is not installed&lt;/code&gt;。解决方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends apt-utils
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;制作镜像&#34;&gt;制作镜像&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t python3 .
# 查看镜像
docker images
# 运行容器
docker run -i -t python3 /bin/bash
# 进入 docker 之后，运行 python3 和 pip3
python3
pip3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;更新镜像&#34;&gt;更新镜像&lt;/h2&gt;

&lt;h3 id=&#34;安装-sphinx-readthedocs-支持&#34;&gt;安装 Sphinx + ReadTheDocs 支持&lt;/h3&gt;

&lt;h4 id=&#34;方法-1-进入镜像内部更新镜像&#34;&gt;方法 1：进入镜像内部更新镜像&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 在 docker 内部安装相关依赖
pip3 install sphinx sphinx-autobuild sphinx_rtd_theme recommonmark pypandoc
# 提交更新
docker commit -m=&amp;quot;add Sphinx + ReadTheDocs support&amp;quot; -a=&amp;quot;kiki&amp;quot; CONTAINER-ID sphinx-rtd
# 查看新镜像
docker images
# 启动新镜像
docker run -i -t -v sphinx-rtd /bin/bash
# 给镜像设置标签
docker tag CONTAINER-ID compile-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装 Python 包遇到错误：&lt;code&gt;requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=&#39;files.pythonhosted.org&#39;, port=443): Read timed out&lt;/code&gt;。解决方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 在 Dockerfile 中增加下面的参数
pip3 --default-timeout=1000 install sphinx sphinx-autobuild sphinx_rtd_theme recommonmark pypandoc
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;方法-2-编写新的-dockerfile&#34;&gt;方法 2：编写新的 Dockerfile&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM python3
MAINTAINER kiki
# 安装依赖
RUN pip3 --default-timeout=1000 install sphinx sphinx-autobuild sphinx_rtd_theme recommonmark pypandoc
CMD [&amp;quot;pip3&amp;quot;]
CMD [&amp;quot;python3&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t sphinx-rtd .
# 查看镜像
docker images
# 运行容器
docker run -i -t sphinx-rtd /bin/bash
# 进入 docker 之后，运行 python3 和 pip3
python3
pip3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;推送镜像&#34;&gt;推送镜像&lt;/h2&gt;

&lt;h3 id=&#34;推送到官方仓库-docker-hub&#34;&gt;推送到官方仓库 Docker Hub&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker login -u username -p password
docker push sphinx-rtd
docker logout
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;推送到私有仓库-xxx&#34;&gt;推送到私有仓库 xxx&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 参考 https://github.com/docker/docker.github.io/blob/master/registry/insecure.md 设置 http 连接
# 给镜像添加标签
docker tag sphinx-rtd xxx:sphinx-rtd
# 推送镜像
docker push xxx:sphinx-rtd
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>安装</title>
      <link>https://xueqing.github.io/blog/docker/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/docker/install/</guid>
      <description>&lt;p&gt;环境：ubuntu16.04&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 安装 docker
sudo apt-get install docker.io
# 启动 docker
sudo /etc/init.d/docker start
# 创建 docker 用户组
sudo groupadd docker
# 应用用户 kiki 加入 docker 用户组
sudo usermod -aG docker kiki
# 重启 docker 服务
sudo /etc/init.d/docker restart
# 切换或者退出当前账户再从新登入
su root     # 切换到root用户
su kiki  # 再切换到原来的应用用户以上配置才生效
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>容器操作</title>
      <link>https://xueqing.github.io/blog/docker/container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/docker/container/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%97%e5%87%ba%e5%ae%b9%e5%99%a8&#34;&gt;列出容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%bf%9e%e6%8e%a5%e5%ae%b9%e5%99%a8&#34;&gt;连接容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%8e%b7%e5%8f%96%e5%ae%b9%e5%99%a8%e6%97%a5%e5%bf%97&#34;&gt;获取容器日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;列出容器&#34;&gt;列出容器&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a: 显示所有的容器，包括未运行的&lt;/li&gt;
&lt;li&gt;-f: 根据条件过滤显示的内容&lt;/li&gt;
&lt;li&gt;&amp;ndash;format: 指定返回值的模板文件&lt;/li&gt;
&lt;li&gt;-l: 显示最近创建的容器&lt;/li&gt;
&lt;li&gt;-n: 列出最近创建的n个容器&lt;/li&gt;
&lt;li&gt;&amp;ndash;no-trunc: 不截断输出&lt;/li&gt;
&lt;li&gt;-q: 静默模式，只显示容器编号&lt;/li&gt;
&lt;li&gt;-s: 显示总的文件大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;列出所有在运行的容器信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出详情介绍：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CONTAINER ID: 容器 ID&lt;/li&gt;
&lt;li&gt;IMAGE: 使用的镜像&lt;/li&gt;
&lt;li&gt;COMMAND: 启动容器时运行的命令&lt;/li&gt;
&lt;li&gt;CREATED: 容器的创建时间&lt;/li&gt;
&lt;li&gt;STATUS: 容器状态。状态有 7 种

&lt;ul&gt;
&lt;li&gt;created（已创建）&lt;/li&gt;
&lt;li&gt;restarting（重启中）&lt;/li&gt;
&lt;li&gt;running（运行中）&lt;/li&gt;
&lt;li&gt;removing（迁移中）&lt;/li&gt;
&lt;li&gt;paused（暂停）&lt;/li&gt;
&lt;li&gt;exited（停止）&lt;/li&gt;
&lt;li&gt;dead（死亡）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PORTS: 容器的端口信息和使用的连接类型（tcp\udp）&lt;/li&gt;
&lt;li&gt;NAMES: 自动分配的容器名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;列出最近创建的 5 个容器信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps -n 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;列出所有创建的容器 ID。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;连接容器&#34;&gt;连接容器&lt;/h2&gt;

&lt;p&gt;连接到正在运行中的容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker attach [OPTIONS] CONTAINER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要 attach 上去的容器必须正在运行，可以同时连接上同一个容器来共享屏幕（与 screen 命令的 attach 类似）。&lt;/p&gt;

&lt;p&gt;容器 mynginx 将访问日志指到标准输出，连接到容器查看访问信息。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker attach --sig-proxy=false mynginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;获取容器日志&#34;&gt;获取容器日志&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker logs [OPTIONS] CONTAINER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-f: 跟踪日志输出&lt;/li&gt;
&lt;li&gt;&amp;ndash;since: 显示某个开始时间的所有日志&lt;/li&gt;
&lt;li&gt;-t: 显示时间戳&lt;/li&gt;
&lt;li&gt;&amp;ndash;tail: 仅列出最新 N 条容器日志&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;跟踪查看容器 mynginx 的日志输出。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker logs -f mynginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看容器 mynginx 从 2016 年 7 月 1 日后的最新 10 条日志。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker logs --since=&amp;quot;2016-07-01&amp;quot; --tail=10 mynginx
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>容器生命周期管理命令</title>
      <link>https://xueqing.github.io/blog/docker/container_life/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/docker/container_life/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e5%ae%b9%e5%99%a8&#34;&gt;创建容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%90%af%e5%8a%a8%e5%81%9c%e6%ad%a2%e9%87%8d%e5%90%af%e5%ae%b9%e5%99%a8&#34;&gt;启动/停止/重启容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%9d%80%e6%8e%89%e5%ae%b9%e5%99%a8&#34;&gt;杀掉容器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%a0%e9%99%a4%e5%ae%b9%e5%99%a8&#34;&gt;删除容器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;创建容器&#34;&gt;创建容器&lt;/h2&gt;

&lt;p&gt;创建一个新的容器并运行一个命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项&lt;/li&gt;
&lt;li&gt;-d: 后台运行容器，并返回容器ID&lt;/li&gt;
&lt;li&gt;-i: 以交互模式运行容器，通常与 -t 同时使用&lt;/li&gt;
&lt;li&gt;-P: 随机端口映射，容器内部端口随机映射到主机的高端口&lt;/li&gt;
&lt;li&gt;-p: 指定端口映射，格式为：主机(宿主)端口:容器端口&lt;/li&gt;
&lt;li&gt;-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用&lt;/li&gt;
&lt;li&gt;&amp;ndash;name string: 为容器指定一个名称&lt;/li&gt;
&lt;li&gt;&amp;ndash;dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致&lt;/li&gt;
&lt;li&gt;&amp;ndash;dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致&lt;/li&gt;
&lt;li&gt;-h &amp;ldquo;mars&amp;rdquo;: 指定容器的hostname&lt;/li&gt;
&lt;li&gt;-e username=&amp;ldquo;ritchie&amp;rdquo;: 设置环境变量&lt;/li&gt;
&lt;li&gt;&amp;ndash;env-file=[]: 从指定文件读入环境变量&lt;/li&gt;
&lt;li&gt;&amp;ndash;cpuset-cpus string: 绑定容器到指定 CPU 运行(&amp;ldquo;0-2&amp;rdquo;/&amp;ldquo;0,1,2&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;-m: 设置容器使用内存最大值&lt;/li&gt;
&lt;li&gt;&amp;ndash;net=&amp;ldquo;bridge&amp;rdquo;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型&lt;/li&gt;
&lt;li&gt;&amp;ndash;link=[]: 添加链接到另一个容器&lt;/li&gt;
&lt;li&gt;&amp;ndash;expose=[]: 开放一个端口或一组端口&lt;/li&gt;
&lt;li&gt;&amp;ndash;volume , -v: 绑定一个卷&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用 docker 镜像 nginx:latest 以后台模式启动一个容器,并将容器命名为 mynginx。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --name &amp;quot;mynginx&amp;quot; -d nginx:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用镜像 nginx:latest 以后台模式启动一个容器,并将容器的 80 端口映射到主机随机端口。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -P -d nginx:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -p 80:80 -v /data:/data -d nginx:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -p 127.0.0.1:80:8080/tcp ubuntu bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用镜像 nginx:latest 以交互模式启动一个容器,在容器内执行/bin/bash命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it nginx:latest /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;启动-停止-重启容器&#34;&gt;启动/停止/重启容器&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 启动一个或多个已经被停止的容器
docker start [OPTIONS] CONTAINER [CONTAINER...]
# 停止一个运行中的容器
docker stop [OPTIONS] CONTAINER [CONTAINER...]
# 重启容器
docker restart [OPTIONS] CONTAINER [CONTAINER...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动已被停止的容器 myrunoob。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker start myrunoob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;停止运行中的容器 myrunoob。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker stop myrunoob
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启容器 myrunoob。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker restart myrunoob
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;杀掉容器&#34;&gt;杀掉容器&lt;/h2&gt;

&lt;p&gt;杀掉一个运行中的容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker kill [OPTIONS] CONTAINER [CONTAINER...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-s: 向容器发送一个信号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;杀掉运行中的容器 mynginx。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker kill -s KILL mynginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;删除容器&#34;&gt;删除容器&lt;/h2&gt;

&lt;p&gt;删除一个或多少容器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker rm [OPTIONS] CONTAINER [CONTAINER...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-f: 通过SIGKILL信号强制删除一个运行中的容器&lt;/li&gt;
&lt;li&gt;-l: 移除容器间的网络连接，而非容器本身&lt;/li&gt;
&lt;li&gt;-v: 删除与容器关联的卷&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;强制删除容器db01、db02。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker rm -f db01 db02
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除容器 nginx01 对容器 db01 的连接，连接名 db。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker rm -l db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;删除容器 nginx01，并删除容器挂载的数据卷。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker rm -v nginx01
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>本地镜像管理命令</title>
      <link>https://xueqing.github.io/blog/docker/image_cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/docker/image_cmd/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%97%e5%87%ba%e6%9c%ac%e5%9c%b0%e9%95%9c%e5%83%8f&#34;&gt;列出本地镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%a0%e9%99%a4%e9%95%9c%e5%83%8f&#34;&gt;删除镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%a0%87%e8%ae%b0%e6%9c%ac%e5%9c%b0%e9%95%9c%e5%83%8f&#34;&gt;标记本地镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e9%95%9c%e5%83%8f&#34;&gt;创建镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%bf%9d%e5%ad%98%e9%95%9c%e5%83%8f&#34;&gt;保存镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%af%bc%e5%85%a5%e9%95%9c%e5%83%8f&#34;&gt;导入镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;列出本地镜像&#34;&gt;列出本地镜像&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker images [OPTIONS] [REPOSITORY[:TAG]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a: 列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）&lt;/li&gt;
&lt;li&gt;&amp;ndash;digests: 显示镜像的摘要信息&lt;/li&gt;
&lt;li&gt;-f: 显示满足条件的镜像&lt;/li&gt;
&lt;li&gt;&amp;ndash;format: 指定返回值的模板文件&lt;/li&gt;
&lt;li&gt;&amp;ndash;no-trunc: 显示完整的镜像信息&lt;/li&gt;
&lt;li&gt;-q: 只显示镜像ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;列出本地镜像中 REPOSITORY 为 ubuntu 的镜像列表。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker images ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;删除镜像&#34;&gt;删除镜像&lt;/h2&gt;

&lt;p&gt;删除本地一个或多少镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker rmi [OPTIONS] IMAGE [IMAGE...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-f: 强制删除&lt;/li&gt;
&lt;li&gt;&amp;ndash;no-prune: 不移除该镜像的过程镜像，默认移除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;强制删除本地镜像 runoob/ubuntu:v4。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker rmi -f runoob/ubuntu:v4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;标记本地镜像&#34;&gt;标记本地镜像&lt;/h2&gt;

&lt;p&gt;标记本地镜像，将其归入某一仓库。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将镜像 ubuntu:15.10 标记为 runoob/ubuntu:v3 镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker tag ubuntu:15.10 runoob/ubuntu:v3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;创建镜像&#34;&gt;创建镜像&lt;/h2&gt;

&lt;p&gt;使用 Dockerfile 创建镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build [OPTIONS] PATH | URL | -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;build-arg=[]: 设置镜像创建时的变量&lt;/li&gt;
&lt;li&gt;&amp;ndash;cpu-shares: 设置 cpu 使用权重&lt;/li&gt;
&lt;li&gt;&amp;ndash;cpu-period: 限制 CPU CFS周期&lt;/li&gt;
&lt;li&gt;&amp;ndash;cpu-quota: 限制 CPU CFS配额&lt;/li&gt;
&lt;li&gt;&amp;ndash;cpuset-cpus: 指定使用的CPU id&lt;/li&gt;
&lt;li&gt;&amp;ndash;cpuset-mems: 指定使用的内存 id&lt;/li&gt;
&lt;li&gt;&amp;ndash;disable-content-trust: 忽略校验，默认开启&lt;/li&gt;
&lt;li&gt;-f: 指定要使用的Dockerfile路径&lt;/li&gt;
&lt;li&gt;&amp;ndash;force-rm: 设置镜像过程中删除中间容器&lt;/li&gt;
&lt;li&gt;&amp;ndash;isolation: 使用容器隔离技术&lt;/li&gt;
&lt;li&gt;&amp;ndash;label=[]: 设置镜像使用的元数据&lt;/li&gt;
&lt;li&gt;-m: 设置内存最大值&lt;/li&gt;
&lt;li&gt;&amp;ndash;memory-swap: 设置Swap的最大值为内存+swap，&amp;rdquo;-1&amp;rdquo;表示不限swap&lt;/li&gt;
&lt;li&gt;&amp;ndash;no-cache: 创建镜像的过程不使用缓存&lt;/li&gt;
&lt;li&gt;&amp;ndash;pull: 尝试去更新镜像的新版本&lt;/li&gt;
&lt;li&gt;&amp;ndash;quiet, -q: 安静模式，成功后只输出镜像 ID&lt;/li&gt;
&lt;li&gt;&amp;ndash;rm: 设置镜像成功后删除中间容器&lt;/li&gt;
&lt;li&gt;&amp;ndash;shm-size: 设置/dev/shm的大小，默认值是64M&lt;/li&gt;
&lt;li&gt;&amp;ndash;ulimit: Ulimit配置&lt;/li&gt;
&lt;li&gt;&amp;ndash;tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签&lt;/li&gt;
&lt;li&gt;&amp;ndash;network: 默认 default。在构建期间设置RUN指令的网络模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t runoob/ubuntu:v1 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 URL &lt;code&gt;github.com/creack/docker-firefox&lt;/code&gt; 的 Dockerfile 创建镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build github.com/creack/docker-firefox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以通过 -f Dockerfile 文件的位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -f /path/to/a/Dockerfile .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回。&lt;/p&gt;

&lt;h2 id=&#34;保存镜像&#34;&gt;保存镜像&lt;/h2&gt;

&lt;p&gt;将指定镜像保存成 tar 归档文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker save [OPTIONS] IMAGE [IMAGE...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-o: 输出到的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;导入镜像&#34;&gt;导入镜像&lt;/h2&gt;

&lt;p&gt;导入使用 docker save 命令导出的镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker load [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;input, -i: 指定导入的文件，代替 STDIN&lt;/li&gt;
&lt;li&gt;&amp;ndash;quiet, -q: 精简输出信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从 busybox.tar.gz 导入镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker load &amp;lt; busybox.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定导入文件 fedora.tar 导入镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker load -i fedora.tar
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>镜像仓库命令</title>
      <link>https://xueqing.github.io/blog/docker/image_rep_cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/docker/image_rep_cmd/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%99%bb%e5%bd%95%e9%80%80%e5%87%ba&#34;&gt;登录/退出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%8b%89%e5%8f%96%e9%95%9c%e5%83%8f&#34;&gt;拉取镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%b8%8a%e4%bc%a0%e9%95%9c%e5%83%8f&#34;&gt;上传镜像&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;登录-退出&#34;&gt;登录/退出&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 登陆到一个 Docker 镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub
docker login [OPTIONS] [SERVER]
# 登出一个 Docker 镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub
docker logout [OPTIONS] [SERVER]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-u: 登陆的用户名&lt;/li&gt;
&lt;li&gt;-p: 登陆的密码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;登陆到 Docker Hub。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker login -u username -p password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;登出 Docker Hub。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker logout
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;拉取镜像&#34;&gt;拉取镜像&lt;/h2&gt;

&lt;p&gt;从镜像仓库中拉取或者更新指定镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull [OPTIONS] NAME[:TAG|@DIGEST]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-a: 拉取所有 tagged 镜像&lt;/li&gt;
&lt;li&gt;&amp;ndash;disable-content-trust: 忽略镜像的校验,默认开启&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从 Docker Hub 下载 java 最新版镜像。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull -a java
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;上传镜像&#34;&gt;上传镜像&lt;/h2&gt;

&lt;p&gt;将本地的镜像上传到镜像仓库,要先登陆到镜像仓库。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker push [OPTIONS] NAME[:TAG]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OPTIONS 说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ndash;disable-content-trust: 忽略镜像的校验,默认开启&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上传本地镜像 myapache:v1 到镜像仓库中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker push myapache:v1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
