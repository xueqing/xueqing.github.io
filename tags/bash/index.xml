<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash | kiki</title>
    <link>https://xueqing.github.io/tags/bash/</link>
      <atom:link href="https://xueqing.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <description>bash</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>bash</title>
      <link>https://xueqing.github.io/tags/bash/</link>
    </image>
    
    <item>
      <title>bash</title>
      <link>https://xueqing.github.io/blog/shell/bash/bash_shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/shell/bash/bash_shell/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#description&#34;&gt;description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#synopsis&#34;&gt;synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#options&#34;&gt;options&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#single-character-options&#34;&gt;single character options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multi-character-options&#34;&gt;multi character options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arguments&#34;&gt;arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#invocation&#34;&gt;invocation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#definitions&#34;&gt;definitions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reserverdwords&#34;&gt;reserverd_words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shell-grammar&#34;&gt;shell grammar&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#simple-commands&#34;&gt;simple commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pipelines&#34;&gt;pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lists&#34;&gt;lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compound-commands&#34;&gt;compound commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#coprocesses&#34;&gt;coprocesses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%87%bd%e6%95%b0%e5%ae%9a%e4%b9%89&#34;&gt;函数定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#comments&#34;&gt;comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quoting&#34;&gt;quoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parameters&#34;&gt;parameters&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#positional-parameters&#34;&gt;positional parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#special-parameters&#34;&gt;special parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shell-variables&#34;&gt;shell variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#array&#34;&gt;array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#expansion&#34;&gt;expansion&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#brace-expansion&#34;&gt;brace expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tilde-expansion&#34;&gt;tilde expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parameter-expansion&#34;&gt;parameter expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#command-substitution&#34;&gt;command substitution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arithmetic-expansion&#34;&gt;arithmetic expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#process-substitution&#34;&gt;process substitution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#word-splitting&#34;&gt;word splitting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathname-expansion&#34;&gt;pathname expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#quote-removal&#34;&gt;quote removal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redirection&#34;&gt;redirection&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#input&#34;&gt;input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#output&#34;&gt;output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#appending-redirected-output&#34;&gt;appending redirected output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redirecting-standard-output-and-standard-error&#34;&gt;redirecting standard output and standard error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#appending-standard-output-and-standard-error&#34;&gt;appending standard output and standard error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#here-documents&#34;&gt;here documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#here-strings&#34;&gt;here strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#duplicating-file-descriptors&#34;&gt;duplicating file descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#moving-file-descriptors&#34;&gt;moving file descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#opening-file-descriptors-for-reading-and-writing&#34;&gt;opening file descriptors for reading and writing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aliases&#34;&gt;aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#functions&#34;&gt;functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#arithmetic-evaluation&#34;&gt;arithmetic evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conditional-expressions&#34;&gt;conditional expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#simple-command-expansion&#34;&gt;simple command expansion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#command-execution&#34;&gt;command execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#command-execution-environment&#34;&gt;command execution environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#environment&#34;&gt;environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exit-status&#34;&gt;exit status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#signals&#34;&gt;signals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#job-control&#34;&gt;job control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prompting&#34;&gt;prompting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readline&#34;&gt;readline&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readline-notation&#34;&gt;readline notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readline-initialization&#34;&gt;readline initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readline-key-bindings&#34;&gt;readline key bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readline-variables&#34;&gt;readline variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readline-conditional-constructs&#34;&gt;readline conditional constructs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#searching&#34;&gt;searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#readline-command-names&#34;&gt;readline command names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commands-for-moving&#34;&gt;commands for moving&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commands-for-manipulating-the-history&#34;&gt;commands for manipulating the history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#commands-for-changing-text&#34;&gt;commands for changing text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#killing-and-yanking&#34;&gt;killing and yanking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numeric-arguments&#34;&gt;numeric arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#completing&#34;&gt;completing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#keyboard-macros&#34;&gt;keyboard macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#miscellaneous&#34;&gt;miscellaneous&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#programmable-completion&#34;&gt;programmable completion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#history&#34;&gt;history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#history-expansion&#34;&gt;history expansion&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#event-designators&#34;&gt;event designators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#word-designators&#34;&gt;word designators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modifiers&#34;&gt;modifiers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shell-builtin-commands&#34;&gt;shell builtin commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#restricted-shell&#34;&gt;restricted shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#files&#34;&gt;files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;description&#34;&gt;description&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;bash(Bourne-Again SHell)，是一种 sh-兼容的命令语言解释器，执行从标准输入或文件读取的命令&lt;/li&gt;
&lt;li&gt;bash 也吸收了 knor 和 C shell(ksh 和 csh)的一些有用的特点&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;synopsis&#34;&gt;synopsis&lt;/h2&gt;

&lt;p&gt;总览&lt;code&gt;bash [options] [command_string | file]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;options&#34;&gt;options&lt;/h2&gt;

&lt;h3 id=&#34;single-character-options&#34;&gt;single character options&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;表示从第一个非选项的&lt;code&gt;command_string&lt;/code&gt;读命令。如果&lt;code&gt;command_string&lt;/code&gt;之后有参数，赋值给对应位置的参数，从&lt;code&gt;$0&lt;/code&gt;开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;表示 shell 是交互式的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;表示 shell 是&lt;a href=&#34;#restricted-shell&#34;&gt;受限的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;或者选项后面没有参数，表示从标准输入读命令。这个选项允许在启动交互式 shell 时设置位置参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;O [shopt option]&lt;/code&gt;shopt option 是由内置的&lt;a href=&#34;#shell-builtin-commands&#34;&gt;shopt&lt;/a&gt;接收的参数

&lt;ul&gt;
&lt;li&gt;如果有&lt;code&gt;shopt option&lt;/code&gt;，&lt;code&gt;-O&lt;/code&gt;设置该选项的值；&lt;code&gt;+O&lt;/code&gt;取消设置&lt;/li&gt;
&lt;li&gt;如果没有&lt;code&gt;shopt option&lt;/code&gt;，选项的名字和值被输出到标准输出&lt;/li&gt;
&lt;li&gt;如果调用选项是&lt;code&gt;+O&lt;/code&gt;，输出按一定格式展示可当做输入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&lt;/code&gt;标记选择的终止，不再处理选项。后面的参数都当做文件名或参数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;multi-character-options&#34;&gt;multi character options&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rcfile file&lt;/code&gt;在交互式 shell 中，执行&lt;code&gt;file&lt;/code&gt;的命令，而不是系统范围的初始化文件&lt;code&gt;/etc/bash.bashrc&lt;/code&gt;或标准的个人初始化文件&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--noprofile&lt;/code&gt;在启动一个交互式 shell 的时候，选项会根据几个默认的文件配置环境。此选项表示不要读这些文件

&lt;ul&gt;
&lt;li&gt;系统范围的开始文件&lt;code&gt;/etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有的个人初始化文件&lt;code&gt;~/.bash_profile&lt;/code&gt;，&lt;code&gt;~/.bash_login&lt;/code&gt;和&lt;code&gt;~/.profile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--norc&lt;/code&gt;在交互式 shell 中，不要读系统范围的初始化文件&lt;code&gt;/etc/bash.bashrc&lt;/code&gt;和标准的个人初始化文件&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;arguments&#34;&gt;arguments&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;如果处理的选项之后还要参数，且没有&lt;code&gt;-c&lt;/code&gt;和&lt;code&gt;-s&lt;/code&gt;，第一个参数被认为是包含 shell 命令的文件。&lt;code&gt;$0&lt;/code&gt;设置成这个文件名，其他的位置参数设置为剩下的参数&lt;/li&gt;
&lt;li&gt;bash 从这个文件读并执行命令，然后退出&lt;/li&gt;
&lt;li&gt;bash 的退出状态是最后执行的命令的状态，没有执行命令则退出状态是 0&lt;/li&gt;
&lt;li&gt;bash 先尝试从当前目录查找文件，如果没有，则从&lt;code&gt;PATH&lt;/code&gt;中查找这个脚本文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;invocation&#34;&gt;invocation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;当 bash 作为一个交互式的登录 shell，或非交互式的带有&lt;code&gt;--login&lt;/code&gt;的 shell

&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;/etc/profile&lt;/code&gt;存在则读并执行命令&lt;/li&gt;
&lt;li&gt;按照&lt;code&gt;~/.bash_profile&lt;/code&gt;，&lt;code&gt;~/.bash_login&lt;/code&gt;和&lt;code&gt;~/.profile&lt;/code&gt;的顺序查找文件，存在的话就读和执行命令&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果是一个登录 shell，如果&lt;code&gt;~/.bash_logout&lt;/code&gt;文件存在，则读和执行命令&lt;/li&gt;
&lt;li&gt;如果是一个交互式的非登录 shell如果&lt;code&gt;/etc/bash.bashrc&lt;/code&gt;和&lt;code&gt;~/.bashrc&lt;/code&gt;文件存在，则读和执行命令&lt;/li&gt;
&lt;li&gt;如果是非交互式 shell，比如运行一个 shell 脚本，查找环境的&lt;code&gt;BASH_ENV&lt;/code&gt;，如果存在则展开它的值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;definitions&#34;&gt;definitions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;blank 一个空格或制表符&lt;/li&gt;
&lt;li&gt;word shell 认为是一个整体的字符序列，也叫 token&lt;/li&gt;
&lt;li&gt;name 一个只包含字母和下划线的 word，而且以字母或下划线开头，也叫 identifier&lt;/li&gt;
&lt;li&gt;metacharacter 当未加引号时，用来分离 word 的字符，包括&lt;code&gt;| &amp;amp; ; ( ) &amp;lt; &amp;gt;&lt;/code&gt;、空格和制表符&lt;/li&gt;
&lt;li&gt;control operator 执行一个控制函数的 token，包括&lt;code&gt;|| &amp;amp; &amp;amp;&amp;amp; ; ;; ( ) | |&amp;amp;&lt;/code&gt;和换行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reserverd-words&#34;&gt;reserverd_words&lt;/h2&gt;

&lt;p&gt;保留字是对 shell 有特殊含义的单词。包括&lt;code&gt;! case coproc do done elif else esac fi for function if in select then until while { } time [[ ]]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;shell-grammar&#34;&gt;shell grammar&lt;/h2&gt;

&lt;h3 id=&#34;simple-commands&#34;&gt;simple commands&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;简单命令的格式第一个 word 是要执行的命令，作为参数 0，即&lt;code&gt;$0&lt;/code&gt;，剩余的 word 作为命令的参数&lt;/li&gt;
&lt;li&gt;简单命令的返回值就是它的退出状态；如果是被信号&lt;code&gt;n&lt;/code&gt;终止的，则返回&lt;code&gt;128+n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pipelines&#34;&gt;pipelines&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一个 pipeline 是一个或多个命令，使用控制操作符&lt;code&gt;|&lt;/code&gt;或&lt;code&gt;|&amp;amp;&lt;/code&gt;分割&lt;/li&gt;
&lt;li&gt;格式&lt;code&gt;[time [-p]] [ ! ] command [ [|或|&amp;amp;] command2 ... ]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;管道的连接在重定向之前执行&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;|&amp;amp;&lt;/code&gt;，前一个命令的标准错误和标准输出通过管道连接到下一个命令的标准输入，是&lt;code&gt;2&amp;gt;&amp;amp;1 |&lt;/code&gt;的简写&lt;/li&gt;
&lt;li&gt;返回值&lt;/li&gt;
&lt;li&gt;管道的返回值是最后一个目录的返回状态，除非开启了&lt;code&gt;pipefail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;允许&lt;code&gt;pipefail&lt;/code&gt;，返回状态是最后一个最正确(rightmost)命令，退出一个非 0 状态，或者都正常退出的话返回 0&lt;/li&gt;
&lt;li&gt;管道之前有&lt;code&gt;!&lt;/code&gt;，则返回的是上述返回值的逻辑否定值&lt;/li&gt;
&lt;li&gt;shell 等待管道中的所有命令终止才会返回&lt;/li&gt;
&lt;li&gt;包括字&lt;code&gt;time&lt;/code&gt;使得管道终止的时候，报告所有花费的时间，包括用户和系统时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;使用 POSIX 指定的输出格式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;管道中的每个命令都是一个单独的进程(比如，在一个子 shell 执行)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lists&#34;&gt;lists&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;list 是值一个 pipeline 或由符号&lt;code&gt;; &amp;amp; &amp;amp;&amp;amp; ||&lt;/code&gt;分隔的多个 pipeline，以&lt;code&gt;; &amp;amp;&lt;/code&gt;或换行终止&lt;/li&gt;
&lt;li&gt;优先级：&lt;code&gt;&amp;amp;&amp;amp; = || &amp;gt; ; = &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;&amp;amp;&lt;/code&gt;控制符结尾表示 shell 将在一个子 shell 中执行该命令，且在后台运行，不会等待该命令结束，返回状态是 0&lt;/li&gt;
&lt;li&gt;以&lt;code&gt;;&lt;/code&gt;分隔的命令按顺序执行，返回状态是最后执行的命令的返回状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command1 &amp;amp;&amp;amp; command2&lt;/code&gt;只有 command1 返回状态是 0 时才会执行 command2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command1 || command2&lt;/code&gt;只有 command1 返回状态非 0 时才会执行 command2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;compound-commands&#34;&gt;compound commands&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(list)&lt;/code&gt;在子 shell 中执行 list，返回状态是 list 的返回状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ list; }&lt;/code&gt;在当前 shell 中执行 list，是&lt;code&gt;group command&lt;/code&gt;，返回状态是 list 的返回状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((expression))&lt;/code&gt;以&lt;a href=&#34;#arithmetic-evaluation&#34;&gt;算术求值&lt;/a&gt;规则计算表达式，如果值非 0 则返回 0，否则返回 1，等同于&lt;code&gt;let &amp;quot;expression&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[[ expression ]]&lt;/code&gt;根据&lt;a href=&#34;#conditional-expressions&#34;&gt;条件表达式&lt;/a&gt;的值确定返回状态是 0 还是 1

&lt;ul&gt;
&lt;li&gt;表达式中不会执行&lt;a href=&#34;#word-splitting&#34;&gt;word splitting&lt;/a&gt;和&lt;a href=&#34;#pathname-expansion&#34;&gt;pathname expansion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;当使用&lt;code&gt;== !=&lt;/code&gt;时，操作符右边的字符串被认为是模式，根据模式匹配规则

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;等同于&lt;code&gt;==&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果 shell 选项&lt;code&gt;nocasematch&lt;/code&gt;设置的话，可以忽略大小写&lt;/li&gt;
&lt;li&gt;匹配返回 0，否则返回 1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;二元操作符&lt;code&gt;=~&lt;/code&gt;和&lt;code&gt;== !=&lt;/code&gt;优先级相同，操作符右边的被视为扩展的正则表达式

&lt;ul&gt;
&lt;li&gt;如果正则表达式语法错误返回 2&lt;/li&gt;
&lt;li&gt;匹配的子串保存在&lt;code&gt;BASH_REMATCH&lt;/code&gt;中，下标为 0 表示匹配整个子串，下标为 n 表示匹配第 n 个圆括号的子表达式&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;表达式的形式包括

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;( expression )&lt;/code&gt;返回表达式的值，可用于修改操作符的优先级&lt;/li&gt;
&lt;li&gt;&lt;code&gt;! expression&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expression1 &amp;amp;&amp;amp; expression2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expression1 || expression2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for name [ [ in [ word ... ] ] ; ] do list ; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;后面的内容被扩展，生成一个元素列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;每次循环设置成列表中的元素&lt;/li&gt;
&lt;li&gt;如果没有&lt;code&gt;in&lt;/code&gt;，&lt;code&gt;for&lt;/code&gt;对每个位置参数执行一次&lt;/li&gt;
&lt;li&gt;返回状态是最后一个执行命令的返回值&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;in&lt;/code&gt;生成的元素集合为空，则返回 0，不执行任何命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (( expr1 ; expr2 ;  expr3 )) ; do list ; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;以&lt;a href=&#34;#arithmetic-evaluation&#34;&gt;算术求值&lt;/a&gt;规则计算&lt;code&gt;expr1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重复计算算术表达式&lt;code&gt;expr2&lt;/code&gt;直到值是 0：每次得到一个非 0 值，执行&lt;code&gt;list&lt;/code&gt;，然后计算算术表达式&lt;code&gt;expr3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果对应位置的表达式没有，则认为值为 1&lt;/li&gt;
&lt;li&gt;返回值是&lt;code&gt;list&lt;/code&gt;最后一个执行的命令的返回状态；如果所有表达式都是无效的返回 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select name [ in word ] ; do list ; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;后面的内容被扩展，生成一个元素列表&lt;/li&gt;
&lt;li&gt;扩展的单词背打印到标准错误，每个前面一个数字&lt;/li&gt;
&lt;li&gt;如果没有&lt;code&gt;in&lt;/code&gt;，则打印位置参数&lt;/li&gt;
&lt;li&gt;每次选择之后执行&lt;code&gt;list&lt;/code&gt;，知道遇到&lt;code&gt;break&lt;/code&gt;命令&lt;/li&gt;
&lt;li&gt;返回值是&lt;code&gt;list&lt;/code&gt;最后一个执行的命令的返回状态；如果没有执行命令则返回 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到匹配，执行对应的&lt;code&gt;list&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;如果使用了&lt;code&gt;;;&lt;/code&gt;，则不会再继续&lt;/li&gt;
&lt;li&gt;如果使用了&lt;code&gt;;&amp;amp;&lt;/code&gt;，则继续执行后面的&lt;code&gt;list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果使用了&lt;code&gt;;;&amp;amp;&lt;/code&gt;，则继续尝试匹配后面的模式，如果匹配则执行对应的&lt;code&gt;list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如果没有匹配的模式返回 0，否则返回&lt;code&gt;list&lt;/code&gt;中最后执行的命令的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if list; then list; [ elif list; then list; ] ... [ else list; ] fi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while list-1; do list-2; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;list-1&lt;/code&gt;的最后一个命令的返回状态为 0 时执行&lt;code&gt;list-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回&lt;code&gt;list-2&lt;/code&gt;中最后执行的命令的返回状态，什么都没有执行则返回 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;until list-1; do list-2; done&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;list-1&lt;/code&gt;的最后一个命令的返回状态非 0 时执行&lt;code&gt;list-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回&lt;code&gt;list-2&lt;/code&gt;中最后执行的命令的返回状态，什么都没有执行则返回 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;coprocesses&#34;&gt;coprocesses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;语法&lt;code&gt;coproc [NAME] command [redirections]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建一个叫做&lt;code&gt;NAME&lt;/code&gt;的协同进程，如果不指定则是&lt;code&gt;COPROC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果是&lt;a href=&#34;#simple-commands&#34;&gt;简单命令&lt;/a&gt;则不能知道名字，名字就是简单命令的第一个单词&lt;/li&gt;
&lt;li&gt;协同进程在一个子 shell 中异步执行，类似于在后台执行命令，在执行的 shell 和协同进程之间建立了一个双向的 pipeline&lt;/li&gt;
&lt;li&gt;执行协同进程的时候，shell 在执行 shell 的上下文创建一个叫&lt;code&gt;NAME&lt;/code&gt;的&lt;a href=&#34;#array&#34;&gt;数组&lt;/a&gt;变量

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt;的标准输出通过管道连接到一个文件描述符，值为&lt;code&gt;NAME[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt;的标准输入通过管道连接到一个文件描述符，值为&lt;code&gt;NAME[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;管道的建立在重定向之前完成&lt;/li&gt;
&lt;li&gt;文件描述符可以被 shell 命令和重定向用作参数，子 shell 中不能访问这个文件描述符&lt;/li&gt;
&lt;li&gt;执行协同进程的子 shell 的进程 ID可以通过变量&lt;code&gt;NAME_PID&lt;/code&gt;访问&lt;/li&gt;
&lt;li&gt;内置的&lt;code&gt;wait&lt;/code&gt;命令可用来等待协同进程终止&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coproc&lt;/code&gt;命令总是返回成功，coprocess 的返回状态是&lt;code&gt;command&lt;/code&gt;的退出状态&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;函数定义&#34;&gt;函数定义&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;语法支持两种

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name () compound-command [redirection]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function name [()] compound-command [redirection]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;定义了一个叫做&lt;code&gt;name&lt;/code&gt;的函数，关键字&lt;code&gt;function&lt;/code&gt;可选&lt;/li&gt;
&lt;li&gt;如果使用了关键字&lt;code&gt;function&lt;/code&gt;，则圆括号是可选的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comments&#34;&gt;comments&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在非交互式的 shell 和开启了 interactive_comments 的交互式 shell 中，以&lt;code&gt;#&lt;/code&gt;开头到行末的内容视为注释&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;quoting&#34;&gt;quoting&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;引用用于移除单词或字符对于 shell 具有的特殊含义，也可用于防止参数扩展&lt;/li&gt;
&lt;li&gt;metacharacter(包括&lt;code&gt;| &amp;amp; ; ( ) &amp;lt; &amp;gt;&lt;/code&gt;)在加引号时可用来代表自身，而不是分离单词的字符&lt;/li&gt;
&lt;li&gt;一共有三种引用机制：反斜线、单引号和双引号

&lt;ul&gt;
&lt;li&gt;反斜线：保留它后面紧跟字符的含义，除了新行(此时代表一行的继续，在输入流中会忽视此反斜线)&lt;/li&gt;
&lt;li&gt;单引号：保留单引号&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;parameters&#34;&gt;parameters&lt;/h2&gt;

&lt;h3 id=&#34;positional-parameters&#34;&gt;positional  parameters&lt;/h3&gt;

&lt;h3 id=&#34;special-parameters&#34;&gt;special parameters&lt;/h3&gt;

&lt;h3 id=&#34;shell-variables&#34;&gt;shell variables&lt;/h3&gt;

&lt;h3 id=&#34;array&#34;&gt;array&lt;/h3&gt;

&lt;h2 id=&#34;expansion&#34;&gt;expansion&lt;/h2&gt;

&lt;h3 id=&#34;brace-expansion&#34;&gt;brace expansion&lt;/h3&gt;

&lt;h3 id=&#34;tilde-expansion&#34;&gt;tilde expansion&lt;/h3&gt;

&lt;h3 id=&#34;parameter-expansion&#34;&gt;parameter expansion&lt;/h3&gt;

&lt;h3 id=&#34;command-substitution&#34;&gt;command substitution&lt;/h3&gt;

&lt;h3 id=&#34;arithmetic-expansion&#34;&gt;arithmetic expansion&lt;/h3&gt;

&lt;h3 id=&#34;process-substitution&#34;&gt;process substitution&lt;/h3&gt;

&lt;h3 id=&#34;word-splitting&#34;&gt;word splitting&lt;/h3&gt;

&lt;h3 id=&#34;pathname-expansion&#34;&gt;pathname expansion&lt;/h3&gt;

&lt;h3 id=&#34;quote-removal&#34;&gt;quote removal&lt;/h3&gt;

&lt;h2 id=&#34;redirection&#34;&gt;redirection&lt;/h2&gt;

&lt;h3 id=&#34;input&#34;&gt;input&lt;/h3&gt;

&lt;h3 id=&#34;output&#34;&gt;output&lt;/h3&gt;

&lt;h3 id=&#34;appending-redirected-output&#34;&gt;appending redirected output&lt;/h3&gt;

&lt;h3 id=&#34;redirecting-standard-output-and-standard-error&#34;&gt;redirecting standard output and standard error&lt;/h3&gt;

&lt;h3 id=&#34;appending-standard-output-and-standard-error&#34;&gt;appending standard output and standard error&lt;/h3&gt;

&lt;h3 id=&#34;here-documents&#34;&gt;here documents&lt;/h3&gt;

&lt;h3 id=&#34;here-strings&#34;&gt;here strings&lt;/h3&gt;

&lt;h3 id=&#34;duplicating-file-descriptors&#34;&gt;duplicating file descriptors&lt;/h3&gt;

&lt;h3 id=&#34;moving-file-descriptors&#34;&gt;moving file descriptors&lt;/h3&gt;

&lt;h3 id=&#34;opening-file-descriptors-for-reading-and-writing&#34;&gt;opening file descriptors for reading and writing&lt;/h3&gt;

&lt;h2 id=&#34;aliases&#34;&gt;aliases&lt;/h2&gt;

&lt;h2 id=&#34;functions&#34;&gt;functions&lt;/h2&gt;

&lt;h2 id=&#34;arithmetic-evaluation&#34;&gt;arithmetic evaluation&lt;/h2&gt;

&lt;h2 id=&#34;conditional-expressions&#34;&gt;conditional expressions&lt;/h2&gt;

&lt;h2 id=&#34;simple-command-expansion&#34;&gt;simple command expansion&lt;/h2&gt;

&lt;h2 id=&#34;command-execution&#34;&gt;command execution&lt;/h2&gt;

&lt;h2 id=&#34;command-execution-environment&#34;&gt;command execution environment&lt;/h2&gt;

&lt;h2 id=&#34;environment&#34;&gt;environment&lt;/h2&gt;

&lt;h2 id=&#34;exit-status&#34;&gt;exit status&lt;/h2&gt;

&lt;h2 id=&#34;signals&#34;&gt;signals&lt;/h2&gt;

&lt;h2 id=&#34;job-control&#34;&gt;job control&lt;/h2&gt;

&lt;h2 id=&#34;prompting&#34;&gt;prompting&lt;/h2&gt;

&lt;h2 id=&#34;readline&#34;&gt;readline&lt;/h2&gt;

&lt;h3 id=&#34;readline-notation&#34;&gt;readline notation&lt;/h3&gt;

&lt;h3 id=&#34;readline-initialization&#34;&gt;readline initialization&lt;/h3&gt;

&lt;h3 id=&#34;readline-key-bindings&#34;&gt;readline key bindings&lt;/h3&gt;

&lt;h3 id=&#34;readline-variables&#34;&gt;readline variables&lt;/h3&gt;

&lt;h3 id=&#34;readline-conditional-constructs&#34;&gt;readline conditional constructs&lt;/h3&gt;

&lt;h3 id=&#34;searching&#34;&gt;searching&lt;/h3&gt;

&lt;h3 id=&#34;readline-command-names&#34;&gt;readline command names&lt;/h3&gt;

&lt;h3 id=&#34;commands-for-moving&#34;&gt;commands for moving&lt;/h3&gt;

&lt;h3 id=&#34;commands-for-manipulating-the-history&#34;&gt;commands for manipulating the history&lt;/h3&gt;

&lt;h3 id=&#34;commands-for-changing-text&#34;&gt;commands for changing text&lt;/h3&gt;

&lt;h3 id=&#34;killing-and-yanking&#34;&gt;killing and yanking&lt;/h3&gt;

&lt;h3 id=&#34;numeric-arguments&#34;&gt;numeric arguments&lt;/h3&gt;

&lt;h3 id=&#34;completing&#34;&gt;completing&lt;/h3&gt;

&lt;h3 id=&#34;keyboard-macros&#34;&gt;keyboard macros&lt;/h3&gt;

&lt;h3 id=&#34;miscellaneous&#34;&gt;miscellaneous&lt;/h3&gt;

&lt;h3 id=&#34;programmable-completion&#34;&gt;programmable completion&lt;/h3&gt;

&lt;h2 id=&#34;history&#34;&gt;history&lt;/h2&gt;

&lt;h2 id=&#34;history-expansion&#34;&gt;history expansion&lt;/h2&gt;

&lt;h3 id=&#34;event-designators&#34;&gt;event designators&lt;/h3&gt;

&lt;h3 id=&#34;word-designators&#34;&gt;word designators&lt;/h3&gt;

&lt;h3 id=&#34;modifiers&#34;&gt;modifiers&lt;/h3&gt;

&lt;h2 id=&#34;shell-builtin-commands&#34;&gt;shell builtin commands&lt;/h2&gt;

&lt;h2 id=&#34;restricted-shell&#34;&gt;restricted shell&lt;/h2&gt;

&lt;h2 id=&#34;files&#34;&gt;files&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
