<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stackoverflow | kiki</title>
    <link>https://xueqing.github.io/tags/stackoverflow/</link>
      <atom:link href="https://xueqing.github.io/tags/stackoverflow/index.xml" rel="self" type="application/rss+xml" />
    <description>stackoverflow</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh-Hans</language>
    <image>
      <url>https://xueqing.github.io/img/icon-192.png</url>
      <title>stackoverflow</title>
      <link>https://xueqing.github.io/tags/stackoverflow/</link>
    </image>
    
    <item>
      <title>删除 void 指针</title>
      <link>https://xueqing.github.io/blog/stackoverflow/delete_void_pointer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xueqing.github.io/blog/stackoverflow/delete_void_pointer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/941832/is-it-safe-to-delete-a-void-pointer&#34; target=&#34;_blank&#34;&gt;Is it safe to delete a void pointer?&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;void* my_alloc (size_t size)
{
return new char [size];
}

void my_free (void* ptr)
{
delete [] ptr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于内建类型，&lt;code&gt;delete void*&lt;/code&gt;不会造成内存泄漏，系统在分配内存的时候记录了分配内存的大小，指针的分配信息和指针放在一起，释放的时候会返回到对应的位置。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;分配对象的时候，除了分配所需内存大小存放对象信息，会先分配一个内存控制块，标记该内存块的大小及是否可用。调用&lt;code&gt;delete&lt;/code&gt;的时候会将该内存块标记为空闲，释放内存&lt;/li&gt;

&lt;li&gt;&lt;p&gt;内存控制块结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;struct mem_control_block
{
int is_available;
int size;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于类，析构的时候会调用析构函数（在其中释放指针变量申请的内存）。但是调用&lt;code&gt;void*&lt;/code&gt;丢失了指针的类型，将不会调用类的析构函数，当类中存在指针类型时，该指针类型指向的内存将无法释放。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于自定义类型的分配和释放，&lt;code&gt;delete void*&lt;/code&gt;可能会造成内存泄漏，这是未定义的行为（undefined behavior），建议用模板实现。或者生成分配池，对于特定的类型会更有效。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
